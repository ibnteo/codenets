
codenets.elf:     формат файла elf32-avr

Разделы:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00002436  000024ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002436  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000019e  00800124  00800124  0000250e  2**0
                  ALLOC
  3 .eeprom       00000003  00810000  00810000  0000250e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000011  00000000  00000000  00002511  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002524  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000002e8  00000000  00000000  00002564  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006131  00000000  00000000  0000284c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001c7f  00000000  00000000  0000897d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003e02  00000000  00000000  0000a5fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000008ec  00000000  00000000  0000e400  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000024eb  00000000  00000000  0000ecec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003ba9  00000000  00000000  000111d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000005c0  00000000  00000000  00014d80  2**0
                  CONTENTS, READONLY, DEBUGGING

Дизассемблирование раздела .text:

00000000 <__vectors>:
       0:	53 c1       	rjmp	.+678    	; 0x2a8 <__ctors_end>
       2:	00 00       	nop
       4:	6e c1       	rjmp	.+732    	; 0x2e2 <__bad_interrupt>
       6:	00 00       	nop
       8:	6c c1       	rjmp	.+728    	; 0x2e2 <__bad_interrupt>
       a:	00 00       	nop
       c:	6a c1       	rjmp	.+724    	; 0x2e2 <__bad_interrupt>
       e:	00 00       	nop
      10:	68 c1       	rjmp	.+720    	; 0x2e2 <__bad_interrupt>
      12:	00 00       	nop
      14:	66 c1       	rjmp	.+716    	; 0x2e2 <__bad_interrupt>
      16:	00 00       	nop
      18:	64 c1       	rjmp	.+712    	; 0x2e2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	62 c1       	rjmp	.+708    	; 0x2e2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	60 c1       	rjmp	.+704    	; 0x2e2 <__bad_interrupt>
      22:	00 00       	nop
      24:	5e c1       	rjmp	.+700    	; 0x2e2 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 b2 0d 	jmp	0x1b64	; 0x1b64 <__vector_10>
      2c:	5a c1       	rjmp	.+692    	; 0x2e2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	58 c1       	rjmp	.+688    	; 0x2e2 <__bad_interrupt>
      32:	00 00       	nop
      34:	56 c1       	rjmp	.+684    	; 0x2e2 <__bad_interrupt>
      36:	00 00       	nop
      38:	54 c1       	rjmp	.+680    	; 0x2e2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	52 c1       	rjmp	.+676    	; 0x2e2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	50 c1       	rjmp	.+672    	; 0x2e2 <__bad_interrupt>
      42:	00 00       	nop
      44:	4e c1       	rjmp	.+668    	; 0x2e2 <__bad_interrupt>
      46:	00 00       	nop
      48:	4c c1       	rjmp	.+664    	; 0x2e2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4a c1       	rjmp	.+660    	; 0x2e2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	48 c1       	rjmp	.+656    	; 0x2e2 <__bad_interrupt>
      52:	00 00       	nop
      54:	46 c1       	rjmp	.+652    	; 0x2e2 <__bad_interrupt>
      56:	00 00       	nop
      58:	44 c1       	rjmp	.+648    	; 0x2e2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	42 c1       	rjmp	.+644    	; 0x2e2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	40 c1       	rjmp	.+640    	; 0x2e2 <__bad_interrupt>
      62:	00 00       	nop
      64:	3e c1       	rjmp	.+636    	; 0x2e2 <__bad_interrupt>
      66:	00 00       	nop
      68:	3c c1       	rjmp	.+632    	; 0x2e2 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	3a c1       	rjmp	.+628    	; 0x2e2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	38 c1       	rjmp	.+624    	; 0x2e2 <__bad_interrupt>
      72:	00 00       	nop
      74:	36 c1       	rjmp	.+620    	; 0x2e2 <__bad_interrupt>
      76:	00 00       	nop
      78:	34 c1       	rjmp	.+616    	; 0x2e2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	32 c1       	rjmp	.+612    	; 0x2e2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	30 c1       	rjmp	.+608    	; 0x2e2 <__bad_interrupt>
      82:	00 00       	nop
      84:	2e c1       	rjmp	.+604    	; 0x2e2 <__bad_interrupt>
      86:	00 00       	nop
      88:	2c c1       	rjmp	.+600    	; 0x2e2 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	2a c1       	rjmp	.+596    	; 0x2e2 <__bad_interrupt>
      8e:	00 00       	nop
      90:	28 c1       	rjmp	.+592    	; 0x2e2 <__bad_interrupt>
      92:	00 00       	nop
      94:	26 c1       	rjmp	.+588    	; 0x2e2 <__bad_interrupt>
      96:	00 00       	nop
      98:	24 c1       	rjmp	.+584    	; 0x2e2 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	22 c1       	rjmp	.+580    	; 0x2e2 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	20 c1       	rjmp	.+576    	; 0x2e2 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	1e c1       	rjmp	.+572    	; 0x2e2 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	1c c1       	rjmp	.+568    	; 0x2e2 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	a1 0e       	add	r10, r17
      ae:	c3 0e       	add	r12, r19
      b0:	b0 0f       	add	r27, r16
      b2:	c3 0e       	add	r12, r19
      b4:	b0 0f       	add	r27, r16
      b6:	08 0f       	add	r16, r24
      b8:	2a 0f       	add	r18, r26
      ba:	b0 0f       	add	r27, r16
      bc:	7c 0f       	add	r23, r28
      be:	8e 0f       	add	r24, r30

000000c0 <Layers>:
      c0:	00 00 00 00 14 1a 08 17 04 2b 00 00 00 15 19 07     .........+......
      d0:	09 0a 00 00 00 00 1d 1b 06 05 16 00 00 00 30 12     ..............0.
      e0:	18 11 1c 13 00 00 00 34 0b 0d 0e 0f 33 00 00 00     .......4....3...
      f0:	35 0c 10 36 37 2f 35 00 00 00 14 1a 08 15 17 2b     5..67/5........+
     100:	00 00 00 04 16 07 09 0a 00 00 00 00 1d 1b 06 19     ................
     110:	05 00 00 2f 30 1c 18 0c 12 13 00 00 00 34 0b 0d     .../0........4..
     120:	0e 0f 33 00 00 00 00 11 10 36 37 38 00 00 00 00     ..3......678....
     130:	1e 1f 20 21 22 00 00 00 00 23 24 25 26 27 fd 00     .. !"....#$%&'..
     140:	00 00 31 38 2e 2d 37 00 00 49 00 4b fb 52 4c 2a     ..18.-7..I.K.RL*
     150:	00 00 00 00 4e 50 51 4f 28 00 00 00 fc 2c 4a 2b     ....NPQO(....,J+
     160:	4d 29 00 00 00 00 3a 3b 3c 3d 46 39 00 00 00 3e     M)....:;<=F9...>
     170:	3f 40 41 47 00 00 00 00 42 43 44 45 48 53 00 00     ?@AG....BCDEHS..
     180:	00 54 5f 60 61 56 00 00 00 00 55 5c 5d 5e 57 00     .T_`aV....U\]^W.
     190:	00 00 58 62 59 5a 5b 63                             ..XbYZ[c

00000198 <Layer_Mods>:
     198:	e3 00 00 00 fe e3 e0 e1 2a 2a 2c ff                 ........**,.

000001a4 <ProductString>:
     1a4:	18 03 43 00 6f 00 64 00 65 00 6e 00 65 00 74 00     ..C.o.d.e.n.e.t.
     1b4:	73 00 00 00                                         s...

000001b8 <ManufacturerString>:
     1b8:	0e 03 4b 00 6c 00 61 00 76 00 72 00 67 00 00 00     ..K.l.a.v.r.g...

000001c8 <LanguageString>:
     1c8:	04 03 09 04                                         ....

000001cc <ConfigurationDescriptor>:
     1cc:	09 02 3b 00 02 01 00 c0 32 09 04 00 00 01 03 01     ..;.....2.......
     1dc:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
     1ec:	00 05 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...
     1fc:	01 22 4f 00 07 05 83 03 08 00 05                    ."O........

00000207 <DeviceDescriptor>:
     207:	12 01 10 01 00 00 00 08 eb 03 4d 20 01 00 01 02     ..........M ....
     217:	00 01                                               ..

00000219 <KeyboardReport>:
     219:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     229:	75 01 95 08 81 02 95 01 75 08 81 01 05 08 19 01     u.......u.......
     239:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 15 00     )...u.....u.....
     249:	25 ff 05 07 19 00 29 ff 95 06 75 08 81 00 c0        %.....)...u....

00000258 <MouseReport>:
     258:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 03     ..............).
     268:	15 00 25 01 95 03 75 01 81 02 95 01 75 05 81 01     ..%...u.....u...
     278:	05 01 09 30 09 31 16 80 ff 26 7f 00 36 ff ff 46     ...0.1...&..6..F
     288:	01 00 95 02 75 08 81 06 a1 02 09 38 16 80 ff 26     ....u......8...&
     298:	80 ff 36 ff ff 46 01 00 75 08 81 06 c0 c0 c0 00     ..6..F..u.......

000002a8 <__ctors_end>:
     2a8:	11 24       	eor	r1, r1
     2aa:	1f be       	out	0x3f, r1	; 63
     2ac:	cf ef       	ldi	r28, 0xFF	; 255
     2ae:	da e0       	ldi	r29, 0x0A	; 10
     2b0:	de bf       	out	0x3e, r29	; 62
     2b2:	cd bf       	out	0x3d, r28	; 61

000002b4 <__do_copy_data>:
     2b4:	11 e0       	ldi	r17, 0x01	; 1
     2b6:	a0 e0       	ldi	r26, 0x00	; 0
     2b8:	b1 e0       	ldi	r27, 0x01	; 1
     2ba:	e6 e3       	ldi	r30, 0x36	; 54
     2bc:	f4 e2       	ldi	r31, 0x24	; 36
     2be:	02 c0       	rjmp	.+4      	; 0x2c4 <__do_copy_data+0x10>
     2c0:	05 90       	lpm	r0, Z+
     2c2:	0d 92       	st	X+, r0
     2c4:	a4 32       	cpi	r26, 0x24	; 36
     2c6:	b1 07       	cpc	r27, r17
     2c8:	d9 f7       	brne	.-10     	; 0x2c0 <__do_copy_data+0xc>

000002ca <__do_clear_bss>:
     2ca:	22 e0       	ldi	r18, 0x02	; 2
     2cc:	a4 e2       	ldi	r26, 0x24	; 36
     2ce:	b1 e0       	ldi	r27, 0x01	; 1
     2d0:	01 c0       	rjmp	.+2      	; 0x2d4 <.do_clear_bss_start>

000002d2 <.do_clear_bss_loop>:
     2d2:	1d 92       	st	X+, r1

000002d4 <.do_clear_bss_start>:
     2d4:	a2 3c       	cpi	r26, 0xC2	; 194
     2d6:	b2 07       	cpc	r27, r18
     2d8:	e1 f7       	brne	.-8      	; 0x2d2 <.do_clear_bss_loop>
     2da:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <main>
     2de:	0c 94 19 12 	jmp	0x2432	; 0x2432 <_exit>

000002e2 <__bad_interrupt>:
     2e2:	8e ce       	rjmp	.-740    	; 0x0 <__vectors>

000002e4 <Ports_Init>:
}
void LED2_Off() {
	PORTD |= 1<<5;
}
void LED2_Toggle() {
	PORTD ^= 1<<5;
     2e4:	20 9a       	sbi	0x04, 0	; 4
     2e6:	28 9a       	sbi	0x05, 0	; 5
     2e8:	55 9a       	sbi	0x0a, 5	; 10
     2ea:	5d 9a       	sbi	0x0b, 5	; 11
     2ec:	86 9a       	sbi	0x10, 6	; 16
     2ee:	8e 9a       	sbi	0x11, 6	; 17
     2f0:	87 9a       	sbi	0x10, 7	; 16
     2f2:	8f 9a       	sbi	0x11, 7	; 17
     2f4:	23 9a       	sbi	0x04, 3	; 4
     2f6:	2b 9a       	sbi	0x05, 3	; 5
     2f8:	22 9a       	sbi	0x04, 2	; 4
     2fa:	2a 9a       	sbi	0x05, 2	; 5
     2fc:	26 9a       	sbi	0x04, 6	; 4
     2fe:	2e 9a       	sbi	0x05, 6	; 5
     300:	24 9a       	sbi	0x04, 4	; 4
     302:	2c 9a       	sbi	0x05, 4	; 5
     304:	6e 9a       	sbi	0x0d, 6	; 13
     306:	76 9a       	sbi	0x0e, 6	; 14
     308:	3e 9a       	sbi	0x07, 6	; 7
     30a:	46 9a       	sbi	0x08, 6	; 8
     30c:	54 9a       	sbi	0x0a, 4	; 10
     30e:	5c 9a       	sbi	0x0b, 4	; 11
     310:	84 98       	cbi	0x10, 4	; 16
     312:	8c 9a       	sbi	0x11, 4	; 17
     314:	85 98       	cbi	0x10, 5	; 16
     316:	8d 9a       	sbi	0x11, 5	; 17
     318:	21 98       	cbi	0x04, 1	; 4
     31a:	29 9a       	sbi	0x05, 1	; 5
     31c:	25 98       	cbi	0x04, 5	; 4
     31e:	2d 9a       	sbi	0x05, 5	; 5
     320:	57 98       	cbi	0x0a, 7	; 10
     322:	5f 9a       	sbi	0x0b, 7	; 11
     324:	50 98       	cbi	0x0a, 0	; 10
     326:	58 9a       	sbi	0x0b, 0	; 11
     328:	51 98       	cbi	0x0a, 1	; 10
     32a:	59 9a       	sbi	0x0b, 1	; 11
     32c:	08 95       	ret

0000032e <LED_On>:
     32e:	28 98       	cbi	0x05, 0	; 5
     330:	08 95       	ret

00000332 <LED_Off>:
     332:	28 9a       	sbi	0x05, 0	; 5
     334:	08 95       	ret

00000336 <LED_Toggle>:
     336:	95 b1       	in	r25, 0x05	; 5
     338:	81 e0       	ldi	r24, 0x01	; 1
     33a:	89 27       	eor	r24, r25
     33c:	85 b9       	out	0x05, r24	; 5
     33e:	08 95       	ret

00000340 <LED2_On>:
     340:	5d 98       	cbi	0x0b, 5	; 11
     342:	08 95       	ret

00000344 <LED2_Off>:
     344:	5d 9a       	sbi	0x0b, 5	; 11
     346:	08 95       	ret

00000348 <LED2_Switch>:
}
void LED2_Switch(bool on) {
	if (on) LED2_On(); else LED2_Off();
     348:	81 11       	cpse	r24, r1
     34a:	fa cf       	rjmp	.-12     	; 0x340 <LED2_On>
     34c:	fb cf       	rjmp	.-10     	; 0x344 <LED2_Off>

0000034e <Keyboard_Scan>:
// D5 <=> B0

uint8_t Scan_Tick = 0;
uint16_t Chords_Scan[7];
void Keyboard_Scan() {
	if (Scan_Tick == 0) {
     34e:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <Scan_Tick>
     352:	81 11       	cpse	r24, r1
     354:	1e c0       	rjmp	.+60     	; 0x392 <Keyboard_Scan+0x44>
		Chords_Scan[0] = 0;
     356:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <Chords_Scan+0x1>
     35a:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <Chords_Scan>
		Chords_Scan[1] = 0;
     35e:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <Chords_Scan+0x3>
     362:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <Chords_Scan+0x2>
		Chords_Scan[2] = 0;
     366:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <Chords_Scan+0x5>
     36a:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <Chords_Scan+0x4>
		Chords_Scan[3] = 0;
     36e:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <Chords_Scan+0x7>
     372:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <Chords_Scan+0x6>
		Chords_Scan[4] = 0;
     376:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <Chords_Scan+0x9>
     37a:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <Chords_Scan+0x8>
		Chords_Scan[5] = 0;
     37e:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <Chords_Scan+0xb>
     382:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <Chords_Scan+0xa>
		Chords_Scan[6] = 0;
     386:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <Chords_Scan+0xd>
     38a:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <Chords_Scan+0xc>

		// Set 0
		PORTB &= ~(1<<6); // C0
     38e:	2e 98       	cbi	0x05, 6	; 5
     390:	ef c1       	rjmp	.+990    	; 0x770 <__LOCK_REGION_LENGTH__+0x370>
	} else if (Scan_Tick == 1) {
     392:	81 30       	cpi	r24, 0x01	; 1
     394:	09 f0       	breq	.+2      	; 0x398 <Keyboard_Scan+0x4a>
     396:	46 c0       	rjmp	.+140    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
		if (! (PIND & 1<<1)) Chords_Scan[1] |= 1<<0;
     398:	49 99       	sbic	0x09, 1	; 9
     39a:	09 c0       	rjmp	.+18     	; 0x3ae <Keyboard_Scan+0x60>
     39c:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <Chords_Scan+0x2>
     3a0:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <Chords_Scan+0x3>
     3a4:	81 60       	ori	r24, 0x01	; 1
     3a6:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <Chords_Scan+0x3>
     3aa:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <Chords_Scan+0x2>
		if (! (PIND & 1<<0)) Chords_Scan[2] |= 1<<0;
     3ae:	48 99       	sbic	0x09, 0	; 9
     3b0:	09 c0       	rjmp	.+18     	; 0x3c4 <Keyboard_Scan+0x76>
     3b2:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <Chords_Scan+0x4>
     3b6:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <Chords_Scan+0x5>
     3ba:	81 60       	ori	r24, 0x01	; 1
     3bc:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <Chords_Scan+0x5>
     3c0:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <Chords_Scan+0x4>
		if (! (PIND & 1<<7)) Chords_Scan[3] |= 1<<0;
     3c4:	4f 99       	sbic	0x09, 7	; 9
     3c6:	09 c0       	rjmp	.+18     	; 0x3da <Keyboard_Scan+0x8c>
     3c8:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <Chords_Scan+0x6>
     3cc:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <Chords_Scan+0x7>
     3d0:	81 60       	ori	r24, 0x01	; 1
     3d2:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <Chords_Scan+0x7>
     3d6:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <Chords_Scan+0x6>
		if (! (PINF & 1<<4)) Chords_Scan[4] |= 1<<4;
     3da:	7c 99       	sbic	0x0f, 4	; 15
     3dc:	09 c0       	rjmp	.+18     	; 0x3f0 <Keyboard_Scan+0xa2>
     3de:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <Chords_Scan+0x8>
     3e2:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <Chords_Scan+0x9>
     3e6:	80 61       	ori	r24, 0x10	; 16
     3e8:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <Chords_Scan+0x9>
     3ec:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <Chords_Scan+0x8>
		if (! (PINF & 1<<5)) Chords_Scan[5] |= 1<<4;
     3f0:	7d 99       	sbic	0x0f, 5	; 15
     3f2:	09 c0       	rjmp	.+18     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     3f4:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <Chords_Scan+0xa>
     3f8:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <Chords_Scan+0xb>
     3fc:	80 61       	ori	r24, 0x10	; 16
     3fe:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <Chords_Scan+0xb>
     402:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <Chords_Scan+0xa>
		if (! (PINB & 1<<1)) Chords_Scan[6] |= 1<<4;
     406:	19 99       	sbic	0x03, 1	; 3
     408:	09 c0       	rjmp	.+18     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     40a:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <Chords_Scan+0xc>
     40e:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <Chords_Scan+0xd>
     412:	80 61       	ori	r24, 0x10	; 16
     414:	90 93 22 02 	sts	0x0222, r25	; 0x800222 <Chords_Scan+0xd>
     418:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <Chords_Scan+0xc>

		// Set 1
		PORTB |= 1<<6;
     41c:	2e 9a       	sbi	0x05, 6	; 5

		// Set 0
		PORTB &= ~(1<<2); // C1
     41e:	2a 98       	cbi	0x05, 2	; 5
		PORTB &= ~(1<<4); // C8
     420:	2c 98       	cbi	0x05, 4	; 5
     422:	a6 c1       	rjmp	.+844    	; 0x770 <__LOCK_REGION_LENGTH__+0x370>
	} else if (Scan_Tick == 2) {
     424:	82 30       	cpi	r24, 0x02	; 2
     426:	09 f0       	breq	.+2      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     428:	46 c0       	rjmp	.+140    	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
		if (! (PIND & 1<<1)) Chords_Scan[1] |= 1<<1;
     42a:	49 99       	sbic	0x09, 1	; 9
     42c:	09 c0       	rjmp	.+18     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     42e:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <Chords_Scan+0x2>
     432:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <Chords_Scan+0x3>
     436:	82 60       	ori	r24, 0x02	; 2
     438:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <Chords_Scan+0x3>
     43c:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <Chords_Scan+0x2>
		if (! (PIND & 1<<0)) Chords_Scan[2] |= 1<<1;
     440:	48 99       	sbic	0x09, 0	; 9
     442:	09 c0       	rjmp	.+18     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     444:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <Chords_Scan+0x4>
     448:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <Chords_Scan+0x5>
     44c:	82 60       	ori	r24, 0x02	; 2
     44e:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <Chords_Scan+0x5>
     452:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <Chords_Scan+0x4>
		if (! (PIND & 1<<7)) Chords_Scan[3] |= 1<<1;
     456:	4f 99       	sbic	0x09, 7	; 9
     458:	09 c0       	rjmp	.+18     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     45a:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <Chords_Scan+0x6>
     45e:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <Chords_Scan+0x7>
     462:	82 60       	ori	r24, 0x02	; 2
     464:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <Chords_Scan+0x7>
     468:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <Chords_Scan+0x6>
		if (! (PINF & 1<<4)) Chords_Scan[4] |= 1<<3;
     46c:	7c 99       	sbic	0x0f, 4	; 15
     46e:	09 c0       	rjmp	.+18     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
     470:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <Chords_Scan+0x8>
     474:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <Chords_Scan+0x9>
     478:	88 60       	ori	r24, 0x08	; 8
     47a:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <Chords_Scan+0x9>
     47e:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <Chords_Scan+0x8>
		if (! (PINF & 1<<5)) Chords_Scan[5] |= 1<<3;
     482:	7d 99       	sbic	0x0f, 5	; 15
     484:	09 c0       	rjmp	.+18     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
     486:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <Chords_Scan+0xa>
     48a:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <Chords_Scan+0xb>
     48e:	88 60       	ori	r24, 0x08	; 8
     490:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <Chords_Scan+0xb>
     494:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <Chords_Scan+0xa>
		if (! (PINB & 1<<1)) Chords_Scan[6] |= 1<<3;
     498:	19 99       	sbic	0x03, 1	; 3
     49a:	09 c0       	rjmp	.+18     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     49c:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <Chords_Scan+0xc>
     4a0:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <Chords_Scan+0xd>
     4a4:	88 60       	ori	r24, 0x08	; 8
     4a6:	90 93 22 02 	sts	0x0222, r25	; 0x800222 <Chords_Scan+0xd>
     4aa:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <Chords_Scan+0xc>

		// Set 1
		PORTB |= 1<<2;
     4ae:	2a 9a       	sbi	0x05, 2	; 5
		PORTB |= 1<<4;
     4b0:	2c 9a       	sbi	0x05, 4	; 5

		// Set 0
		PORTB &= ~(1<<3); // C2
     4b2:	2b 98       	cbi	0x05, 3	; 5
     4b4:	5d c1       	rjmp	.+698    	; 0x770 <__LOCK_REGION_LENGTH__+0x370>
	} else if (Scan_Tick == 3) {
     4b6:	83 30       	cpi	r24, 0x03	; 3
     4b8:	79 f5       	brne	.+94     	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
		if (! (PINF & 1<<4)) Chords_Scan[4] |= 1<<2;
     4ba:	7c 99       	sbic	0x0f, 4	; 15
     4bc:	09 c0       	rjmp	.+18     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     4be:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <Chords_Scan+0x8>
     4c2:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <Chords_Scan+0x9>
     4c6:	84 60       	ori	r24, 0x04	; 4
     4c8:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <Chords_Scan+0x9>
     4cc:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <Chords_Scan+0x8>
		if (! (PINF & 1<<5)) Chords_Scan[5] |= 1<<2;
     4d0:	7d 99       	sbic	0x0f, 5	; 15
     4d2:	09 c0       	rjmp	.+18     	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
     4d4:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <Chords_Scan+0xa>
     4d8:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <Chords_Scan+0xb>
     4dc:	84 60       	ori	r24, 0x04	; 4
     4de:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <Chords_Scan+0xb>
     4e2:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <Chords_Scan+0xa>
		if (! (PINB & 1<<1)) Chords_Scan[6] |= 1<<2;
     4e6:	19 99       	sbic	0x03, 1	; 3
     4e8:	09 c0       	rjmp	.+18     	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
     4ea:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <Chords_Scan+0xc>
     4ee:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <Chords_Scan+0xd>
     4f2:	84 60       	ori	r24, 0x04	; 4
     4f4:	90 93 22 02 	sts	0x0222, r25	; 0x800222 <Chords_Scan+0xd>
     4f8:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <Chords_Scan+0xc>
		if (! (PINB & 1<<5)) Chords_Scan[0] |= 1<<5;
     4fc:	1d 99       	sbic	0x03, 5	; 3
     4fe:	09 c0       	rjmp	.+18     	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
     500:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <Chords_Scan>
     504:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <Chords_Scan+0x1>
     508:	80 62       	ori	r24, 0x20	; 32
     50a:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <Chords_Scan+0x1>
     50e:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <Chords_Scan>

		// Set 1
		PORTB |= 1<<3;
     512:	2b 9a       	sbi	0x05, 3	; 5

		// Set 0
		PORTE &= ~(1<<6); // C7
     514:	76 98       	cbi	0x0e, 6	; 14
     516:	2c c1       	rjmp	.+600    	; 0x770 <__LOCK_REGION_LENGTH__+0x370>
	} else if (Scan_Tick == 4) {
     518:	84 30       	cpi	r24, 0x04	; 4
     51a:	79 f5       	brne	.+94     	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
		if (! (PIND & 1<<1)) Chords_Scan[1] |= 1<<2;
     51c:	49 99       	sbic	0x09, 1	; 9
     51e:	09 c0       	rjmp	.+18     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
     520:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <Chords_Scan+0x2>
     524:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <Chords_Scan+0x3>
     528:	84 60       	ori	r24, 0x04	; 4
     52a:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <Chords_Scan+0x3>
     52e:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <Chords_Scan+0x2>
		if (! (PIND & 1<<0)) Chords_Scan[2] |= 1<<2;
     532:	48 99       	sbic	0x09, 0	; 9
     534:	09 c0       	rjmp	.+18     	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
     536:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <Chords_Scan+0x4>
     53a:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <Chords_Scan+0x5>
     53e:	84 60       	ori	r24, 0x04	; 4
     540:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <Chords_Scan+0x5>
     544:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <Chords_Scan+0x4>
		if (! (PIND & 1<<7)) Chords_Scan[3] |= 1<<2;
     548:	4f 99       	sbic	0x09, 7	; 9
     54a:	09 c0       	rjmp	.+18     	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
     54c:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <Chords_Scan+0x6>
     550:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <Chords_Scan+0x7>
     554:	84 60       	ori	r24, 0x04	; 4
     556:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <Chords_Scan+0x7>
     55a:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <Chords_Scan+0x6>
		if (! (PINB & 1<<5)) Chords_Scan[0] |= 1<<0;
     55e:	1d 99       	sbic	0x03, 5	; 3
     560:	09 c0       	rjmp	.+18     	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
     562:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <Chords_Scan>
     566:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <Chords_Scan+0x1>
     56a:	81 60       	ori	r24, 0x01	; 1
     56c:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <Chords_Scan+0x1>
     570:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <Chords_Scan>

		// Set 1
		PORTE |= 1<<6;
     574:	76 9a       	sbi	0x0e, 6	; 14

		// Set 0
		PORTF &= ~(1<<6); // C3
     576:	8e 98       	cbi	0x11, 6	; 17
     578:	fb c0       	rjmp	.+502    	; 0x770 <__LOCK_REGION_LENGTH__+0x370>
	} else if (Scan_Tick == 5) {
     57a:	85 30       	cpi	r24, 0x05	; 5
     57c:	79 f5       	brne	.+94     	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
		if (! (PINF & 1<<4)) Chords_Scan[4] |= 1<<1;
     57e:	7c 99       	sbic	0x0f, 4	; 15
     580:	09 c0       	rjmp	.+18     	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
     582:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <Chords_Scan+0x8>
     586:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <Chords_Scan+0x9>
     58a:	82 60       	ori	r24, 0x02	; 2
     58c:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <Chords_Scan+0x9>
     590:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <Chords_Scan+0x8>
		if (! (PINF & 1<<5)) Chords_Scan[5] |= 1<<1;
     594:	7d 99       	sbic	0x0f, 5	; 15
     596:	09 c0       	rjmp	.+18     	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
     598:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <Chords_Scan+0xa>
     59c:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <Chords_Scan+0xb>
     5a0:	82 60       	ori	r24, 0x02	; 2
     5a2:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <Chords_Scan+0xb>
     5a6:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <Chords_Scan+0xa>
		if (! (PINB & 1<<1)) Chords_Scan[6] |= 1<<1;
     5aa:	19 99       	sbic	0x03, 1	; 3
     5ac:	09 c0       	rjmp	.+18     	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
     5ae:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <Chords_Scan+0xc>
     5b2:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <Chords_Scan+0xd>
     5b6:	82 60       	ori	r24, 0x02	; 2
     5b8:	90 93 22 02 	sts	0x0222, r25	; 0x800222 <Chords_Scan+0xd>
     5bc:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <Chords_Scan+0xc>
		if (! (PINB & 1<<5)) Chords_Scan[0] |= 1<<4;
     5c0:	1d 99       	sbic	0x03, 5	; 3
     5c2:	09 c0       	rjmp	.+18     	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
     5c4:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <Chords_Scan>
     5c8:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <Chords_Scan+0x1>
     5cc:	80 61       	ori	r24, 0x10	; 16
     5ce:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <Chords_Scan+0x1>
     5d2:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <Chords_Scan>

		// Set 1
		PORTF |= 1<<6;
     5d6:	8e 9a       	sbi	0x11, 6	; 17

		// Set 0
		PORTD &= ~(1<<4); // C6
     5d8:	5c 98       	cbi	0x0b, 4	; 11
     5da:	ca c0       	rjmp	.+404    	; 0x770 <__LOCK_REGION_LENGTH__+0x370>
	} else if (Scan_Tick == 6) {
     5dc:	86 30       	cpi	r24, 0x06	; 6
     5de:	79 f5       	brne	.+94     	; 0x63e <__LOCK_REGION_LENGTH__+0x23e>
		if (! (PIND & 1<<1)) Chords_Scan[1] |= 1<<3;
     5e0:	49 99       	sbic	0x09, 1	; 9
     5e2:	09 c0       	rjmp	.+18     	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
     5e4:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <Chords_Scan+0x2>
     5e8:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <Chords_Scan+0x3>
     5ec:	88 60       	ori	r24, 0x08	; 8
     5ee:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <Chords_Scan+0x3>
     5f2:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <Chords_Scan+0x2>
		if (! (PIND & 1<<0)) Chords_Scan[2] |= 1<<3;
     5f6:	48 99       	sbic	0x09, 0	; 9
     5f8:	09 c0       	rjmp	.+18     	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
     5fa:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <Chords_Scan+0x4>
     5fe:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <Chords_Scan+0x5>
     602:	88 60       	ori	r24, 0x08	; 8
     604:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <Chords_Scan+0x5>
     608:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <Chords_Scan+0x4>
		if (! (PIND & 1<<7)) Chords_Scan[3] |= 1<<3;
     60c:	4f 99       	sbic	0x09, 7	; 9
     60e:	09 c0       	rjmp	.+18     	; 0x622 <__LOCK_REGION_LENGTH__+0x222>
     610:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <Chords_Scan+0x6>
     614:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <Chords_Scan+0x7>
     618:	88 60       	ori	r24, 0x08	; 8
     61a:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <Chords_Scan+0x7>
     61e:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <Chords_Scan+0x6>
		if (! (PINB & 1<<5)) Chords_Scan[0] |= 1<<1;
     622:	1d 99       	sbic	0x03, 5	; 3
     624:	09 c0       	rjmp	.+18     	; 0x638 <__LOCK_REGION_LENGTH__+0x238>
     626:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <Chords_Scan>
     62a:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <Chords_Scan+0x1>
     62e:	82 60       	ori	r24, 0x02	; 2
     630:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <Chords_Scan+0x1>
     634:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <Chords_Scan>

		// Set 1
		PORTD |= 1<<4;
     638:	5c 9a       	sbi	0x0b, 4	; 11

		// Set 0
		PORTF &= ~(1<<7); // C4
     63a:	8f 98       	cbi	0x11, 7	; 17
     63c:	99 c0       	rjmp	.+306    	; 0x770 <__LOCK_REGION_LENGTH__+0x370>
	} else if (Scan_Tick == 7) {
     63e:	87 30       	cpi	r24, 0x07	; 7
     640:	79 f5       	brne	.+94     	; 0x6a0 <__LOCK_REGION_LENGTH__+0x2a0>
		if (! (PINF & 1<<4)) Chords_Scan[4] |= 1<<0;
     642:	7c 99       	sbic	0x0f, 4	; 15
     644:	09 c0       	rjmp	.+18     	; 0x658 <__LOCK_REGION_LENGTH__+0x258>
     646:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <Chords_Scan+0x8>
     64a:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <Chords_Scan+0x9>
     64e:	81 60       	ori	r24, 0x01	; 1
     650:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <Chords_Scan+0x9>
     654:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <Chords_Scan+0x8>
		if (! (PINF & 1<<5)) Chords_Scan[5] |= 1<<0;
     658:	7d 99       	sbic	0x0f, 5	; 15
     65a:	09 c0       	rjmp	.+18     	; 0x66e <__LOCK_REGION_LENGTH__+0x26e>
     65c:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <Chords_Scan+0xa>
     660:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <Chords_Scan+0xb>
     664:	81 60       	ori	r24, 0x01	; 1
     666:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <Chords_Scan+0xb>
     66a:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <Chords_Scan+0xa>
		if (! (PINB & 1<<1)) Chords_Scan[6] |= 1<<0;
     66e:	19 99       	sbic	0x03, 1	; 3
     670:	09 c0       	rjmp	.+18     	; 0x684 <__LOCK_REGION_LENGTH__+0x284>
     672:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <Chords_Scan+0xc>
     676:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <Chords_Scan+0xd>
     67a:	81 60       	ori	r24, 0x01	; 1
     67c:	90 93 22 02 	sts	0x0222, r25	; 0x800222 <Chords_Scan+0xd>
     680:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <Chords_Scan+0xc>
		if (! (PINB & 1<<5)) Chords_Scan[0] |= 1<<3;
     684:	1d 99       	sbic	0x03, 5	; 3
     686:	09 c0       	rjmp	.+18     	; 0x69a <__LOCK_REGION_LENGTH__+0x29a>
     688:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <Chords_Scan>
     68c:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <Chords_Scan+0x1>
     690:	88 60       	ori	r24, 0x08	; 8
     692:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <Chords_Scan+0x1>
     696:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <Chords_Scan>

		// Set 1
		PORTF |= 1<<7;
     69a:	8f 9a       	sbi	0x11, 7	; 17

		// Set 0
		PORTC &= ~(1<<6); // C5
     69c:	46 98       	cbi	0x08, 6	; 8
     69e:	68 c0       	rjmp	.+208    	; 0x770 <__LOCK_REGION_LENGTH__+0x370>
	} else if (Scan_Tick == 8) {
     6a0:	88 30       	cpi	r24, 0x08	; 8
     6a2:	09 f0       	breq	.+2      	; 0x6a6 <__LOCK_REGION_LENGTH__+0x2a6>
     6a4:	65 c0       	rjmp	.+202    	; 0x770 <__LOCK_REGION_LENGTH__+0x370>
		if (! (PIND & 1<<1)) Chords_Scan[1] |= 1<<4;
     6a6:	49 99       	sbic	0x09, 1	; 9
     6a8:	09 c0       	rjmp	.+18     	; 0x6bc <__LOCK_REGION_LENGTH__+0x2bc>
     6aa:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <Chords_Scan+0x2>
     6ae:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <Chords_Scan+0x3>
     6b2:	80 61       	ori	r24, 0x10	; 16
     6b4:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <Chords_Scan+0x3>
     6b8:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <Chords_Scan+0x2>
		if (! (PIND & 1<<0)) Chords_Scan[2] |= 1<<4;
     6bc:	48 99       	sbic	0x09, 0	; 9
     6be:	09 c0       	rjmp	.+18     	; 0x6d2 <__LOCK_REGION_LENGTH__+0x2d2>
     6c0:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <Chords_Scan+0x4>
     6c4:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <Chords_Scan+0x5>
     6c8:	80 61       	ori	r24, 0x10	; 16
     6ca:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <Chords_Scan+0x5>
     6ce:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <Chords_Scan+0x4>
		if (! (PIND & 1<<7)) Chords_Scan[3] |= 1<<4;
     6d2:	4f 99       	sbic	0x09, 7	; 9
     6d4:	09 c0       	rjmp	.+18     	; 0x6e8 <__LOCK_REGION_LENGTH__+0x2e8>
     6d6:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <Chords_Scan+0x6>
     6da:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <Chords_Scan+0x7>
     6de:	80 61       	ori	r24, 0x10	; 16
     6e0:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <Chords_Scan+0x7>
     6e4:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <Chords_Scan+0x6>
		if (! (PINB & 1<<5)) Chords_Scan[0] |= 1<<2;
     6e8:	1d 99       	sbic	0x03, 5	; 3
     6ea:	09 c0       	rjmp	.+18     	; 0x6fe <__LOCK_REGION_LENGTH__+0x2fe>
     6ec:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <Chords_Scan>
     6f0:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <Chords_Scan+0x1>
     6f4:	84 60       	ori	r24, 0x04	; 4
     6f6:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <Chords_Scan+0x1>
     6fa:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <Chords_Scan>

		// Set 1
		PORTC |= 1<<6;
     6fe:	46 9a       	sbi	0x08, 6	; 8

		Chords[0] = Chords_Scan[0];
     700:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <Chords_Scan>
     704:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <Chords_Scan+0x1>
     708:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <Chords+0x1>
     70c:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <Chords>
		Chords[1] = Chords_Scan[1];
     710:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <Chords_Scan+0x2>
     714:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <Chords_Scan+0x3>
     718:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <Chords+0x3>
     71c:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <Chords+0x2>
		Chords[2] = Chords_Scan[2];
     720:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <Chords_Scan+0x4>
     724:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <Chords_Scan+0x5>
     728:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <Chords+0x5>
     72c:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <Chords+0x4>
		Chords[3] = Chords_Scan[3];
     730:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <Chords_Scan+0x6>
     734:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <Chords_Scan+0x7>
     738:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <Chords+0x7>
     73c:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <Chords+0x6>
		Chords[4] = Chords_Scan[4];
     740:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <Chords_Scan+0x8>
     744:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <Chords_Scan+0x9>
     748:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <Chords+0x9>
     74c:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Chords+0x8>
		Chords[5] = Chords_Scan[5];
     750:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <Chords_Scan+0xa>
     754:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <Chords_Scan+0xb>
     758:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <Chords+0xb>
     75c:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <Chords+0xa>
		Chords[6] = Chords_Scan[6];
     760:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <Chords_Scan+0xc>
     764:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <Chords_Scan+0xd>
     768:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <Chords+0xd>
     76c:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <Chords+0xc>
	}
	Scan_Tick ++;
     770:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <Scan_Tick>
     774:	8f 5f       	subi	r24, 0xFF	; 255
	if (Scan_Tick > 20) { // Scan delay
     776:	85 31       	cpi	r24, 0x15	; 21
     778:	18 f4       	brcc	.+6      	; 0x780 <__LOCK_REGION_LENGTH__+0x380>
		Chords[3] = Chords_Scan[3];
		Chords[4] = Chords_Scan[4];
		Chords[5] = Chords_Scan[5];
		Chords[6] = Chords_Scan[6];
	}
	Scan_Tick ++;
     77a:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <Scan_Tick>
     77e:	08 95       	ret
	if (Scan_Tick > 20) { // Scan delay
		Scan_Tick = 0;
     780:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <Scan_Tick>
     784:	08 95       	ret

00000786 <Settings_Read>:

uint8_t Meta = HID_KEYBOARD_MODIFIER_LEFTCTRL;

bool Settings = false;

void Settings_Read() {
     786:	cf 93       	push	r28
  Layout_Mode = eeprom_read_byte(&EE_Layout_Mode);
     788:	82 e0       	ldi	r24, 0x02	; 2
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	0e 94 03 12 	call	0x2406	; 0x2406 <eeprom_read_byte>
     790:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <Layout_Mode>
  OS_Mode = eeprom_read_byte(&EE_OS_Mode);
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	0e 94 03 12 	call	0x2406	; 0x2406 <eeprom_read_byte>
     79c:	c8 2f       	mov	r28, r24
     79e:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <OS_Mode>
  Level_Mode = eeprom_read_byte(&EE_Level_Mode);
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	0e 94 03 12 	call	0x2406	; 0x2406 <eeprom_read_byte>
     7aa:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <Level_Mode>
  Meta = (OS_Mode == OS_MAC) ? HID_KEYBOARD_MODIFIER_LEFTGUI
     7ae:	c2 30       	cpi	r28, 0x02	; 2
     7b0:	11 f0       	breq	.+4      	; 0x7b6 <Settings_Read+0x30>
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	01 c0       	rjmp	.+2      	; 0x7b8 <Settings_Read+0x32>
     7b6:	88 e0       	ldi	r24, 0x08	; 8
     7b8:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <Meta>
                             : HID_KEYBOARD_MODIFIER_LEFTCTRL;
}
     7bc:	cf 91       	pop	r28
     7be:	08 95       	ret

000007c0 <Settings_Write>:
void Settings_Write() {
  eeprom_write_byte(&EE_Layout_Mode, Layout_Mode);
     7c0:	60 91 27 01 	lds	r22, 0x0127	; 0x800127 <Layout_Mode>
     7c4:	82 e0       	ldi	r24, 0x02	; 2
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	0e 94 0b 12 	call	0x2416	; 0x2416 <eeprom_write_byte>
  eeprom_write_byte(&EE_OS_Mode, OS_Mode);
     7cc:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <OS_Mode>
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	0e 94 0b 12 	call	0x2416	; 0x2416 <eeprom_write_byte>
  eeprom_write_byte(&EE_Level_Mode, Level_Mode);
     7d8:	60 91 25 01 	lds	r22, 0x0125	; 0x800125 <Level_Mode>
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	0c 94 0b 12 	jmp	0x2416	; 0x2416 <eeprom_write_byte>

000007e4 <Layout_Switch>:
}

void Layout_Switch() {
  if (OS_Mode == OS_WINDOWS) { // Ctrl+Shift
     7e4:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <OS_Mode>
     7e8:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <Macros_Index>
     7ec:	81 30       	cpi	r24, 0x01	; 1
     7ee:	79 f4       	brne	.+30     	; 0x80e <Layout_Switch+0x2a>
    Macros_Buffer[Macros_Index++] = 0;
     7f0:	ae 2f       	mov	r26, r30
     7f2:	b0 e0       	ldi	r27, 0x00	; 0
     7f4:	a9 5b       	subi	r26, 0xB9	; 185
     7f6:	be 4f       	sbci	r27, 0xFE	; 254
     7f8:	1c 92       	st	X, r1
    Macros_Buffer[Macros_Index++] =
     7fa:	82 e0       	ldi	r24, 0x02	; 2
     7fc:	8e 0f       	add	r24, r30
     7fe:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <Macros_Index>
     802:	ef 5f       	subi	r30, 0xFF	; 255
     804:	f0 e0       	ldi	r31, 0x00	; 0
     806:	e9 5b       	subi	r30, 0xB9	; 185
     808:	fe 4f       	sbci	r31, 0xFE	; 254
     80a:	83 e0       	ldi	r24, 0x03	; 3
     80c:	1d c0       	rjmp	.+58     	; 0x848 <Layout_Switch+0x64>
        HID_KEYBOARD_MODIFIER_LEFTSHIFT | HID_KEYBOARD_MODIFIER_LEFTCTRL;
  } else if (OS_Mode == OS_MAC ||
     80e:	82 50       	subi	r24, 0x02	; 2
             OS_Mode == OS_ANDROID) { // Cmd+Space || Win+Space
    Macros_Buffer[Macros_Index++] = HID_KEYBOARD_SC_SPACE;
     810:	ae 2f       	mov	r26, r30
     812:	b0 e0       	ldi	r27, 0x00	; 0
     814:	a9 5b       	subi	r26, 0xB9	; 185
     816:	be 4f       	sbci	r27, 0xFE	; 254
void Layout_Switch() {
  if (OS_Mode == OS_WINDOWS) { // Ctrl+Shift
    Macros_Buffer[Macros_Index++] = 0;
    Macros_Buffer[Macros_Index++] =
        HID_KEYBOARD_MODIFIER_LEFTSHIFT | HID_KEYBOARD_MODIFIER_LEFTCTRL;
  } else if (OS_Mode == OS_MAC ||
     818:	82 30       	cpi	r24, 0x02	; 2
     81a:	60 f4       	brcc	.+24     	; 0x834 <Layout_Switch+0x50>
             OS_Mode == OS_ANDROID) { // Cmd+Space || Win+Space
    Macros_Buffer[Macros_Index++] = HID_KEYBOARD_SC_SPACE;
     81c:	8c e2       	ldi	r24, 0x2C	; 44
     81e:	8c 93       	st	X, r24
    Macros_Buffer[Macros_Index++] = HID_KEYBOARD_MODIFIER_LEFTGUI;
     820:	82 e0       	ldi	r24, 0x02	; 2
     822:	8e 0f       	add	r24, r30
     824:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <Macros_Index>
     828:	ef 5f       	subi	r30, 0xFF	; 255
     82a:	f0 e0       	ldi	r31, 0x00	; 0
     82c:	e9 5b       	subi	r30, 0xB9	; 185
     82e:	fe 4f       	sbci	r31, 0xFE	; 254
     830:	88 e0       	ldi	r24, 0x08	; 8
     832:	0a c0       	rjmp	.+20     	; 0x848 <Layout_Switch+0x64>
  } else { // Alt+Shift
    Macros_Buffer[Macros_Index++] = 0;
     834:	1c 92       	st	X, r1
    Macros_Buffer[Macros_Index++] =
     836:	82 e0       	ldi	r24, 0x02	; 2
     838:	8e 0f       	add	r24, r30
     83a:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <Macros_Index>
     83e:	ef 5f       	subi	r30, 0xFF	; 255
     840:	f0 e0       	ldi	r31, 0x00	; 0
     842:	e9 5b       	subi	r30, 0xB9	; 185
     844:	fe 4f       	sbci	r31, 0xFE	; 254
     846:	86 e0       	ldi	r24, 0x06	; 6
     848:	80 83       	st	Z, r24
     84a:	08 95       	ret

0000084c <Get_Mods>:
        HID_KEYBOARD_MODIFIER_LEFTSHIFT | HID_KEYBOARD_MODIFIER_LEFTALT;
  }
}

void Get_Mods(uint8_t chord) {
     84c:	8f 92       	push	r8
     84e:	9f 92       	push	r9
     850:	af 92       	push	r10
     852:	bf 92       	push	r11
     854:	cf 92       	push	r12
     856:	df 92       	push	r13
     858:	ef 92       	push	r14
     85a:	ff 92       	push	r15
     85c:	0f 93       	push	r16
     85e:	1f 93       	push	r17
     860:	cf 93       	push	r28
     862:	df 93       	push	r29
     864:	00 d0       	rcall	.+0      	; 0x866 <Get_Mods+0x1a>
     866:	00 d0       	rcall	.+0      	; 0x868 <Get_Mods+0x1c>
     868:	00 d0       	rcall	.+0      	; 0x86a <Get_Mods+0x1e>
     86a:	cd b7       	in	r28, 0x3d	; 61
     86c:	de b7       	in	r29, 0x3e	; 62
  Q_Mods = 0;
     86e:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <Q_Mods>
  bool mods_dbl[6] = {false, false, false, false, false, false};
     872:	fe 01       	movw	r30, r28
     874:	31 96       	adiw	r30, 0x01	; 1
     876:	96 e0       	ldi	r25, 0x06	; 6
     878:	df 01       	movw	r26, r30
     87a:	1d 92       	st	X+, r1
     87c:	9a 95       	dec	r25
     87e:	e9 f7       	brne	.-6      	; 0x87a <Get_Mods+0x2e>
     880:	de 01       	movw	r26, r28
     882:	15 97       	sbiw	r26, 0x05	; 5
     884:	2f ef       	ldi	r18, 0xFF	; 255
     886:	3f ef       	ldi	r19, 0xFF	; 255
     888:	81 2c       	mov	r8, r1
  uint8_t keyCode = 0;
  for (int8_t i = 0; i < 12; i++) {
     88a:	90 e0       	ldi	r25, 0x00	; 0
        mods_dbl[i] = true;
      }
      if ((i < 6) || ((i >= 6) && !mods_dbl[i - 6])) {
        if (keyCode >= HID_KEYBOARD_SC_LEFT_CONTROL &&
            keyCode <= HID_KEYBOARD_SC_RIGHT_GUI) {
          Q_Mods ^= 1 << (keyCode - HID_KEYBOARD_SC_LEFT_CONTROL);
     88c:	ee 24       	eor	r14, r14
     88e:	e3 94       	inc	r14
     890:	f1 2c       	mov	r15, r1
    if (keyCode) {
      if (i == 0) {
        mods_dbl[0] = true;
        mods_dbl[5] = true;
      } else if (i < 6) {
        mods_dbl[i - 1] = true;
     892:	99 24       	eor	r9, r9
     894:	93 94       	inc	r9
  for (int8_t i = 0; i < 12; i++) {
    keyCode = 0;
    if (((i > 0 && i < 6) &&
         ((chord & (0x3 << (i - 1))) == (0x3 << (i - 1)))) ||
        ((i == 0) && ((chord & 0x21) == 0x21)) ||
        ((i >= 6) && (chord & (0x1 << (i - 6))))) {
     896:	08 2f       	mov	r16, r24
     898:	10 e0       	ldi	r17, 0x00	; 0
  uint8_t keyCode = 0;
  for (int8_t i = 0; i < 12; i++) {
    keyCode = 0;
    if (((i > 0 && i < 6) &&
         ((chord & (0x3 << (i - 1))) == (0x3 << (i - 1)))) ||
        ((i == 0) && ((chord & 0x21) == 0x21)) ||
     89a:	81 72       	andi	r24, 0x21	; 33
  bool mods_dbl[6] = {false, false, false, false, false, false};
  uint8_t keyCode = 0;
  for (int8_t i = 0; i < 12; i++) {
    keyCode = 0;
    if (((i > 0 && i < 6) &&
         ((chord & (0x3 << (i - 1))) == (0x3 << (i - 1)))) ||
     89c:	53 e0       	ldi	r21, 0x03	; 3
     89e:	c5 2e       	mov	r12, r21
     8a0:	d1 2c       	mov	r13, r1
     8a2:	a9 01       	movw	r20, r18
     8a4:	4f 5f       	subi	r20, 0xFF	; 255
     8a6:	5f 4f       	sbci	r21, 0xFF	; 255
     8a8:	bd 01       	movw	r22, r26
     8aa:	6f 5f       	subi	r22, 0xFF	; 255
     8ac:	7f 4f       	sbci	r23, 0xFF	; 255
  Q_Mods = 0;
  bool mods_dbl[6] = {false, false, false, false, false, false};
  uint8_t keyCode = 0;
  for (int8_t i = 0; i < 12; i++) {
    keyCode = 0;
    if (((i > 0 && i < 6) &&
     8ae:	25 30       	cpi	r18, 0x05	; 5
     8b0:	70 f4       	brcc	.+28     	; 0x8ce <Get_Mods+0x82>
         ((chord & (0x3 << (i - 1))) == (0x3 << (i - 1)))) ||
     8b2:	f6 01       	movw	r30, r12
     8b4:	02 2e       	mov	r0, r18
     8b6:	02 c0       	rjmp	.+4      	; 0x8bc <Get_Mods+0x70>
     8b8:	ee 0f       	add	r30, r30
     8ba:	ff 1f       	adc	r31, r31
     8bc:	0a 94       	dec	r0
     8be:	e2 f7       	brpl	.-8      	; 0x8b8 <Get_Mods+0x6c>
  Q_Mods = 0;
  bool mods_dbl[6] = {false, false, false, false, false, false};
  uint8_t keyCode = 0;
  for (int8_t i = 0; i < 12; i++) {
    keyCode = 0;
    if (((i > 0 && i < 6) &&
     8c0:	58 01       	movw	r10, r16
     8c2:	ae 22       	and	r10, r30
     8c4:	bf 22       	and	r11, r31
     8c6:	ea 15       	cp	r30, r10
     8c8:	fb 05       	cpc	r31, r11
     8ca:	39 f4       	brne	.+14     	; 0x8da <Get_Mods+0x8e>
     8cc:	12 c0       	rjmp	.+36     	; 0x8f2 <Get_Mods+0xa6>
         ((chord & (0x3 << (i - 1))) == (0x3 << (i - 1)))) ||
     8ce:	91 11       	cpse	r25, r1
     8d0:	04 c0       	rjmp	.+8      	; 0x8da <Get_Mods+0x8e>
        ((i == 0) && ((chord & 0x21) == 0x21)) ||
     8d2:	81 32       	cpi	r24, 0x21	; 33
     8d4:	09 f0       	breq	.+2      	; 0x8d8 <Get_Mods+0x8c>
     8d6:	49 c0       	rjmp	.+146    	; 0x96a <Get_Mods+0x11e>
     8d8:	0c c0       	rjmp	.+24     	; 0x8f2 <Get_Mods+0xa6>
     8da:	96 30       	cpi	r25, 0x06	; 6
     8dc:	3c f1       	brlt	.+78     	; 0x92c <Get_Mods+0xe0>
        ((i >= 6) && (chord & (0x1 << (i - 6))))) {
     8de:	25 50       	subi	r18, 0x05	; 5
     8e0:	31 09       	sbc	r19, r1
     8e2:	f8 01       	movw	r30, r16
     8e4:	02 c0       	rjmp	.+4      	; 0x8ea <Get_Mods+0x9e>
     8e6:	f5 95       	asr	r31
     8e8:	e7 95       	ror	r30
     8ea:	2a 95       	dec	r18
     8ec:	e2 f7       	brpl	.-8      	; 0x8e6 <Get_Mods+0x9a>
     8ee:	e0 ff       	sbrs	r30, 0
     8f0:	1d c0       	rjmp	.+58     	; 0x92c <Get_Mods+0xe0>
      keyCode = pgm_read_byte(&Layer_Mods[i]);
     8f2:	fa 01       	movw	r30, r20
     8f4:	e8 56       	subi	r30, 0x68	; 104
     8f6:	fe 4f       	sbci	r31, 0xFE	; 254
     8f8:	e4 91       	lpm	r30, Z
    }
    if (keyCode) {
     8fa:	ee 23       	and	r30, r30
     8fc:	b9 f0       	breq	.+46     	; 0x92c <Get_Mods+0xe0>
      if (i == 0) {
     8fe:	91 11       	cpse	r25, r1
     900:	03 c0       	rjmp	.+6      	; 0x908 <Get_Mods+0xbc>
        mods_dbl[0] = true;
     902:	99 82       	std	Y+1, r9	; 0x01
        mods_dbl[5] = true;
     904:	9e 82       	std	Y+6, r9	; 0x06
     906:	07 c0       	rjmp	.+14     	; 0x916 <Get_Mods+0xca>
      } else if (i < 6) {
     908:	96 30       	cpi	r25, 0x06	; 6
     90a:	5c f5       	brge	.+86     	; 0x962 <Get_Mods+0x116>
        mods_dbl[i - 1] = true;
     90c:	15 96       	adiw	r26, 0x05	; 5
     90e:	9c 92       	st	X, r9
     910:	15 97       	sbiw	r26, 0x05	; 5
        mods_dbl[i] = true;
     912:	16 96       	adiw	r26, 0x06	; 6
     914:	9c 92       	st	X, r9
      }
      if ((i < 6) || ((i >= 6) && !mods_dbl[i - 6])) {
        if (keyCode >= HID_KEYBOARD_SC_LEFT_CONTROL &&
     916:	20 e2       	ldi	r18, 0x20	; 32
     918:	2e 0f       	add	r18, r30
     91a:	28 30       	cpi	r18, 0x08	; 8
     91c:	38 f4       	brcc	.+14     	; 0x92c <Get_Mods+0xe0>
            keyCode <= HID_KEYBOARD_SC_RIGHT_GUI) {
          Q_Mods ^= 1 << (keyCode - HID_KEYBOARD_SC_LEFT_CONTROL);
     91e:	e2 2f       	mov	r30, r18
     920:	97 01       	movw	r18, r14
     922:	01 c0       	rjmp	.+2      	; 0x926 <Get_Mods+0xda>
     924:	22 0f       	add	r18, r18
     926:	ea 95       	dec	r30
     928:	ea f7       	brpl	.-6      	; 0x924 <Get_Mods+0xd8>
     92a:	82 26       	eor	r8, r18
     92c:	9f 5f       	subi	r25, 0xFF	; 255
     92e:	db 01       	movw	r26, r22
     930:	9a 01       	movw	r18, r20

void Get_Mods(uint8_t chord) {
  Q_Mods = 0;
  bool mods_dbl[6] = {false, false, false, false, false, false};
  uint8_t keyCode = 0;
  for (int8_t i = 0; i < 12; i++) {
     932:	9c 30       	cpi	r25, 0x0C	; 12
     934:	09 f0       	breq	.+2      	; 0x938 <Get_Mods+0xec>
     936:	b5 cf       	rjmp	.-150    	; 0x8a2 <Get_Mods+0x56>
     938:	80 92 2a 01 	sts	0x012A, r8	; 0x80012a <Q_Mods>
          Q_Mods ^= 1 << (keyCode - HID_KEYBOARD_SC_LEFT_CONTROL);
        }
      }
    }
  }
}
     93c:	26 96       	adiw	r28, 0x06	; 6
     93e:	0f b6       	in	r0, 0x3f	; 63
     940:	f8 94       	cli
     942:	de bf       	out	0x3e, r29	; 62
     944:	0f be       	out	0x3f, r0	; 63
     946:	cd bf       	out	0x3d, r28	; 61
     948:	df 91       	pop	r29
     94a:	cf 91       	pop	r28
     94c:	1f 91       	pop	r17
     94e:	0f 91       	pop	r16
     950:	ff 90       	pop	r15
     952:	ef 90       	pop	r14
     954:	df 90       	pop	r13
     956:	cf 90       	pop	r12
     958:	bf 90       	pop	r11
     95a:	af 90       	pop	r10
     95c:	9f 90       	pop	r9
     95e:	8f 90       	pop	r8
     960:	08 95       	ret
        mods_dbl[5] = true;
      } else if (i < 6) {
        mods_dbl[i - 1] = true;
        mods_dbl[i] = true;
      }
      if ((i < 6) || ((i >= 6) && !mods_dbl[i - 6])) {
     962:	2c 91       	ld	r18, X
     964:	21 11       	cpse	r18, r1
     966:	e2 cf       	rjmp	.-60     	; 0x92c <Get_Mods+0xe0>
     968:	d6 cf       	rjmp	.-84     	; 0x916 <Get_Mods+0xca>
     96a:	db 01       	movw	r26, r22
     96c:	9a 01       	movw	r18, r20
  uint8_t keyCode = 0;
  for (int8_t i = 0; i < 12; i++) {
    keyCode = 0;
    if (((i > 0 && i < 6) &&
         ((chord & (0x3 << (i - 1))) == (0x3 << (i - 1)))) ||
        ((i == 0) && ((chord & 0x21) == 0x21)) ||
     96e:	91 e0       	ldi	r25, 0x01	; 1
     970:	98 cf       	rjmp	.-208    	; 0x8a2 <Get_Mods+0x56>

00000972 <IsVowels>:
      }
    }
  }
}

bool IsVowels(uint8_t keyCode) {
     972:	98 2f       	mov	r25, r24
  bool v = false;
  if (Layer_Current == LAYER2) {
     974:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <Layer_Current>
     978:	81 30       	cpi	r24, 0x01	; 1
     97a:	71 f4       	brne	.+28     	; 0x998 <IsVowels+0x26>
    if (keyCode == HID_KEYBOARD_SC_U || keyCode == HID_KEYBOARD_SC_E ||
     97c:	89 2f       	mov	r24, r25
     97e:	8f 7e       	andi	r24, 0xEF	; 239
     980:	88 30       	cpi	r24, 0x08	; 8
     982:	29 f1       	breq	.+74     	; 0x9ce <IsVowels+0x5c>
     984:	9c 31       	cpi	r25, 0x1C	; 28
     986:	19 f1       	breq	.+70     	; 0x9ce <IsVowels+0x5c>
        keyCode == HID_KEYBOARD_SC_Y || keyCode == HID_KEYBOARD_SC_A ||
     988:	89 2f       	mov	r24, r25
     98a:	87 7f       	andi	r24, 0xF7	; 247
     98c:	84 30       	cpi	r24, 0x04	; 4
     98e:	f9 f0       	breq	.+62     	; 0x9ce <IsVowels+0x5c>
        keyCode == HID_KEYBOARD_SC_I || keyCode == HID_KEYBOARD_SC_O)
     990:	81 e0       	ldi	r24, 0x01	; 1
     992:	92 31       	cpi	r25, 0x12	; 18
     994:	d1 f4       	brne	.+52     	; 0x9ca <IsVowels+0x58>
     996:	1d c0       	rjmp	.+58     	; 0x9d2 <IsVowels+0x60>
      v = true;
  } else if (Layer_Current == LAYER1) {
     998:	81 11       	cpse	r24, r1
     99a:	17 c0       	rjmp	.+46     	; 0x9ca <IsVowels+0x58>
    if (keyCode == HID_KEYBOARD_RU_A || keyCode == HID_KEYBOARD_RU_E ||
     99c:	89 2f       	mov	r24, r25
     99e:	87 7f       	andi	r24, 0xF7	; 247
     9a0:	85 30       	cpi	r24, 0x05	; 5
     9a2:	a9 f0       	breq	.+42     	; 0x9ce <IsVowels+0x5c>
        keyCode == HID_KEYBOARD_RU_I || keyCode == HID_KEYBOARD_RU_O ||
     9a4:	88 ef       	ldi	r24, 0xF8	; 248
     9a6:	89 0f       	add	r24, r25
     9a8:	82 30       	cpi	r24, 0x02	; 2
     9aa:	88 f0       	brcs	.+34     	; 0x9ce <IsVowels+0x5c>
        keyCode == HID_KEYBOARD_RU_U || keyCode == HID_KEYBOARD_RU_SOFTSIGN ||
     9ac:	90 31       	cpi	r25, 0x10	; 16
     9ae:	79 f0       	breq	.+30     	; 0x9ce <IsVowels+0x5c>
     9b0:	8a ee       	ldi	r24, 0xEA	; 234
     9b2:	89 0f       	add	r24, r25
     9b4:	82 30       	cpi	r24, 0x02	; 2
     9b6:	58 f0       	brcs	.+22     	; 0x9ce <IsVowels+0x5c>
        keyCode == HID_KEYBOARD_RU_YI || keyCode == HID_KEYBOARD_RU_YE ||
     9b8:	8c ec       	ldi	r24, 0xCC	; 204
     9ba:	89 0f       	add	r24, r25
     9bc:	82 30       	cpi	r24, 0x02	; 2
     9be:	38 f0       	brcs	.+14     	; 0x9ce <IsVowels+0x5c>
  bool v = false;
  if (Layer_Current == LAYER2) {
    if (keyCode == HID_KEYBOARD_SC_U || keyCode == HID_KEYBOARD_SC_E ||
        keyCode == HID_KEYBOARD_SC_Y || keyCode == HID_KEYBOARD_SC_A ||
        keyCode == HID_KEYBOARD_SC_I || keyCode == HID_KEYBOARD_SC_O)
      v = true;
     9c0:	81 e0       	ldi	r24, 0x01	; 1
  } else if (Layer_Current == LAYER1) {
    if (keyCode == HID_KEYBOARD_RU_A || keyCode == HID_KEYBOARD_RU_E ||
        keyCode == HID_KEYBOARD_RU_I || keyCode == HID_KEYBOARD_RU_O ||
        keyCode == HID_KEYBOARD_RU_U || keyCode == HID_KEYBOARD_RU_SOFTSIGN ||
        keyCode == HID_KEYBOARD_RU_YI || keyCode == HID_KEYBOARD_RU_YE ||
     9c2:	97 33       	cpi	r25, 0x37	; 55
     9c4:	31 f0       	breq	.+12     	; 0x9d2 <IsVowels+0x60>
        keyCode == HID_KEYBOARD_RU_YU || keyCode == HID_KEYBOARD_RU_YA ||
     9c6:	9d 31       	cpi	r25, 0x1D	; 29
     9c8:	21 f0       	breq	.+8      	; 0x9d2 <IsVowels+0x60>
    }
  }
}

bool IsVowels(uint8_t keyCode) {
  bool v = false;
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	08 95       	ret
  if (Layer_Current == LAYER2) {
    if (keyCode == HID_KEYBOARD_SC_U || keyCode == HID_KEYBOARD_SC_E ||
        keyCode == HID_KEYBOARD_SC_Y || keyCode == HID_KEYBOARD_SC_A ||
        keyCode == HID_KEYBOARD_SC_I || keyCode == HID_KEYBOARD_SC_O)
      v = true;
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	08 95       	ret
        keyCode == HID_KEYBOARD_RU_YU || keyCode == HID_KEYBOARD_RU_YA ||
        keyCode == HID_KEYBOARD_RU_YO)
      v = true;
  }
  return v;
}
     9d2:	08 95       	ret

000009d4 <Hardware_Setup>:
void Hardware_Setup() {
  // Set for 16 MHz clock
  // CLKPR = 0x80; CLKPR = 0;

  /* Disable watchdog if enabled by bootloader/fuses */
  MCUSR &= ~(1 << WDRF);
     9d4:	84 b7       	in	r24, 0x34	; 52
     9d6:	87 7f       	andi	r24, 0xF7	; 247
     9d8:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     9da:	0f b6       	in	r0, 0x3f	; 63
     9dc:	f8 94       	cli
     9de:	a8 95       	wdr
     9e0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     9e4:	88 61       	ori	r24, 0x18	; 24
     9e6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     9ea:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     9ee:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	80 e8       	ldi	r24, 0x80	; 128
     9f4:	0f b6       	in	r0, 0x3f	; 63
     9f6:	f8 94       	cli
     9f8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     9fc:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>

  /* Disable clock division */
  clock_prescale_set(clock_div_1);

  Ports_Init();
  LED_On();
     a00:	0f be       	out	0x3f, r0	; 63
  USB_Init();
     a02:	70 dc       	rcall	.-1824   	; 0x2e4 <Ports_Init>
  LED_Off();
     a04:	94 dc       	rcall	.-1752   	; 0x32e <LED_On>
     a06:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <USB_Init>
     a0a:	93 cc       	rjmp	.-1754   	; 0x332 <LED_Off>

00000a0c <EVENT_USB_Device_Connect>:
     a0c:	08 95       	ret

00000a0e <EVENT_USB_Device_Disconnect>:
void EVENT_USB_Device_Connect(void) {
  // LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void) {
     a0e:	08 95       	ret

00000a10 <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void) {
  bool ConfigSuccess = true;

  ConfigSuccess &= HID_Device_ConfigureEndpoints(&Keyboard_HID_Interface);
     a10:	80 e1       	ldi	r24, 0x10	; 16
     a12:	91 e0       	ldi	r25, 0x01	; 1
     a14:	0e 94 13 11 	call	0x2226	; 0x2226 <HID_Device_ConfigureEndpoints>
  ConfigSuccess &= HID_Device_ConfigureEndpoints(&Mouse_HID_Interface);
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	91 e0       	ldi	r25, 0x01	; 1
     a1c:	0e 94 13 11 	call	0x2226	; 0x2226 <HID_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     a20:	e2 ee       	ldi	r30, 0xE2	; 226
     a22:	f0 e0       	ldi	r31, 0x00	; 0
     a24:	80 81       	ld	r24, Z
     a26:	84 60       	ori	r24, 0x04	; 4
     a28:	80 83       	st	Z, r24
     a2a:	08 95       	ret

00000a2c <EVENT_USB_Device_ControlRequest>:
  // LED_Switch(! ConfigSuccess);
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void) {
  HID_Device_ProcessControlRequest(&Keyboard_HID_Interface);
     a2c:	80 e1       	ldi	r24, 0x10	; 16
     a2e:	91 e0       	ldi	r25, 0x01	; 1
     a30:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <HID_Device_ProcessControlRequest>
  HID_Device_ProcessControlRequest(&Mouse_HID_Interface);
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	91 e0       	ldi	r25, 0x01	; 1
     a38:	0c 94 e3 0f 	jmp	0x1fc6	; 0x1fc6 <HID_Device_ProcessControlRequest>

00000a3c <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     a3c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <Keyboard_HID_Interface+0xe>
     a40:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <Keyboard_HID_Interface+0xf>
     a44:	00 97       	sbiw	r24, 0x00	; 0
     a46:	29 f0       	breq	.+10     	; 0xa52 <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     a48:	01 97       	sbiw	r24, 0x01	; 1
     a4a:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <Keyboard_HID_Interface+0xf>
     a4e:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <Keyboard_HID_Interface+0xe>
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     a52:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <Mouse_HID_Interface+0xe>
     a56:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <Mouse_HID_Interface+0xf>
     a5a:	00 97       	sbiw	r24, 0x00	; 0
     a5c:	29 f0       	breq	.+10     	; 0xa68 <EVENT_USB_Device_StartOfFrame+0x2c>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     a5e:	01 97       	sbiw	r24, 0x01	; 1
     a60:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <Mouse_HID_Interface+0xf>
     a64:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <Mouse_HID_Interface+0xe>
     a68:	08 95       	ret

00000a6a <CALLBACK_HID_Device_CreateHIDReport>:
 *  \return Boolean true to force the sending of the report, false to let the
 * library determine if it needs to be sent
 */
bool CALLBACK_HID_Device_CreateHIDReport(
    USB_ClassInfo_HID_Device_t *const HIDInterfaceInfo, uint8_t *const ReportID,
    const uint8_t ReportType, void *ReportData, uint16_t *const ReportSize) {
     a6a:	2f 92       	push	r2
     a6c:	3f 92       	push	r3
     a6e:	4f 92       	push	r4
     a70:	5f 92       	push	r5
     a72:	6f 92       	push	r6
     a74:	7f 92       	push	r7
     a76:	8f 92       	push	r8
     a78:	9f 92       	push	r9
     a7a:	af 92       	push	r10
     a7c:	bf 92       	push	r11
     a7e:	cf 92       	push	r12
     a80:	df 92       	push	r13
     a82:	ef 92       	push	r14
     a84:	ff 92       	push	r15
     a86:	0f 93       	push	r16
     a88:	1f 93       	push	r17
     a8a:	cf 93       	push	r28
     a8c:	df 93       	push	r29
     a8e:	cd b7       	in	r28, 0x3d	; 61
     a90:	de b7       	in	r29, 0x3e	; 62
     a92:	c4 54       	subi	r28, 0x44	; 68
     a94:	d1 09       	sbc	r29, r1
     a96:	0f b6       	in	r0, 0x3f	; 63
     a98:	f8 94       	cli
     a9a:	de bf       	out	0x3e, r29	; 62
     a9c:	0f be       	out	0x3f, r0	; 63
     a9e:	cd bf       	out	0x3d, r28	; 61
     aa0:	23 96       	adiw	r28, 0x03	; 3
     aa2:	9f af       	std	Y+63, r25	; 0x3f
     aa4:	8e af       	std	Y+62, r24	; 0x3e
     aa6:	23 97       	sbiw	r28, 0x03	; 3
     aa8:	3f ab       	std	Y+55, r19	; 0x37
     aaa:	2e ab       	std	Y+54, r18	; 0x36
     aac:	1f af       	std	Y+63, r17	; 0x3f
     aae:	0e af       	std	Y+62, r16	; 0x3e
  if (Macros_Index < (MACROS_BUFFER_SIZE - MACROS_BUFFER_MAX)) {
     ab0:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <Macros_Index>
     ab4:	84 36       	cpi	r24, 0x64	; 100
     ab6:	08 f0       	brcs	.+2      	; 0xaba <CALLBACK_HID_Device_CreateHIDReport+0x50>
     ab8:	82 c4       	rjmp	.+2308   	; 0x13be <__stack+0x8bf>

    uint16_t chords[7] = {Chords[0], Chords[1], Chords[2], Chords[3],
     aba:	00 91 2d 01 	lds	r16, 0x012D	; 0x80012d <Chords>
     abe:	10 91 2e 01 	lds	r17, 0x012E	; 0x80012e <Chords+0x1>
     ac2:	18 a3       	std	Y+32, r17	; 0x20
     ac4:	0f 8f       	std	Y+31, r16	; 0x1f
     ac6:	80 90 2f 01 	lds	r8, 0x012F	; 0x80012f <Chords+0x2>
     aca:	90 90 30 01 	lds	r9, 0x0130	; 0x800130 <Chords+0x3>
     ace:	9a a2       	std	Y+34, r9	; 0x22
     ad0:	89 a2       	std	Y+33, r8	; 0x21
     ad2:	a0 90 31 01 	lds	r10, 0x0131	; 0x800131 <Chords+0x4>
     ad6:	b0 90 32 01 	lds	r11, 0x0132	; 0x800132 <Chords+0x5>
     ada:	bc a2       	std	Y+36, r11	; 0x24
     adc:	ab a2       	std	Y+35, r10	; 0x23
     ade:	e0 90 33 01 	lds	r14, 0x0133	; 0x800133 <Chords+0x6>
     ae2:	f0 90 34 01 	lds	r15, 0x0134	; 0x800134 <Chords+0x7>
     ae6:	fe a2       	std	Y+38, r15	; 0x26
     ae8:	ed a2       	std	Y+37, r14	; 0x25
                          Chords[4], Chords[5], Chords[6]};
     aea:	60 90 35 01 	lds	r6, 0x0135	; 0x800135 <Chords+0x8>
     aee:	70 90 36 01 	lds	r7, 0x0136	; 0x800136 <Chords+0x9>
bool CALLBACK_HID_Device_CreateHIDReport(
    USB_ClassInfo_HID_Device_t *const HIDInterfaceInfo, uint8_t *const ReportID,
    const uint8_t ReportType, void *ReportData, uint16_t *const ReportSize) {
  if (Macros_Index < (MACROS_BUFFER_SIZE - MACROS_BUFFER_MAX)) {

    uint16_t chords[7] = {Chords[0], Chords[1], Chords[2], Chords[3],
     af2:	78 a6       	std	Y+40, r7	; 0x28
     af4:	6f a2       	std	Y+39, r6	; 0x27
                          Chords[4], Chords[5], Chords[6]};
     af6:	20 90 37 01 	lds	r2, 0x0137	; 0x800137 <Chords+0xa>
     afa:	30 90 38 01 	lds	r3, 0x0138	; 0x800138 <Chords+0xb>
bool CALLBACK_HID_Device_CreateHIDReport(
    USB_ClassInfo_HID_Device_t *const HIDInterfaceInfo, uint8_t *const ReportID,
    const uint8_t ReportType, void *ReportData, uint16_t *const ReportSize) {
  if (Macros_Index < (MACROS_BUFFER_SIZE - MACROS_BUFFER_MAX)) {

    uint16_t chords[7] = {Chords[0], Chords[1], Chords[2], Chords[3],
     afe:	3a a6       	std	Y+42, r3	; 0x2a
     b00:	29 a6       	std	Y+41, r2	; 0x29
                          Chords[4], Chords[5], Chords[6]};
     b02:	c0 90 39 01 	lds	r12, 0x0139	; 0x800139 <Chords+0xc>
     b06:	d0 90 3a 01 	lds	r13, 0x013A	; 0x80013a <Chords+0xd>
bool CALLBACK_HID_Device_CreateHIDReport(
    USB_ClassInfo_HID_Device_t *const HIDInterfaceInfo, uint8_t *const ReportID,
    const uint8_t ReportType, void *ReportData, uint16_t *const ReportSize) {
  if (Macros_Index < (MACROS_BUFFER_SIZE - MACROS_BUFFER_MAX)) {

    uint16_t chords[7] = {Chords[0], Chords[1], Chords[2], Chords[3],
     b0a:	dc a6       	std	Y+44, r13	; 0x2c
                          Chords[4], Chords[5], Chords[6]};
    Keyboard_Scan();
     b0c:	cb a6       	std	Y+43, r12	; 0x2b

    bool isPress = Chords[0] > chords[0] || Chords[1] > chords[1] ||
     b0e:	1f dc       	rcall	.-1986   	; 0x34e <Keyboard_Scan>
     b10:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <Chords>
     b14:	30 91 2e 01 	lds	r19, 0x012E	; 0x80012e <Chords+0x1>
                   Chords[2] > chords[2] || Chords[3] > chords[3] ||
                   Chords[4] > chords[4] || Chords[5] > chords[5] ||
     b18:	02 17       	cp	r16, r18
     b1a:	13 07       	cpc	r17, r19

    uint16_t chords[7] = {Chords[0], Chords[1], Chords[2], Chords[3],
                          Chords[4], Chords[5], Chords[6]};
    Keyboard_Scan();

    bool isPress = Chords[0] > chords[0] || Chords[1] > chords[1] ||
     b1c:	68 f1       	brcs	.+90     	; 0xb78 <__stack+0x79>
     b1e:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <Chords+0x2>
     b22:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <Chords+0x3>
     b26:	88 16       	cp	r8, r24
     b28:	99 06       	cpc	r9, r25
     b2a:	30 f1       	brcs	.+76     	; 0xb78 <__stack+0x79>
     b2c:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <Chords+0x4>
     b30:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <Chords+0x5>
     b34:	a8 16       	cp	r10, r24
     b36:	b9 06       	cpc	r11, r25
                   Chords[2] > chords[2] || Chords[3] > chords[3] ||
     b38:	f8 f0       	brcs	.+62     	; 0xb78 <__stack+0x79>
     b3a:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <Chords+0x6>
     b3e:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <Chords+0x7>
     b42:	e8 16       	cp	r14, r24
     b44:	f9 06       	cpc	r15, r25
     b46:	c0 f0       	brcs	.+48     	; 0xb78 <__stack+0x79>
     b48:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Chords+0x8>
     b4c:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <Chords+0x9>
     b50:	68 16       	cp	r6, r24
     b52:	79 06       	cpc	r7, r25
                   Chords[4] > chords[4] || Chords[5] > chords[5] ||
     b54:	88 f0       	brcs	.+34     	; 0xb78 <__stack+0x79>
     b56:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <Chords+0xa>
     b5a:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <Chords+0xb>
     b5e:	28 16       	cp	r2, r24
     b60:	39 06       	cpc	r3, r25
     b62:	50 f0       	brcs	.+20     	; 0xb78 <__stack+0x79>
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	40 91 39 01 	lds	r20, 0x0139	; 0x800139 <Chords+0xc>
     b6a:	50 91 3a 01 	lds	r21, 0x013A	; 0x80013a <Chords+0xd>
     b6e:	c4 16       	cp	r12, r20
     b70:	d5 06       	cpc	r13, r21
     b72:	18 f0       	brcs	.+6      	; 0xb7a <__stack+0x7b>
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	01 c0       	rjmp	.+2      	; 0xb7a <__stack+0x7b>

    uint16_t chords[7] = {Chords[0], Chords[1], Chords[2], Chords[3],
                          Chords[4], Chords[5], Chords[6]};
    Keyboard_Scan();

    bool isPress = Chords[0] > chords[0] || Chords[1] > chords[1] ||
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	81 70       	andi	r24, 0x01	; 1
     b7c:	21 96       	adiw	r28, 0x01	; 1
     b7e:	8f af       	std	Y+63, r24	; 0x3f
                   Chords[2] > chords[2] || Chords[3] > chords[3] ||
                   Chords[4] > chords[4] || Chords[5] > chords[5] ||
                   Chords[6] > chords[6];
    bool isRelease = (Chords[0] < chords[0] || Chords[1] < chords[1] ||
                      Chords[2] < chords[2] || Chords[3] < chords[3] ||
                      Chords[4] < chords[4] || Chords[5] < chords[5] ||
     b80:	21 97       	sbiw	r28, 0x01	; 1
     b82:	20 17       	cp	r18, r16
     b84:	31 07       	cpc	r19, r17

    bool isPress = Chords[0] > chords[0] || Chords[1] > chords[1] ||
                   Chords[2] > chords[2] || Chords[3] > chords[3] ||
                   Chords[4] > chords[4] || Chords[5] > chords[5] ||
                   Chords[6] > chords[6];
    bool isRelease = (Chords[0] < chords[0] || Chords[1] < chords[1] ||
     b86:	68 f1       	brcs	.+90     	; 0xbe2 <__stack+0xe3>
     b88:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <Chords+0x2>
     b8c:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <Chords+0x3>
     b90:	88 15       	cp	r24, r8
     b92:	99 05       	cpc	r25, r9
     b94:	30 f1       	brcs	.+76     	; 0xbe2 <__stack+0xe3>
     b96:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <Chords+0x4>
     b9a:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <Chords+0x5>
     b9e:	8a 15       	cp	r24, r10
     ba0:	9b 05       	cpc	r25, r11
                      Chords[2] < chords[2] || Chords[3] < chords[3] ||
     ba2:	f8 f0       	brcs	.+62     	; 0xbe2 <__stack+0xe3>
     ba4:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <Chords+0x6>
     ba8:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <Chords+0x7>
     bac:	8e 15       	cp	r24, r14
     bae:	9f 05       	cpc	r25, r15
     bb0:	c0 f0       	brcs	.+48     	; 0xbe2 <__stack+0xe3>
     bb2:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Chords+0x8>
     bb6:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <Chords+0x9>
     bba:	86 15       	cp	r24, r6
     bbc:	97 05       	cpc	r25, r7
                      Chords[4] < chords[4] || Chords[5] < chords[5] ||
     bbe:	88 f0       	brcs	.+34     	; 0xbe2 <__stack+0xe3>
     bc0:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <Chords+0xa>
     bc4:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <Chords+0xb>
     bc8:	82 15       	cp	r24, r2
     bca:	93 05       	cpc	r25, r3
     bcc:	50 f0       	brcs	.+20     	; 0xbe2 <__stack+0xe3>
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	20 91 39 01 	lds	r18, 0x0139	; 0x800139 <Chords+0xc>
     bd4:	30 91 3a 01 	lds	r19, 0x013A	; 0x80013a <Chords+0xd>
     bd8:	2c 15       	cp	r18, r12
     bda:	3d 05       	cpc	r19, r13
     bdc:	18 f0       	brcs	.+6      	; 0xbe4 <__stack+0xe5>
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	01 c0       	rjmp	.+2      	; 0xbe4 <__stack+0xe5>
                      Chords[6] < chords[6]);

    if (isRelease) {
     be2:	81 e0       	ldi	r24, 0x01	; 1
      Get_Mods(chords[0]);
     be4:	80 ff       	sbrs	r24, 0
     be6:	6b c3       	rjmp	.+1750   	; 0x12be <__stack+0x7bf>
      if (Chord_Growing) {
     be8:	80 2f       	mov	r24, r16
     bea:	30 de       	rcall	.-928    	; 0x84c <Get_Mods>
     bec:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <Chord_Growing>
     bf0:	88 23       	and	r24, r24
        uint8_t multiplier = 0;

        uint8_t layer = (Q_Mods & ~(HID_KEYBOARD_MODIFIER_LEFTSHIFT |
     bf2:	09 f4       	brne	.+2      	; 0xbf6 <__stack+0xf7>
     bf4:	5e c3       	rjmp	.+1724   	; 0x12b2 <__stack+0x7b3>
     bf6:	80 90 2a 01 	lds	r8, 0x012A	; 0x80012a <Q_Mods>
     bfa:	88 2d       	mov	r24, r8
     bfc:	8d 7d       	andi	r24, 0xDD	; 221
     bfe:	21 f4       	brne	.+8      	; 0xc08 <__stack+0x109>
     c00:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <Layer_Current>
     c04:	2d ab       	std	Y+53, r18	; 0x35
                                    HID_KEYBOARD_MODIFIER_RIGHTSHIFT))
                            ? LAYER1
                            : Layer_Current;

        if (Settings) { // Settings
     c06:	01 c0       	rjmp	.+2      	; 0xc0a <__stack+0x10b>
     c08:	1d aa       	std	Y+53, r1	; 0x35
     c0a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
          Settings = false;
     c0e:	88 23       	and	r24, r24
     c10:	69 f1       	breq	.+90     	; 0xc6c <__stack+0x16d>
          if (chords[4] & 0x3) {
     c12:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__data_end>
     c16:	c3 01       	movw	r24, r6
     c18:	83 70       	andi	r24, 0x03	; 3
     c1a:	99 27       	eor	r25, r25
            Layout_Mode = (chords[4] & 0x3) - 1;
     c1c:	89 2b       	or	r24, r25
     c1e:	29 f0       	breq	.+10     	; 0xc2a <__stack+0x12b>
     c20:	86 2d       	mov	r24, r6
     c22:	83 70       	andi	r24, 0x03	; 3
     c24:	81 50       	subi	r24, 0x01	; 1
          }
          if (chords[5] & 0x3) {
     c26:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <Layout_Mode>
     c2a:	c1 01       	movw	r24, r2
     c2c:	83 70       	andi	r24, 0x03	; 3
     c2e:	99 27       	eor	r25, r25
            OS_Mode = (chords[5] & 0x3) - 1;
     c30:	89 2b       	or	r24, r25
     c32:	61 f0       	breq	.+24     	; 0xc4c <__stack+0x14d>
     c34:	82 2d       	mov	r24, r2
     c36:	83 70       	andi	r24, 0x03	; 3
     c38:	81 50       	subi	r24, 0x01	; 1
            Meta = (OS_Mode == OS_MAC) ? HID_KEYBOARD_MODIFIER_LEFTGUI
     c3a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <OS_Mode>
     c3e:	82 30       	cpi	r24, 0x02	; 2
     c40:	11 f4       	brne	.+4      	; 0xc46 <__stack+0x147>
     c42:	88 e0       	ldi	r24, 0x08	; 8
     c44:	01 c0       	rjmp	.+2      	; 0xc48 <__stack+0x149>
     c46:	81 e0       	ldi	r24, 0x01	; 1
                                       : HID_KEYBOARD_MODIFIER_LEFTCTRL;
          }
          if (chords[6] & 0x3) {
     c48:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <Meta>
     c4c:	c6 01       	movw	r24, r12
     c4e:	83 70       	andi	r24, 0x03	; 3
     c50:	99 27       	eor	r25, r25
            Level_Mode = (chords[6] & 0x3) - 1;
     c52:	89 2b       	or	r24, r25
     c54:	39 f0       	breq	.+14     	; 0xc64 <__stack+0x165>
     c56:	8c 2d       	mov	r24, r12
     c58:	83 70       	andi	r24, 0x03	; 3
     c5a:	cc 24       	eor	r12, r12
     c5c:	ca 94       	dec	r12
          }
          if (chords[0] & 0x20) {
     c5e:	c8 0e       	add	r12, r24
            Settings_Write();
     c60:	c0 92 25 01 	sts	0x0125, r12	; 0x800125 <Level_Mode>
     c64:	05 ff       	sbrs	r16, 5
          }
          LED_Toggle();
        } else if (chords[0] == 0x10 &&
     c66:	19 c0       	rjmp	.+50     	; 0xc9a <__stack+0x19b>
     c68:	ab dd       	rcall	.-1194   	; 0x7c0 <Settings_Write>
     c6a:	17 c0       	rjmp	.+46     	; 0xc9a <__stack+0x19b>
     c6c:	00 31       	cpi	r16, 0x10	; 16
     c6e:	11 05       	cpc	r17, r1
     c70:	b9 f4       	brne	.+46     	; 0xca0 <__stack+0x1a1>
     c72:	44 e1       	ldi	r20, 0x14	; 20
                   ((chords[4] == 0x14 && chords[5] == 0xA) ||
     c74:	64 16       	cp	r6, r20
     c76:	71 04       	cpc	r7, r1
     c78:	29 f4       	brne	.+10     	; 0xc84 <__stack+0x185>
     c7a:	5a e0       	ldi	r21, 0x0A	; 10
     c7c:	25 16       	cp	r2, r21
     c7e:	31 04       	cpc	r3, r1
     c80:	79 f4       	brne	.+30     	; 0xca0 <__stack+0x1a1>
     c82:	08 c0       	rjmp	.+16     	; 0xc94 <__stack+0x195>
     c84:	8a e0       	ldi	r24, 0x0A	; 10
                    (chords[4] == 0xA && chords[5] == 0x14))) { // Settings Mode
     c86:	68 16       	cp	r6, r24
     c88:	71 04       	cpc	r7, r1
     c8a:	51 f4       	brne	.+20     	; 0xca0 <__stack+0x1a1>
          Settings = true;
     c8c:	94 e1       	ldi	r25, 0x14	; 20
     c8e:	29 16       	cp	r2, r25
          LED_Toggle();
     c90:	31 04       	cpc	r3, r1
     c92:	31 f4       	brne	.+12     	; 0xca0 <__stack+0x1a1>
                      Chords[6] < chords[6]);

    if (isRelease) {
      Get_Mods(chords[0]);
      if (Chord_Growing) {
        uint8_t multiplier = 0;
     c94:	81 e0       	ldi	r24, 0x01	; 1
          LED_Toggle();
        } else if (chords[0] == 0x10 &&
                   ((chords[4] == 0x14 && chords[5] == 0xA) ||
                    (chords[4] == 0xA && chords[5] == 0x14))) { // Settings Mode
          Settings = true;
          LED_Toggle();
     c96:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end>
        } else {
          uint8_t keyCode = 0;
          bool isSpace = false;
          // Mods
          bool mods_dbl[6] = {false, false, false, false, false, false};
     c9a:	4d db       	rcall	.-2406   	; 0x336 <LED_Toggle>
     c9c:	10 e0       	ldi	r17, 0x00	; 0
     c9e:	dc c2       	rjmp	.+1464   	; 0x1258 <__stack+0x759>
     ca0:	fe 01       	movw	r30, r28
     ca2:	bd 96       	adiw	r30, 0x2d	; 45
     ca4:	86 e0       	ldi	r24, 0x06	; 6
     ca6:	df 01       	movw	r26, r30
     ca8:	1d 92       	st	X+, r1
     caa:	8a 95       	dec	r24
     cac:	e9 f7       	brne	.-6      	; 0xca8 <__stack+0x1a9>
     cae:	a0 90 2b 01 	lds	r10, 0x012B	; 0x80012b <Macros_Index>
          for (int8_t i = 0; i < 12; i++) {
     cb2:	de 01       	movw	r26, r28
                    (chords[4] == 0xA && chords[5] == 0x14))) { // Settings Mode
          Settings = true;
          LED_Toggle();
        } else {
          uint8_t keyCode = 0;
          bool isSpace = false;
     cb4:	97 96       	adiw	r26, 0x27	; 39
                } else if (keyCode == HID_KEYBOARD_LAYER_FN) {
                  layer = LAYER_FN;
                } else if (keyCode == HID_KEYBOARD_LAYER_FN2) {
                  layer = LAYER_FN2;
                } else if (keyCode == HID_KEYBOARD_SC_SPACE) {
                  isSpace = true;
     cb6:	8f ef       	ldi	r24, 0xFF	; 255
     cb8:	9f ef       	ldi	r25, 0xFF	; 255
          bool mods_dbl[6] = {false, false, false, false, false, false};
          for (int8_t i = 0; i < 12; i++) {
            keyCode = 0;
            if (((i > 0 && i < 6) &&
                 ((chords[0] & (0x3 << (i - 1))) == (0x3 << (i - 1)))) ||
                ((i == 0) && ((chords[0] & 0x21) == 0x21)) ||
     cba:	b1 2c       	mov	r11, r1
     cbc:	18 ae       	std	Y+56, r1	; 0x38
     cbe:	99 24       	eor	r9, r9
     cc0:	93 94       	inc	r9
          // Mods
          bool mods_dbl[6] = {false, false, false, false, false, false};
          for (int8_t i = 0; i < 12; i++) {
            keyCode = 0;
            if (((i > 0 && i < 6) &&
                 ((chords[0] & (0x3 << (i - 1))) == (0x3 << (i - 1)))) ||
     cc2:	28 01       	movw	r4, r16
     cc4:	e1 e2       	ldi	r30, 0x21	; 33
     cc6:	4e 22       	and	r4, r30
     cc8:	55 24       	eor	r5, r5
     cca:	e3 e0       	ldi	r30, 0x03	; 3
     ccc:	ee 2e       	mov	r14, r30
          bool isSpace = false;
          // Mods
          bool mods_dbl[6] = {false, false, false, false, false, false};
          for (int8_t i = 0; i < 12; i++) {
            keyCode = 0;
            if (((i > 0 && i < 6) &&
     cce:	f1 2c       	mov	r15, r1
     cd0:	9c 01       	movw	r18, r24
                 ((chords[0] & (0x3 << (i - 1))) == (0x3 << (i - 1)))) ||
     cd2:	2f 5f       	subi	r18, 0xFF	; 255
     cd4:	3f 4f       	sbci	r19, 0xFF	; 255
     cd6:	85 30       	cpi	r24, 0x05	; 5
     cd8:	70 f4       	brcc	.+28     	; 0xcf6 <__stack+0x1f7>
     cda:	a7 01       	movw	r20, r14
     cdc:	08 2e       	mov	r0, r24
     cde:	02 c0       	rjmp	.+4      	; 0xce4 <__stack+0x1e5>
          bool isSpace = false;
          // Mods
          bool mods_dbl[6] = {false, false, false, false, false, false};
          for (int8_t i = 0; i < 12; i++) {
            keyCode = 0;
            if (((i > 0 && i < 6) &&
     ce0:	44 0f       	add	r20, r20
     ce2:	55 1f       	adc	r21, r21
     ce4:	0a 94       	dec	r0
     ce6:	e2 f7       	brpl	.-8      	; 0xce0 <__stack+0x1e1>
     ce8:	b8 01       	movw	r22, r16
     cea:	64 23       	and	r22, r20
     cec:	75 23       	and	r23, r21
                 ((chords[0] & (0x3 << (i - 1))) == (0x3 << (i - 1)))) ||
     cee:	46 17       	cp	r20, r22
     cf0:	57 07       	cpc	r21, r23
                ((i == 0) && ((chords[0] & 0x21) == 0x21)) ||
     cf2:	49 f4       	brne	.+18     	; 0xd06 <__stack+0x207>
     cf4:	19 c0       	rjmp	.+50     	; 0xd28 <__stack+0x229>
     cf6:	b1 10       	cpse	r11, r1
     cf8:	06 c0       	rjmp	.+12     	; 0xd06 <__stack+0x207>
     cfa:	f1 e2       	ldi	r31, 0x21	; 33
     cfc:	4f 16       	cp	r4, r31
     cfe:	51 04       	cpc	r5, r1
     d00:	09 f0       	breq	.+2      	; 0xd04 <__stack+0x205>
     d02:	47 c0       	rjmp	.+142    	; 0xd92 <__stack+0x293>
     d04:	11 c0       	rjmp	.+34     	; 0xd28 <__stack+0x229>
                ((i >= 6) && ((chords[0] & (0x1 << (i - 6)))))) {
     d06:	45 e0       	ldi	r20, 0x05	; 5
     d08:	4b 15       	cp	r20, r11
     d0a:	0c f0       	brlt	.+2      	; 0xd0e <__stack+0x20f>
     d0c:	42 c0       	rjmp	.+132    	; 0xd92 <__stack+0x293>
     d0e:	05 97       	sbiw	r24, 0x05	; 5
     d10:	e1 e0       	ldi	r30, 0x01	; 1
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	02 c0       	rjmp	.+4      	; 0xd1a <__stack+0x21b>
     d16:	ee 0f       	add	r30, r30
     d18:	ff 1f       	adc	r31, r31
     d1a:	8a 95       	dec	r24
     d1c:	e2 f7       	brpl	.-8      	; 0xd16 <__stack+0x217>
     d1e:	cf 01       	movw	r24, r30
              keyCode = pgm_read_byte(&Layer_Mods[i]);
     d20:	80 23       	and	r24, r16
     d22:	91 23       	and	r25, r17
     d24:	89 2b       	or	r24, r25
     d26:	a9 f1       	breq	.+106    	; 0xd92 <__stack+0x293>
            }
            if (keyCode) {
     d28:	f9 01       	movw	r30, r18
     d2a:	e8 56       	subi	r30, 0x68	; 104
              if (i == 0) {
     d2c:	fe 4f       	sbci	r31, 0xFE	; 254
     d2e:	84 91       	lpm	r24, Z
                mods_dbl[0] = true;
     d30:	88 23       	and	r24, r24
                mods_dbl[5] = true;
     d32:	79 f1       	breq	.+94     	; 0xd92 <__stack+0x293>
     d34:	b1 10       	cpse	r11, r1
              } else if (i < 6) {
     d36:	03 c0       	rjmp	.+6      	; 0xd3e <__stack+0x23f>
     d38:	9d a6       	std	Y+45, r9	; 0x2d
     d3a:	9a aa       	std	Y+50, r9	; 0x32
     d3c:	0a c0       	rjmp	.+20     	; 0xd52 <__stack+0x253>
                mods_dbl[i - 1] = true;
     d3e:	f5 e0       	ldi	r31, 0x05	; 5
     d40:	fb 15       	cp	r31, r11
     d42:	0c f4       	brge	.+2      	; 0xd46 <__stack+0x247>
                mods_dbl[i] = true;
     d44:	4f c4       	rjmp	.+2206   	; 0x15e4 <__stack+0xae5>
     d46:	15 96       	adiw	r26, 0x05	; 5
     d48:	9c 92       	st	X, r9
              }
              if ((i < 6) || ((i >= 6) && !mods_dbl[i - 6])) {
                if (keyCode >= HID_KEYBOARD_SC_LEFT_CONTROL &&
     d4a:	15 97       	sbiw	r26, 0x05	; 5
     d4c:	16 96       	adiw	r26, 0x06	; 6
     d4e:	9c 92       	st	X, r9
     d50:	16 97       	sbiw	r26, 0x06	; 6
                    keyCode <= HID_KEYBOARD_SC_RIGHT_GUI) {
                  // nothing
                } else if (keyCode == HID_KEYBOARD_LAYER_FN) {
     d52:	90 e2       	ldi	r25, 0x20	; 32
     d54:	98 0f       	add	r25, r24
                  layer = LAYER_FN;
                } else if (keyCode == HID_KEYBOARD_LAYER_FN2) {
     d56:	98 30       	cpi	r25, 0x08	; 8
     d58:	e0 f0       	brcs	.+56     	; 0xd92 <__stack+0x293>
                  layer = LAYER_FN2;
                } else if (keyCode == HID_KEYBOARD_SC_SPACE) {
     d5a:	8f 3f       	cpi	r24, 0xFF	; 255
     d5c:	91 f0       	breq	.+36     	; 0xd82 <__stack+0x283>
                  isSpace = true;
                } else {
                  Macros_Buffer[Macros_Index++] = keyCode;
     d5e:	8e 3f       	cpi	r24, 0xFE	; 254
     d60:	99 f0       	breq	.+38     	; 0xd88 <__stack+0x289>
     d62:	8c 32       	cpi	r24, 0x2C	; 44
     d64:	a1 f0       	breq	.+40     	; 0xd8e <__stack+0x28f>
     d66:	ea 2d       	mov	r30, r10
                  Macros_Buffer[Macros_Index++] = Q_Mods;
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	e9 5b       	subi	r30, 0xB9	; 185
     d6c:	fe 4f       	sbci	r31, 0xFE	; 254
     d6e:	80 83       	st	Z, r24
     d70:	e1 e0       	ldi	r30, 0x01	; 1
     d72:	ea 0d       	add	r30, r10
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	a3 94       	inc	r10
     d78:	a3 94       	inc	r10
              if ((i < 6) || ((i >= 6) && !mods_dbl[i - 6])) {
                if (keyCode >= HID_KEYBOARD_SC_LEFT_CONTROL &&
                    keyCode <= HID_KEYBOARD_SC_RIGHT_GUI) {
                  // nothing
                } else if (keyCode == HID_KEYBOARD_LAYER_FN) {
                  layer = LAYER_FN;
     d7a:	e9 5b       	subi	r30, 0xB9	; 185
     d7c:	fe 4f       	sbci	r31, 0xFE	; 254
     d7e:	80 82       	st	Z, r8
                } else if (keyCode == HID_KEYBOARD_LAYER_FN2) {
                  layer = LAYER_FN2;
     d80:	08 c0       	rjmp	.+16     	; 0xd92 <__stack+0x293>
     d82:	42 e0       	ldi	r20, 0x02	; 2
     d84:	4d ab       	std	Y+53, r20	; 0x35
                } else if (keyCode == HID_KEYBOARD_SC_SPACE) {
                  isSpace = true;
     d86:	05 c0       	rjmp	.+10     	; 0xd92 <__stack+0x293>
     d88:	53 e0       	ldi	r21, 0x03	; 3
     d8a:	5d ab       	std	Y+53, r21	; 0x35
     d8c:	02 c0       	rjmp	.+4      	; 0xd92 <__stack+0x293>
     d8e:	81 e0       	ldi	r24, 0x01	; 1
        } else {
          uint8_t keyCode = 0;
          bool isSpace = false;
          // Mods
          bool mods_dbl[6] = {false, false, false, false, false, false};
          for (int8_t i = 0; i < 12; i++) {
     d90:	88 af       	std	Y+56, r24	; 0x38
     d92:	b3 94       	inc	r11
     d94:	11 96       	adiw	r26, 0x01	; 1
     d96:	c9 01       	movw	r24, r18
     d98:	ec e0       	ldi	r30, 0x0C	; 12
                }
              }
            }
          }
          // Symbols
          if (Level_Mode == LEVEL_1) {
     d9a:	be 12       	cpse	r11, r30
     d9c:	99 cf       	rjmp	.-206    	; 0xcd0 <__stack+0x1d1>
     d9e:	a0 92 2b 01 	sts	0x012B, r10	; 0x80012b <Macros_Index>
            bool chords_dbl[6][5] = {{false, false, false, false, false},
     da2:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <Level_Mode>
     da6:	81 11       	cpse	r24, r1
     da8:	48 c1       	rjmp	.+656    	; 0x103a <__stack+0x53b>
     daa:	fe 01       	movw	r30, r28
     dac:	31 96       	adiw	r30, 0x01	; 1
     dae:	8e e1       	ldi	r24, 0x1E	; 30
                                     {false, false, false, false, false},
                                     {false, false, false, false, false},
                                     {false, false, false, false, false},
                                     {false, false, false, false, false},
                                     {false, false, false, false, false}};
            for (int8_t k = 0; k < Press_Index; k += 2) {
     db0:	df 01       	movw	r26, r30
                      Chords[6] < chords[6]);

    if (isRelease) {
      Get_Mods(chords[0]);
      if (Chord_Growing) {
        uint8_t multiplier = 0;
     db2:	1d 92       	st	X+, r1
                } else if (keyCode == HID_KEYBOARD_LAYER_MOU) {
                  // TODO: mouse
                } else if (keyCode >= HID_KEYBOARD_SC_1_AND_EXCLAMATION &&
                           keyCode <=
                               HID_KEYBOARD_SC_0_AND_CLOSING_PARENTHESIS &&
                           (chords[4] || chords[5] ||
     db4:	8a 95       	dec	r24
     db6:	e9 f7       	brne	.-6      	; 0xdb2 <__stack+0x2b3>
     db8:	f1 2c       	mov	r15, r1
     dba:	10 e0       	ldi	r17, 0x00	; 0
                  if (keyCode) {
                    chords_dbl[j][i - 1] = true;
                    chords_dbl[j][i] = true;
                  }
                }
                if (!keyCode && !(chords_dbl[j][i] || chords_dbl[j][i + 1]) &&
     dbc:	a6 01       	movw	r20, r12
     dbe:	4e 7f       	andi	r20, 0xFE	; 254
     dc0:	5b af       	std	Y+59, r21	; 0x3b
                    chords_dbl[j][i] = true;
                    chords_dbl[j][i + 1] = true;
                  }
                }
                if (!keyCode && !chords_dbl[j][i]) {
                  keyCode = pgm_read_byte(&Layers[layer][j][i + 4]);
     dc2:	4a af       	std	Y+58, r20	; 0x3a
     dc4:	55 e0       	ldi	r21, 0x05	; 5
     dc6:	a5 2e       	mov	r10, r21
     dc8:	4f 01       	movw	r8, r30
     dca:	69 e0       	ldi	r22, 0x09	; 9
     dcc:	e6 2e       	mov	r14, r22
     dce:	8d a9       	ldd	r24, Y+53	; 0x35
                    chords_dbl[j][i - 1] = true;
                    chords_dbl[j][i] = true;
                  }
                }
                if (!keyCode && !(chords_dbl[j][i] || chords_dbl[j][i + 1]) &&
                    ((i < 4) && (chords[j + 1] & (1 << (i + 1))))) {
     dd0:	56 e3       	ldi	r21, 0x36	; 54
     dd2:	85 9f       	mul	r24, r21
     dd4:	20 01       	movw	r4, r0
                  keyCode = pgm_read_byte(&Layers[layer][j][i]);
                  if (keyCode) {
                    chords_dbl[j][i] = true;
     dd6:	11 24       	eor	r1, r1
            for (int8_t k = 0; k < Press_Index; k += 2) {
              int8_t j = Chords_Press[k];
              int8_t i = Chords_Press[k + 1];
              keyCode = 0;
              if (j > 5) {
                if (layer != LAYER_FN && layer != LAYER_FN2) {
     dd8:	cc 24       	eor	r12, r12
     dda:	c3 94       	inc	r12
                                     {false, false, false, false, false},
                                     {false, false, false, false, false},
                                     {false, false, false, false, false},
                                     {false, false, false, false, false},
                                     {false, false, false, false, false}};
            for (int8_t k = 0; k < Press_Index; k += 2) {
     ddc:	d1 2c       	mov	r13, r1
     dde:	01 e0       	ldi	r16, 0x01	; 1
     de0:	82 50       	subi	r24, 0x02	; 2
     de2:	8c af       	std	Y+60, r24	; 0x3c
     de4:	8f 2d       	mov	r24, r15
     de6:	0f 2c       	mov	r0, r15
     de8:	00 0c       	add	r0, r0
     dea:	99 0b       	sbc	r25, r25
     dec:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <Press_Index>
     df0:	30 e0       	ldi	r19, 0x00	; 0
              int8_t j = Chords_Press[k];
     df2:	82 17       	cp	r24, r18
     df4:	93 07       	cpc	r25, r19
     df6:	0c f0       	brlt	.+2      	; 0xdfa <__stack+0x2fb>
     df8:	2f c2       	rjmp	.+1118   	; 0x1258 <__stack+0x759>
     dfa:	fc 01       	movw	r30, r24
     dfc:	ee 0f       	add	r30, r30
              int8_t i = Chords_Press[k + 1];
              keyCode = 0;
              if (j > 5) {
     dfe:	ff 1f       	adc	r31, r31
     e00:	ec 5d       	subi	r30, 0xDC	; 220
                if (layer != LAYER_FN && layer != LAYER_FN2) {
     e02:	fd 4f       	sbci	r31, 0xFD	; 253
     e04:	20 81       	ld	r18, Z
     e06:	26 30       	cpi	r18, 0x06	; 6
     e08:	34 f0       	brlt	.+12     	; 0xe16 <__stack+0x317>
                  keyCode = HID_KEYBOARD_SC_SPACE;
     e0a:	9c ad       	ldd	r25, Y+60	; 0x3c
     e0c:	92 30       	cpi	r25, 0x02	; 2
                                     {false, false, false, false, false},
                                     {false, false, false, false, false},
                                     {false, false, false, false, false}};
            for (int8_t k = 0; k < Press_Index; k += 2) {
              int8_t j = Chords_Press[k];
              int8_t i = Chords_Press[k + 1];
     e0e:	08 f4       	brcc	.+2      	; 0xe12 <__stack+0x313>
     e10:	11 c1       	rjmp	.+546    	; 0x1034 <__stack+0x535>
     e12:	ec e2       	ldi	r30, 0x2C	; 44
     e14:	c2 c0       	rjmp	.+388    	; 0xf9a <__stack+0x49b>
     e16:	88 0f       	add	r24, r24
     e18:	99 1f       	adc	r25, r25
     e1a:	fc 01       	movw	r30, r24
     e1c:	ea 5d       	subi	r30, 0xDA	; 218
     e1e:	fd 4f       	sbci	r31, 0xFD	; 253
     e20:	b0 80       	ld	r11, Z
     e22:	02 2e       	mov	r0, r18
     e24:	00 0c       	add	r0, r0
     e26:	33 0b       	sbc	r19, r19
              if (j > 5) {
                if (layer != LAYER_FN && layer != LAYER_FN2) {
                  keyCode = HID_KEYBOARD_SC_SPACE;
                }
              } else {
                if (!keyCode && i > 0 && !(chords_dbl[j][i - 1] || chords_dbl[j][i]) &&
     e28:	4b 2d       	mov	r20, r11
     e2a:	0b 2c       	mov	r0, r11
     e2c:	00 0c       	add	r0, r0
     e2e:	55 0b       	sbc	r21, r21
     e30:	1b 14       	cp	r1, r11
     e32:	0c f0       	brlt	.+2      	; 0xe36 <__stack+0x337>
     e34:	3f c0       	rjmp	.+126    	; 0xeb4 <__stack+0x3b5>
     e36:	ca 01       	movw	r24, r20
     e38:	01 97       	sbiw	r24, 0x01	; 1
     e3a:	a2 9e       	mul	r10, r18
     e3c:	d0 01       	movw	r26, r0
     e3e:	a3 9e       	mul	r10, r19
     e40:	b0 0d       	add	r27, r0
     e42:	11 24       	eor	r1, r1
     e44:	a8 0d       	add	r26, r8
     e46:	b9 1d       	adc	r27, r9
     e48:	bd 01       	movw	r22, r26
     e4a:	68 0f       	add	r22, r24
     e4c:	79 1f       	adc	r23, r25
     e4e:	fb 01       	movw	r30, r22
     e50:	f0 81       	ld	r31, Z
     e52:	f1 11       	cpse	r31, r1
     e54:	2f c0       	rjmp	.+94     	; 0xeb4 <__stack+0x3b5>
     e56:	fd 01       	movw	r30, r26
     e58:	e4 0f       	add	r30, r20
     e5a:	f5 1f       	adc	r31, r21
     e5c:	25 96       	adiw	r28, 0x05	; 5
     e5e:	ff af       	std	Y+63, r31	; 0x3f
     e60:	ee af       	std	Y+62, r30	; 0x3e
                    (chords[j + 1] & (1 << (i - 1)))) {
     e62:	25 97       	sbiw	r28, 0x05	; 5
     e64:	e0 81       	ld	r30, Z
     e66:	e1 11       	cpse	r30, r1
     e68:	25 c0       	rjmp	.+74     	; 0xeb4 <__stack+0x3b5>
     e6a:	f9 01       	movw	r30, r18
     e6c:	31 96       	adiw	r30, 0x01	; 1
              if (j > 5) {
                if (layer != LAYER_FN && layer != LAYER_FN2) {
                  keyCode = HID_KEYBOARD_SC_SPACE;
                }
              } else {
                if (!keyCode && i > 0 && !(chords_dbl[j][i - 1] || chords_dbl[j][i]) &&
     e6e:	ee 0f       	add	r30, r30
     e70:	ff 1f       	adc	r31, r31
     e72:	e8 0d       	add	r30, r8
     e74:	f9 1d       	adc	r31, r9
     e76:	a6 8d       	ldd	r26, Z+30	; 0x1e
     e78:	b7 8d       	ldd	r27, Z+31	; 0x1f
     e7a:	bc ab       	std	Y+52, r27	; 0x34
     e7c:	ab ab       	std	Y+51, r26	; 0x33
     e7e:	d6 01       	movw	r26, r12
     e80:	08 2e       	mov	r0, r24
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <__stack+0x389>
     e84:	aa 0f       	add	r26, r26
     e86:	bb 1f       	adc	r27, r27
     e88:	0a 94       	dec	r0
     e8a:	e2 f7       	brpl	.-8      	; 0xe84 <__stack+0x385>
     e8c:	eb a9       	ldd	r30, Y+51	; 0x33
     e8e:	fc a9       	ldd	r31, Y+52	; 0x34
                    (chords[j + 1] & (1 << (i - 1)))) {
                  keyCode = pgm_read_byte(&Layers[layer][j][i - 1]);
     e90:	ae 23       	and	r26, r30
     e92:	bf 23       	and	r27, r31
     e94:	ab 2b       	or	r26, r27
     e96:	71 f0       	breq	.+28     	; 0xeb4 <__stack+0x3b5>
     e98:	e2 9e       	mul	r14, r18
     e9a:	f0 01       	movw	r30, r0
     e9c:	e3 9e       	mul	r14, r19
     e9e:	f0 0d       	add	r31, r0
     ea0:	11 24       	eor	r1, r1
     ea2:	e4 0d       	add	r30, r4
     ea4:	f5 1d       	adc	r31, r5
     ea6:	e8 0f       	add	r30, r24
                  if (keyCode) {
     ea8:	f9 1f       	adc	r31, r25
     eaa:	e0 54       	subi	r30, 0x40	; 64
                    chords_dbl[j][i - 1] = true;
                    chords_dbl[j][i] = true;
                  }
                }
                if (!keyCode && !(chords_dbl[j][i] || chords_dbl[j][i + 1]) &&
     eac:	ff 4f       	sbci	r31, 0xFF	; 255
     eae:	e4 91       	lpm	r30, Z
     eb0:	e1 11       	cpse	r30, r1
     eb2:	41 c0       	rjmp	.+130    	; 0xf36 <__stack+0x437>
     eb4:	a2 9e       	mul	r10, r18
     eb6:	d0 01       	movw	r26, r0
     eb8:	a3 9e       	mul	r10, r19
     eba:	b0 0d       	add	r27, r0
     ebc:	11 24       	eor	r1, r1
     ebe:	a8 0d       	add	r26, r8
     ec0:	b9 1d       	adc	r27, r9
     ec2:	bd 01       	movw	r22, r26
     ec4:	64 0f       	add	r22, r20
     ec6:	75 1f       	adc	r23, r21
     ec8:	fb 01       	movw	r30, r22
     eca:	80 81       	ld	r24, Z
     ecc:	81 11       	cpse	r24, r1
     ece:	b2 c0       	rjmp	.+356    	; 0x1034 <__stack+0x535>
     ed0:	fa 01       	movw	r30, r20
     ed2:	31 96       	adiw	r30, 0x01	; 1
     ed4:	f9 af       	std	Y+57, r31	; 0x39
     ed6:	e8 af       	std	Y+56, r30	; 0x38
     ed8:	ea 0f       	add	r30, r26
     eda:	fb 1f       	adc	r31, r27
     edc:	25 96       	adiw	r28, 0x05	; 5
     ede:	ff af       	std	Y+63, r31	; 0x3f
     ee0:	ee af       	std	Y+62, r30	; 0x3e
     ee2:	25 97       	sbiw	r28, 0x05	; 5
     ee4:	e0 81       	ld	r30, Z
     ee6:	e1 11       	cpse	r30, r1
                    ((i < 4) && (chords[j + 1] & (1 << (i + 1))))) {
     ee8:	2e c0       	rjmp	.+92     	; 0xf46 <__stack+0x447>
     eea:	f3 e0       	ldi	r31, 0x03	; 3
     eec:	fb 15       	cp	r31, r11
     eee:	5c f1       	brlt	.+86     	; 0xf46 <__stack+0x447>
     ef0:	f9 01       	movw	r30, r18
     ef2:	31 96       	adiw	r30, 0x01	; 1
     ef4:	ee 0f       	add	r30, r30
     ef6:	ff 1f       	adc	r31, r31
     ef8:	e8 0d       	add	r30, r8
     efa:	f9 1d       	adc	r31, r9
     efc:	d6 01       	movw	r26, r12
     efe:	08 ac       	ldd	r0, Y+56	; 0x38
     f00:	02 c0       	rjmp	.+4      	; 0xf06 <__stack+0x407>
     f02:	aa 0f       	add	r26, r26
     f04:	bb 1f       	adc	r27, r27
     f06:	0a 94       	dec	r0
     f08:	e2 f7       	brpl	.-8      	; 0xf02 <__stack+0x403>
     f0a:	06 8c       	ldd	r0, Z+30	; 0x1e
     f0c:	f7 8d       	ldd	r31, Z+31	; 0x1f
     f0e:	e0 2d       	mov	r30, r0
     f10:	cd 01       	movw	r24, r26
                  keyCode = pgm_read_byte(&Layers[layer][j][i]);
     f12:	8e 23       	and	r24, r30
     f14:	9f 23       	and	r25, r31
     f16:	89 2b       	or	r24, r25
     f18:	b1 f0       	breq	.+44     	; 0xf46 <__stack+0x447>
     f1a:	e2 9e       	mul	r14, r18
     f1c:	f0 01       	movw	r30, r0
     f1e:	e3 9e       	mul	r14, r19
     f20:	f0 0d       	add	r31, r0
     f22:	11 24       	eor	r1, r1
     f24:	e4 0d       	add	r30, r4
     f26:	f5 1d       	adc	r31, r5
     f28:	e4 0f       	add	r30, r20
                  if (keyCode) {
     f2a:	f5 1f       	adc	r31, r21
     f2c:	e0 54       	subi	r30, 0x40	; 64
                    chords_dbl[j][i] = true;
     f2e:	ff 4f       	sbci	r31, 0xFF	; 255
     f30:	e4 91       	lpm	r30, Z
                    chords_dbl[j][i + 1] = true;
     f32:	ee 23       	and	r30, r30
     f34:	41 f0       	breq	.+16     	; 0xf46 <__stack+0x447>
     f36:	db 01       	movw	r26, r22
     f38:	0c 93       	st	X, r16
     f3a:	25 96       	adiw	r28, 0x05	; 5
     f3c:	ae ad       	ldd	r26, Y+62	; 0x3e
                  }
                }
                if (!keyCode && !chords_dbl[j][i]) {
                  keyCode = pgm_read_byte(&Layers[layer][j][i + 4]);
     f3e:	bf ad       	ldd	r27, Y+63	; 0x3f
     f40:	25 97       	sbiw	r28, 0x05	; 5
     f42:	0c 93       	st	X, r16
     f44:	0f c0       	rjmp	.+30     	; 0xf64 <__stack+0x465>
     f46:	e2 9e       	mul	r14, r18
     f48:	f0 01       	movw	r30, r0
     f4a:	e3 9e       	mul	r14, r19
     f4c:	f0 0d       	add	r31, r0
     f4e:	11 24       	eor	r1, r1
     f50:	e4 0d       	add	r30, r4
     f52:	f5 1d       	adc	r31, r5
     f54:	e4 0f       	add	r30, r20
                }
              }
              if (keyCode) {
     f56:	f5 1f       	adc	r31, r21
     f58:	ec 53       	subi	r30, 0x3C	; 60
     f5a:	ff 4f       	sbci	r31, 0xFF	; 255
                if (keyCode == HID_KEYBOARD_LAYER_1) {
     f5c:	e4 91       	lpm	r30, Z
     f5e:	ee 23       	and	r30, r30
                  if (Layer_Current != LAYER1) {
     f60:	09 f4       	brne	.+2      	; 0xf64 <__stack+0x465>
     f62:	68 c0       	rjmp	.+208    	; 0x1034 <__stack+0x535>
     f64:	ed 3f       	cpi	r30, 0xFD	; 253
                    Layout_Switch();
     f66:	51 f4       	brne	.+20     	; 0xf7c <__stack+0x47d>
     f68:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <Layer_Current>
                    Layer_Current = LAYER1;
     f6c:	88 23       	and	r24, r24
                    LED_On();
     f6e:	09 f4       	brne	.+2      	; 0xf72 <__stack+0x473>
     f70:	61 c0       	rjmp	.+194    	; 0x1034 <__stack+0x535>
     f72:	38 dc       	rcall	.-1936   	; 0x7e4 <Layout_Switch>
                  }
                } else if (keyCode == HID_KEYBOARD_LAYER_2) {
     f74:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <Layer_Current>
                  if (Layer_Current != LAYER2) {
     f78:	da d9       	rcall	.-3148   	; 0x32e <LED_On>
     f7a:	5c c0       	rjmp	.+184    	; 0x1034 <__stack+0x535>
     f7c:	ec 3f       	cpi	r30, 0xFC	; 252
                    Layout_Switch();
     f7e:	51 f4       	brne	.+20     	; 0xf94 <__stack+0x495>
     f80:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <Layer_Current>
                    Layer_Current = LAYER2;
     f84:	81 30       	cpi	r24, 0x01	; 1
                    LED_Off();
     f86:	09 f4       	brne	.+2      	; 0xf8a <__stack+0x48b>
     f88:	55 c0       	rjmp	.+170    	; 0x1034 <__stack+0x535>
     f8a:	2c dc       	rcall	.-1960   	; 0x7e4 <Layout_Switch>
                  }
                } else if (keyCode == HID_KEYBOARD_LAYER_MOU) {
     f8c:	00 93 21 01 	sts	0x0121, r16	; 0x800121 <Layer_Current>
     f90:	d0 d9       	rcall	.-3168   	; 0x332 <LED_Off>
                  // TODO: mouse
                } else if (keyCode >= HID_KEYBOARD_SC_1_AND_EXCLAMATION &&
     f92:	50 c0       	rjmp	.+160    	; 0x1034 <__stack+0x535>
     f94:	eb 3f       	cpi	r30, 0xFB	; 251
     f96:	09 f4       	brne	.+2      	; 0xf9a <__stack+0x49b>
     f98:	4d c0       	rjmp	.+154    	; 0x1034 <__stack+0x535>
                           keyCode <=
                               HID_KEYBOARD_SC_0_AND_CLOSING_PARENTHESIS &&
     f9a:	82 ee       	ldi	r24, 0xE2	; 226
     f9c:	8e 0f       	add	r24, r30
     f9e:	8a 30       	cpi	r24, 0x0A	; 10
                           (chords[4] || chords[5] ||
     fa0:	80 f4       	brcc	.+32     	; 0xfc2 <__stack+0x4c3>
     fa2:	61 14       	cp	r6, r1
     fa4:	71 04       	cpc	r7, r1
     fa6:	39 f4       	brne	.+14     	; 0xfb6 <__stack+0x4b7>
     fa8:	21 14       	cp	r2, r1
     faa:	31 04       	cpc	r3, r1
     fac:	21 f4       	brne	.+8      	; 0xfb6 <__stack+0x4b7>
                            (chords[6] & ~0x1)) && layer == LAYER_FN) { // Multiplier
     fae:	4a ad       	ldd	r20, Y+58	; 0x3a
     fb0:	5b ad       	ldd	r21, Y+59	; 0x3b
     fb2:	45 2b       	or	r20, r21
     fb4:	41 f1       	breq	.+80     	; 0x1006 <__stack+0x507>
                  multiplier +=
     fb6:	5d a9       	ldd	r21, Y+53	; 0x35
     fb8:	52 30       	cpi	r21, 0x02	; 2
                      (keyCode - HID_KEYBOARD_SC_1_AND_EXCLAMATION) + 1;
                } else if ((keyCode == HID_KEYBOARD_SC_HOME ||
     fba:	29 f5       	brne	.+74     	; 0x1006 <__stack+0x507>
     fbc:	1d 51       	subi	r17, 0x1D	; 29
     fbe:	1e 0f       	add	r17, r30
     fc0:	39 c0       	rjmp	.+114    	; 0x1034 <__stack+0x535>
                            keyCode == HID_KEYBOARD_SC_END) &&
                           (Q_Mods & (HID_KEYBOARD_MODIFIER_LEFTCTRL |
     fc2:	ea 34       	cpi	r30, 0x4A	; 74
     fc4:	11 f0       	breq	.+4      	; 0xfca <__stack+0x4cb>
                           (chords[4] || chords[5] ||
                            (chords[6] & ~0x1)) && layer == LAYER_FN) { // Multiplier
                  multiplier +=
                      (keyCode - HID_KEYBOARD_SC_1_AND_EXCLAMATION) + 1;
                } else if ((keyCode == HID_KEYBOARD_SC_HOME ||
                            keyCode == HID_KEYBOARD_SC_END) &&
     fc6:	ed 34       	cpi	r30, 0x4D	; 77
     fc8:	f1 f4       	brne	.+60     	; 0x1006 <__stack+0x507>
     fca:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <Q_Mods>
     fce:	98 2f       	mov	r25, r24
                           (Q_Mods & (HID_KEYBOARD_MODIFIER_LEFTCTRL |
                                      HID_KEYBOARD_MODIFIER_RIGHTCTRL))) {
                  if (multiplier > 1) {
                    multiplier = 0;
                    Macros_Buffer[Macros_Index] = keyCode;
     fd0:	91 71       	andi	r25, 0x11	; 17
     fd2:	c9 f0       	breq	.+50     	; 0x1006 <__stack+0x507>
     fd4:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <Macros_Index>
     fd8:	a9 2f       	mov	r26, r25
                    Macros_Index++;
                    Macros_Buffer[Macros_Index] = Q_Mods;
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	a9 5b       	subi	r26, 0xB9	; 185
     fde:	be 4f       	sbci	r27, 0xFE	; 254
     fe0:	ec 93       	st	X, r30
     fe2:	e1 e0       	ldi	r30, 0x01	; 1
                      (keyCode - HID_KEYBOARD_SC_1_AND_EXCLAMATION) + 1;
                } else if ((keyCode == HID_KEYBOARD_SC_HOME ||
                            keyCode == HID_KEYBOARD_SC_END) &&
                           (Q_Mods & (HID_KEYBOARD_MODIFIER_LEFTCTRL |
                                      HID_KEYBOARD_MODIFIER_RIGHTCTRL))) {
                  if (multiplier > 1) {
     fe4:	e9 0f       	add	r30, r25
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
                    multiplier = 0;
                    Macros_Buffer[Macros_Index] = keyCode;
                    Macros_Index++;
                    Macros_Buffer[Macros_Index] = Q_Mods;
     fe8:	e9 5b       	subi	r30, 0xB9	; 185
                    Macros_Index++;
     fea:	fe 4f       	sbci	r31, 0xFE	; 254
     fec:	12 30       	cpi	r17, 0x02	; 2
     fee:	30 f0       	brcs	.+12     	; 0xffc <__stack+0x4fd>
                } else if ((keyCode == HID_KEYBOARD_SC_HOME ||
                            keyCode == HID_KEYBOARD_SC_END) &&
                           (Q_Mods & (HID_KEYBOARD_MODIFIER_LEFTCTRL |
                                      HID_KEYBOARD_MODIFIER_RIGHTCTRL))) {
                  if (multiplier > 1) {
                    multiplier = 0;
     ff0:	80 83       	st	Z, r24
     ff2:	9e 5f       	subi	r25, 0xFE	; 254
                    Macros_Buffer[Macros_Index] = Q_Mods;
                    Macros_Index++;
                  } else {
                    Macros_Buffer[Macros_Index] = keyCode;
                    Macros_Index++;
                    Macros_Buffer[Macros_Index] =
     ff4:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <Macros_Index>
                        Macros_Index == Q_Mods &
                        ~(HID_KEYBOARD_MODIFIER_LEFTCTRL |
                          HID_KEYBOARD_MODIFIER_RIGHTCTRL);
                    Macros_Index++;
     ff8:	10 e0       	ldi	r17, 0x00	; 0
     ffa:	1c c0       	rjmp	.+56     	; 0x1034 <__stack+0x535>
     ffc:	10 82       	st	Z, r1
                  }
                } else {
                  Macros_Buffer[Macros_Index] = keyCode;
     ffe:	9e 5f       	subi	r25, 0xFE	; 254
    1000:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <Macros_Index>
    1004:	17 c0       	rjmp	.+46     	; 0x1034 <__stack+0x535>
    1006:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <Macros_Index>
    100a:	a8 2f       	mov	r26, r24
                  Macros_Index++;
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	a9 5b       	subi	r26, 0xB9	; 185
                  Macros_Buffer[Macros_Index] = Macros_Index == 1 ? Q_Mods : 0;
    1010:	be 4f       	sbci	r27, 0xFE	; 254
    1012:	ec 93       	st	X, r30
    1014:	91 e0       	ldi	r25, 0x01	; 1
    1016:	98 0f       	add	r25, r24
    1018:	e9 2f       	mov	r30, r25
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	91 30       	cpi	r25, 0x01	; 1
    101e:	19 f4       	brne	.+6      	; 0x1026 <__stack+0x527>
    1020:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <Q_Mods>
    1024:	01 c0       	rjmp	.+2      	; 0x1028 <__stack+0x529>
                  Macros_Index++;
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	e9 5b       	subi	r30, 0xB9	; 185
    102a:	fe 4f       	sbci	r31, 0xFE	; 254
    102c:	90 83       	st	Z, r25
    102e:	8e 5f       	subi	r24, 0xFE	; 254
    1030:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <Macros_Index>
    1034:	f3 94       	inc	r15
    1036:	f3 94       	inc	r15
    1038:	d5 ce       	rjmp	.-598    	; 0xde4 <__stack+0x2e5>
    103a:	ed a9       	ldd	r30, Y+53	; 0x35
    103c:	26 e3       	ldi	r18, 0x36	; 54
    103e:	e2 9f       	mul	r30, r18
                }
              }
            }
          }
          // Symbols
          if (Level_Mode == LEVEL_1) {
    1040:	f0 01       	movw	r30, r0
    1042:	11 24       	eor	r1, r1
              }
            }
          } else {
            for (int8_t v = 0; v <= 1; v++) {
              for (int8_t j = 0; j < 6; j++) {
                bool chords_dbl[5] = {false, false, false, false, false};
    1044:	fd af       	std	Y+61, r31	; 0x3d
    1046:	ec af       	std	Y+60, r30	; 0x3c
    1048:	91 2c       	mov	r9, r1
    104a:	10 e0       	ldi	r17, 0x00	; 0
    104c:	ae 01       	movw	r20, r28
                        // TODO: mouse
                      } else if (
                          !v && keyCode >= HID_KEYBOARD_SC_1_AND_EXCLAMATION &&
                          keyCode <=
                              HID_KEYBOARD_SC_0_AND_CLOSING_PARENTHESIS &&
                          (chords[4] || chords[5] ||
    104e:	4f 5f       	subi	r20, 0xFF	; 255
    1050:	5f 4f       	sbci	r21, 0xFF	; 255
    1052:	5c ab       	std	Y+52, r21	; 0x34
    1054:	4b ab       	std	Y+51, r20	; 0x33
    1056:	c6 01       	movw	r24, r12
    1058:	8e 7f       	andi	r24, 0xFE	; 254
                          LED_On();
                        }
                      } else if (!v && keyCode == HID_KEYBOARD_LAYER_2) {
                        if (Layer_Current != LAYER2) {
                          Layout_Switch();
                          Layer_Current = LAYER2;
    105a:	25 96       	adiw	r28, 0x05	; 5
    105c:	9f af       	std	Y+63, r25	; 0x3f
    105e:	8e af       	std	Y+62, r24	; 0x3e
    1060:	25 97       	sbiw	r28, 0x05	; 5
    1062:	88 24       	eor	r8, r8
    1064:	83 94       	inc	r8
                      Chords[6] < chords[6]);

    if (isRelease) {
      Get_Mods(chords[0]);
      if (Chord_Growing) {
        uint8_t multiplier = 0;
    1066:	2e 01       	movw	r4, r28
    1068:	9f e1       	ldi	r25, 0x1F	; 31
              }
            }
          } else {
            for (int8_t v = 0; v <= 1; v++) {
              for (int8_t j = 0; j < 6; j++) {
                bool chords_dbl[5] = {false, false, false, false, false};
    106a:	49 0e       	add	r4, r25
    106c:	51 1c       	adc	r5, r1
    106e:	a1 2c       	mov	r10, r1
    1070:	b1 2c       	mov	r11, r1
    1072:	ab a9       	ldd	r26, Y+51	; 0x33
    1074:	bc a9       	ldd	r27, Y+52	; 0x34
    1076:	e5 e0       	ldi	r30, 0x05	; 5
    1078:	1d 92       	st	X+, r1
    107a:	ea 95       	dec	r30
    107c:	e9 f7       	brne	.-6      	; 0x1078 <__stack+0x579>
    107e:	ae 01       	movw	r20, r28
    1080:	4f 5f       	subi	r20, 0xFF	; 255
    1082:	5f 4f       	sbci	r21, 0xFF	; 255
    1084:	6a 01       	movw	r12, r20
    1086:	8c ad       	ldd	r24, Y+60	; 0x3c
    1088:	9d ad       	ldd	r25, Y+61	; 0x3d
    108a:	8a 0d       	add	r24, r10
    108c:	9b 1d       	adc	r25, r11
    108e:	9b af       	std	Y+59, r25	; 0x3b
                for (int8_t i = 0; i < 9; i++) {
                  keyCode = 0;
                  if (((i < 4) &&
    1090:	8a af       	std	Y+58, r24	; 0x3a
    1092:	e1 2c       	mov	r14, r1
    1094:	f1 2c       	mov	r15, r1
    1096:	2e 2d       	mov	r18, r14
    1098:	24 30       	cpi	r18, 0x04	; 4
    109a:	a4 f4       	brge	.+40     	; 0x10c4 <__stack+0x5c5>
    109c:	d2 01       	movw	r26, r4
    109e:	12 96       	adiw	r26, 0x02	; 2
    10a0:	4d 91       	ld	r20, X+
    10a2:	5c 91       	ld	r21, X
    10a4:	13 97       	sbiw	r26, 0x03	; 3
    10a6:	83 e0       	ldi	r24, 0x03	; 3
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	0e 2c       	mov	r0, r14
    10ac:	02 c0       	rjmp	.+4      	; 0x10b2 <__stack+0x5b3>
    10ae:	88 0f       	add	r24, r24
    10b0:	99 1f       	adc	r25, r25
    10b2:	0a 94       	dec	r0
    10b4:	e2 f7       	brpl	.-8      	; 0x10ae <__stack+0x5af>
    10b6:	48 23       	and	r20, r24
    10b8:	59 23       	and	r21, r25
    10ba:	84 17       	cp	r24, r20
                       ((chords[j + 1] & (0x3 << i)) == (0x3 << i))) ||
                      ((i >= 4) && (chords[j + 1] & (0x1 << (i - 4))))) {
    10bc:	95 07       	cpc	r25, r21
    10be:	09 f0       	breq	.+2      	; 0x10c2 <__stack+0x5c3>
    10c0:	96 c0       	rjmp	.+300    	; 0x11ee <__stack+0x6ef>
    10c2:	11 c0       	rjmp	.+34     	; 0x10e6 <__stack+0x5e7>
    10c4:	c7 01       	movw	r24, r14
    10c6:	04 97       	sbiw	r24, 0x04	; 4
    10c8:	41 e0       	ldi	r20, 0x01	; 1
    10ca:	50 e0       	ldi	r21, 0x00	; 0
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <__stack+0x5d3>
    10ce:	44 0f       	add	r20, r20
    10d0:	55 1f       	adc	r21, r21
    10d2:	8a 95       	dec	r24
    10d4:	e2 f7       	brpl	.-8      	; 0x10ce <__stack+0x5cf>
    10d6:	f2 01       	movw	r30, r4
    10d8:	82 81       	ldd	r24, Z+2	; 0x02
    10da:	93 81       	ldd	r25, Z+3	; 0x03
    10dc:	84 23       	and	r24, r20
                    keyCode = pgm_read_byte(&Layers[layer][j][i]);
    10de:	95 23       	and	r25, r21
    10e0:	89 2b       	or	r24, r25
    10e2:	09 f4       	brne	.+2      	; 0x10e6 <__stack+0x5e7>
    10e4:	84 c0       	rjmp	.+264    	; 0x11ee <__stack+0x6ef>
    10e6:	ea ad       	ldd	r30, Y+58	; 0x3a
    10e8:	fb ad       	ldd	r31, Y+59	; 0x3b
    10ea:	ee 0d       	add	r30, r14
                  }
                  if (keyCode) {
    10ec:	ff 1d       	adc	r31, r15
    10ee:	e0 54       	subi	r30, 0x40	; 64
    10f0:	ff 4f       	sbci	r31, 0xFF	; 255
                    if (i < 4) {
    10f2:	04 91       	lpm	r16, Z
    10f4:	00 23       	and	r16, r16
    10f6:	09 f4       	brne	.+2      	; 0x10fa <__stack+0x5fb>
                      chords_dbl[i] = true;
    10f8:	7a c0       	rjmp	.+244    	; 0x11ee <__stack+0x6ef>
    10fa:	24 30       	cpi	r18, 0x04	; 4
                      chords_dbl[i + 1] = true;
    10fc:	0c f0       	brlt	.+2      	; 0x1100 <__stack+0x601>
    10fe:	54 c2       	rjmp	.+1192   	; 0x15a8 <__stack+0xaa9>
                    }
                    if ((i < 4) || ((i >= 4) && !chords_dbl[i - 4])) {
                      if (!v && keyCode == HID_KEYBOARD_LAYER_1) {
    1100:	d6 01       	movw	r26, r12
    1102:	8c 92       	st	X, r8
                        if (Layer_Current != LAYER1) {
    1104:	11 96       	adiw	r26, 0x01	; 1
    1106:	8c 92       	st	X, r8
    1108:	91 10       	cpse	r9, r1
    110a:	56 c0       	rjmp	.+172    	; 0x11b8 <__stack+0x6b9>
                          Layout_Switch();
    110c:	0d 3f       	cpi	r16, 0xFD	; 253
    110e:	51 f4       	brne	.+20     	; 0x1124 <__stack+0x625>
                          Layer_Current = LAYER1;
    1110:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <Layer_Current>
                          LED_On();
    1114:	88 23       	and	r24, r24
                        }
                      } else if (!v && keyCode == HID_KEYBOARD_LAYER_2) {
    1116:	09 f4       	brne	.+2      	; 0x111a <__stack+0x61b>
                        if (Layer_Current != LAYER2) {
    1118:	6a c0       	rjmp	.+212    	; 0x11ee <__stack+0x6ef>
    111a:	64 db       	rcall	.-2360   	; 0x7e4 <Layout_Switch>
    111c:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <Layer_Current>
    1120:	06 d9       	rcall	.-3572   	; 0x32e <LED_On>
                          Layout_Switch();
    1122:	65 c0       	rjmp	.+202    	; 0x11ee <__stack+0x6ef>
    1124:	0c 3f       	cpi	r16, 0xFC	; 252
                          Layer_Current = LAYER2;
    1126:	59 f4       	brne	.+22     	; 0x113e <__stack+0x63f>
    1128:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <Layer_Current>
                          LED_Off();
    112c:	81 30       	cpi	r24, 0x01	; 1
    112e:	09 f4       	brne	.+2      	; 0x1132 <__stack+0x633>
    1130:	5e c0       	rjmp	.+188    	; 0x11ee <__stack+0x6ef>
                        }
                      } else if (!v && keyCode == HID_KEYBOARD_LAYER_MOU) {
    1132:	58 db       	rcall	.-2384   	; 0x7e4 <Layout_Switch>
    1134:	b1 e0       	ldi	r27, 0x01	; 1
    1136:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <Layer_Current>
                        // TODO: mouse
                      } else if (
                          !v && keyCode >= HID_KEYBOARD_SC_1_AND_EXCLAMATION &&
    113a:	fb d8       	rcall	.-3594   	; 0x332 <LED_Off>
    113c:	58 c0       	rjmp	.+176    	; 0x11ee <__stack+0x6ef>
    113e:	0b 3f       	cpi	r16, 0xFB	; 251
                          keyCode <=
                              HID_KEYBOARD_SC_0_AND_CLOSING_PARENTHESIS &&
    1140:	09 f4       	brne	.+2      	; 0x1144 <__stack+0x645>
    1142:	55 c0       	rjmp	.+170    	; 0x11ee <__stack+0x6ef>
    1144:	82 ee       	ldi	r24, 0xE2	; 226
                          (chords[4] || chords[5] ||
    1146:	80 0f       	add	r24, r16
    1148:	8a 30       	cpi	r24, 0x0A	; 10
    114a:	90 f4       	brcc	.+36     	; 0x1170 <__stack+0x671>
    114c:	61 14       	cp	r6, r1
    114e:	71 04       	cpc	r7, r1
    1150:	49 f4       	brne	.+18     	; 0x1164 <__stack+0x665>
    1152:	21 14       	cp	r2, r1
    1154:	31 04       	cpc	r3, r1
    1156:	31 f4       	brne	.+12     	; 0x1164 <__stack+0x665>
                           (chords[6] & ~0x1)) && layer == LAYER_FN) { // Multiplier
    1158:	25 96       	adiw	r28, 0x05	; 5
    115a:	ee ad       	ldd	r30, Y+62	; 0x3e
    115c:	ff ad       	ldd	r31, Y+63	; 0x3f
    115e:	25 97       	sbiw	r28, 0x05	; 5
                        multiplier +=
    1160:	ef 2b       	or	r30, r31
    1162:	41 f0       	breq	.+16     	; 0x1174 <__stack+0x675>
                            (keyCode - HID_KEYBOARD_SC_1_AND_EXCLAMATION) + 1;
                      } else if (!v &&
    1164:	fd a9       	ldd	r31, Y+53	; 0x35
    1166:	f2 30       	cpi	r31, 0x02	; 2
                                 (keyCode == HID_KEYBOARD_SC_HOME ||
    1168:	29 f4       	brne	.+10     	; 0x1174 <__stack+0x675>
    116a:	1d 51       	subi	r17, 0x1D	; 29
                                  keyCode == HID_KEYBOARD_SC_END) &&
                                 (Q_Mods & (HID_KEYBOARD_MODIFIER_LEFTCTRL |
    116c:	10 0f       	add	r17, r16
    116e:	3f c0       	rjmp	.+126    	; 0x11ee <__stack+0x6ef>
                           (chords[6] & ~0x1)) && layer == LAYER_FN) { // Multiplier
                        multiplier +=
                            (keyCode - HID_KEYBOARD_SC_1_AND_EXCLAMATION) + 1;
                      } else if (!v &&
                                 (keyCode == HID_KEYBOARD_SC_HOME ||
                                  keyCode == HID_KEYBOARD_SC_END) &&
    1170:	0a 34       	cpi	r16, 0x4A	; 74
    1172:	11 f0       	breq	.+4      	; 0x1178 <__stack+0x679>
    1174:	0d 34       	cpi	r16, 0x4D	; 77
    1176:	d9 f4       	brne	.+54     	; 0x11ae <__stack+0x6af>
    1178:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <Q_Mods>
                                 (Q_Mods & (HID_KEYBOARD_MODIFIER_LEFTCTRL |
                                            HID_KEYBOARD_MODIFIER_RIGHTCTRL))) {
                        if (multiplier > 1) {
                          multiplier = 0;
                          Macros_Buffer[Macros_Index] = keyCode;
    117c:	89 2f       	mov	r24, r25
    117e:	81 71       	andi	r24, 0x11	; 17
    1180:	b1 f0       	breq	.+44     	; 0x11ae <__stack+0x6af>
    1182:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <Macros_Index>
                          Macros_Index++;
                          Macros_Buffer[Macros_Index] = Q_Mods;
    1186:	e8 2f       	mov	r30, r24
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	e9 5b       	subi	r30, 0xB9	; 185
                      } else if (!v &&
                                 (keyCode == HID_KEYBOARD_SC_HOME ||
                                  keyCode == HID_KEYBOARD_SC_END) &&
                                 (Q_Mods & (HID_KEYBOARD_MODIFIER_LEFTCTRL |
                                            HID_KEYBOARD_MODIFIER_RIGHTCTRL))) {
                        if (multiplier > 1) {
    118c:	fe 4f       	sbci	r31, 0xFE	; 254
    118e:	00 83       	st	Z, r16
                          multiplier = 0;
                          Macros_Buffer[Macros_Index] = keyCode;
                          Macros_Index++;
                          Macros_Buffer[Macros_Index] = Q_Mods;
    1190:	e1 e0       	ldi	r30, 0x01	; 1
                          Macros_Index++;
    1192:	e8 0f       	add	r30, r24
    1194:	f0 e0       	ldi	r31, 0x00	; 0
                                 (keyCode == HID_KEYBOARD_SC_HOME ||
                                  keyCode == HID_KEYBOARD_SC_END) &&
                                 (Q_Mods & (HID_KEYBOARD_MODIFIER_LEFTCTRL |
                                            HID_KEYBOARD_MODIFIER_RIGHTCTRL))) {
                        if (multiplier > 1) {
                          multiplier = 0;
    1196:	e9 5b       	subi	r30, 0xB9	; 185
    1198:	fe 4f       	sbci	r31, 0xFE	; 254
                          Macros_Buffer[Macros_Index] = Q_Mods;
                          Macros_Index++;
                        } else {
                          Macros_Buffer[Macros_Index] = keyCode;
                          Macros_Index++;
                          Macros_Buffer[Macros_Index] =
    119a:	12 30       	cpi	r17, 0x02	; 2
    119c:	30 f0       	brcs	.+12     	; 0x11aa <__stack+0x6ab>
                              Macros_Index == Q_Mods &
                              ~(HID_KEYBOARD_MODIFIER_LEFTCTRL |
                                HID_KEYBOARD_MODIFIER_RIGHTCTRL);
                          Macros_Index++;
                        }
                      } else if ((!v && !IsVowels(keyCode)) ||
    119e:	90 83       	st	Z, r25
    11a0:	8e 5f       	subi	r24, 0xFE	; 254
    11a2:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <Macros_Index>
    11a6:	10 e0       	ldi	r17, 0x00	; 0
    11a8:	22 c0       	rjmp	.+68     	; 0x11ee <__stack+0x6ef>
                                 (v && IsVowels(keyCode))) {
    11aa:	10 82       	st	Z, r1
    11ac:	1d c0       	rjmp	.+58     	; 0x11e8 <__stack+0x6e9>
    11ae:	80 2f       	mov	r24, r16
    11b0:	e0 db       	rcall	.-2112   	; 0x972 <IsVowels>
    11b2:	81 11       	cpse	r24, r1
                        Macros_Buffer[Macros_Index] = keyCode;
    11b4:	1c c0       	rjmp	.+56     	; 0x11ee <__stack+0x6ef>
    11b6:	04 c0       	rjmp	.+8      	; 0x11c0 <__stack+0x6c1>
    11b8:	80 2f       	mov	r24, r16
    11ba:	db db       	rcall	.-2122   	; 0x972 <IsVowels>
    11bc:	88 23       	and	r24, r24
    11be:	b9 f0       	breq	.+46     	; 0x11ee <__stack+0x6ef>
    11c0:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <Macros_Index>
                        Macros_Index++;
    11c4:	e8 2f       	mov	r30, r24
                        Macros_Buffer[Macros_Index] =
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	e9 5b       	subi	r30, 0xB9	; 185
    11ca:	fe 4f       	sbci	r31, 0xFE	; 254
    11cc:	00 83       	st	Z, r16
    11ce:	91 e0       	ldi	r25, 0x01	; 1
    11d0:	98 0f       	add	r25, r24
    11d2:	e9 2f       	mov	r30, r25
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	91 30       	cpi	r25, 0x01	; 1
    11d8:	19 f4       	brne	.+6      	; 0x11e0 <__stack+0x6e1>
    11da:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <Q_Mods>
                            Macros_Index == 1 ? Q_Mods : 0;
                        Macros_Index++;
    11de:	01 c0       	rjmp	.+2      	; 0x11e2 <__stack+0x6e3>
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	e9 5b       	subi	r30, 0xB9	; 185
    11e4:	fe 4f       	sbci	r31, 0xFE	; 254
    11e6:	90 83       	st	Z, r25
    11e8:	8e 5f       	subi	r24, 0xFE	; 254
    11ea:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <Macros_Index>
            }
          } else {
            for (int8_t v = 0; v <= 1; v++) {
              for (int8_t j = 0; j < 6; j++) {
                bool chords_dbl[5] = {false, false, false, false, false};
                for (int8_t i = 0; i < 9; i++) {
    11ee:	2f ef       	ldi	r18, 0xFF	; 255
    11f0:	e2 1a       	sub	r14, r18
    11f2:	f2 0a       	sbc	r15, r18
    11f4:	4f ef       	ldi	r20, 0xFF	; 255
    11f6:	c4 1a       	sub	r12, r20
    11f8:	d4 0a       	sbc	r13, r20
    11fa:	59 e0       	ldi	r21, 0x09	; 9
    11fc:	e5 16       	cp	r14, r21
    11fe:	f1 04       	cpc	r15, r1
    1200:	09 f0       	breq	.+2      	; 0x1204 <__stack+0x705>
    1202:	49 cf       	rjmp	.-366    	; 0x1096 <__stack+0x597>
                }
              }
            }
          } else {
            for (int8_t v = 0; v <= 1; v++) {
              for (int8_t j = 0; j < 6; j++) {
    1204:	89 e0       	ldi	r24, 0x09	; 9
    1206:	a8 0e       	add	r10, r24
    1208:	b1 1c       	adc	r11, r1
    120a:	92 e0       	ldi	r25, 0x02	; 2
    120c:	49 0e       	add	r4, r25
    120e:	51 1c       	adc	r5, r1
                  Macros_Index++;
                }
              }
            }
          } else {
            for (int8_t v = 0; v <= 1; v++) {
    1210:	a6 e3       	ldi	r26, 0x36	; 54
    1212:	aa 16       	cp	r10, r26
    1214:	b1 04       	cpc	r11, r1
                    }
                  }
                }
              }
            }
            if (isSpace) {
    1216:	09 f0       	breq	.+2      	; 0x121a <__stack+0x71b>
    1218:	2c cf       	rjmp	.-424    	; 0x1072 <__stack+0x573>
    121a:	93 94       	inc	r9
              Macros_Buffer[Macros_Index] = HID_KEYBOARD_SC_SPACE;
    121c:	b2 e0       	ldi	r27, 0x02	; 2
    121e:	9b 12       	cpse	r9, r27
    1220:	22 cf       	rjmp	.-444    	; 0x1066 <__stack+0x567>
    1222:	a8 ad       	ldd	r26, Y+56	; 0x38
    1224:	aa 23       	and	r26, r26
    1226:	c1 f0       	breq	.+48     	; 0x1258 <__stack+0x759>
    1228:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <Macros_Index>
              Macros_Index++;
    122c:	e8 2f       	mov	r30, r24
    122e:	f0 e0       	ldi	r31, 0x00	; 0
              Macros_Buffer[Macros_Index] = Macros_Index == 1 ? Q_Mods : 0;
    1230:	e9 5b       	subi	r30, 0xB9	; 185
    1232:	fe 4f       	sbci	r31, 0xFE	; 254
    1234:	9c e2       	ldi	r25, 0x2C	; 44
    1236:	90 83       	st	Z, r25
    1238:	91 e0       	ldi	r25, 0x01	; 1
    123a:	98 0f       	add	r25, r24
    123c:	e9 2f       	mov	r30, r25
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	91 30       	cpi	r25, 0x01	; 1
    1242:	19 f4       	brne	.+6      	; 0x124a <__stack+0x74b>
    1244:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <Q_Mods>
              Macros_Index++;
    1248:	01 c0       	rjmp	.+2      	; 0x124c <__stack+0x74d>
    124a:	90 e0       	ldi	r25, 0x00	; 0
            }
          }
        }

        if (Macros_Index == 2 && multiplier && Macros_Buffer[0]) {
    124c:	e9 5b       	subi	r30, 0xB9	; 185
    124e:	fe 4f       	sbci	r31, 0xFE	; 254
    1250:	90 83       	st	Z, r25
    1252:	8e 5f       	subi	r24, 0xFE	; 254
    1254:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <Macros_Index>
    1258:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <Macros_Index>
    125c:	82 30       	cpi	r24, 0x02	; 2
    125e:	39 f5       	brne	.+78     	; 0x12ae <__stack+0x7af>
          if (multiplier == 1) {
    1260:	11 23       	and	r17, r17
    1262:	29 f1       	breq	.+74     	; 0x12ae <__stack+0x7af>
            Macros_Buffer[1] |= HID_KEYBOARD_MODIFIER_LEFTGUI;
    1264:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <Macros_Buffer>
    1268:	99 23       	and	r25, r25
    126a:	09 f1       	breq	.+66     	; 0x12ae <__stack+0x7af>
    126c:	11 30       	cpi	r17, 0x01	; 1
    126e:	31 f4       	brne	.+12     	; 0x127c <__stack+0x77d>
    1270:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <Macros_Buffer+0x1>
            }
          }
        }

        if (Macros_Index == 2 && multiplier && Macros_Buffer[0]) {
          if (multiplier == 1) {
    1274:	88 60       	ori	r24, 0x08	; 8
            Macros_Buffer[1] |= HID_KEYBOARD_MODIFIER_LEFTGUI;
          } else {
            for (uint8_t i = 1; i < multiplier; i++) {
              Macros_Buffer[Macros_Index++] = Macros_Buffer[i * 2 - 2];
    1276:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <Macros_Buffer+0x1>
    127a:	19 c0       	rjmp	.+50     	; 0x12ae <__stack+0x7af>
    127c:	a7 e4       	ldi	r26, 0x47	; 71
    127e:	b1 e0       	ldi	r27, 0x01	; 1
    1280:	91 e0       	ldi	r25, 0x01	; 1
              Macros_Buffer[Macros_Index++] = Macros_Buffer[i * 2 - 1];
    1282:	2c 91       	ld	r18, X
    1284:	e8 2f       	mov	r30, r24
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	e9 5b       	subi	r30, 0xB9	; 185
    128a:	fe 4f       	sbci	r31, 0xFE	; 254
    128c:	20 83       	st	Z, r18
    128e:	11 96       	adiw	r26, 0x01	; 1
    1290:	2c 91       	ld	r18, X
    1292:	11 97       	sbiw	r26, 0x01	; 1
    1294:	e1 e0       	ldi	r30, 0x01	; 1

        if (Macros_Index == 2 && multiplier && Macros_Buffer[0]) {
          if (multiplier == 1) {
            Macros_Buffer[1] |= HID_KEYBOARD_MODIFIER_LEFTGUI;
          } else {
            for (uint8_t i = 1; i < multiplier; i++) {
    1296:	e8 0f       	add	r30, r24
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	8e 5f       	subi	r24, 0xFE	; 254
    129c:	e9 5b       	subi	r30, 0xB9	; 185
    129e:	fe 4f       	sbci	r31, 0xFE	; 254
        Chords_Last[2] = chords[2];
        Chords_Last[3] = chords[3];
        Chords_Last[4] = chords[4];
        Chords_Last[5] = chords[5];
        Chords_Last[6] = chords[6];*/
        Chord_Growing = false;
    12a0:	20 83       	st	Z, r18
        // if (Layer_Current != layer) {
        //  Layout_Switch();
        //}
      }

      if (Level_Mode == LEVEL_1) { // Quasichords
    12a2:	9f 5f       	subi	r25, 0xFF	; 255
    12a4:	12 96       	adiw	r26, 0x02	; 2
    12a6:	91 17       	cp	r25, r17
    12a8:	60 f3       	brcs	.-40     	; 0x1282 <__stack+0x783>
        Press_Index = 0;
    12aa:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <Macros_Index>
      }
    }
    if (isPress) {
    12ae:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <Chord_Growing>
    12b2:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <Level_Mode>
    12b6:	81 11       	cpse	r24, r1
            }
          }
        }
      }
    }
    Get_Mods(chords[0]);
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <__stack+0x7bf>
    12ba:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <Press_Index>
    12be:	21 96       	adiw	r28, 0x01	; 1
      if (Level_Mode == LEVEL_1) { // Quasichords
        Press_Index = 0;
      }
    }
    if (isPress) {
      Chord_Growing = true;
    12c0:	bf ad       	ldd	r27, Y+63	; 0x3f
    12c2:	21 97       	sbiw	r28, 0x01	; 1
    12c4:	b1 11       	cpse	r27, r1
      if (Level_Mode == LEVEL_1) { // Quasichords
    12c6:	03 c0       	rjmp	.+6      	; 0x12ce <__stack+0x7cf>
    12c8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    12ca:	c0 da       	rcall	.-2688   	; 0x84c <Get_Mods>
    12cc:	78 c0       	rjmp	.+240    	; 0x13be <__stack+0x8bf>
        if (Chords[0] > (chords[0] & Chords[0])) { // Space
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <Chord_Growing>
    12d4:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <Level_Mode>
    12d8:	81 11       	cpse	r24, r1
    12da:	f6 cf       	rjmp	.-20     	; 0x12c8 <__stack+0x7c9>
    12dc:	2f 8d       	ldd	r18, Y+31	; 0x1f
    12de:	38 a1       	ldd	r19, Y+32	; 0x20
    12e0:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <Chords>
    12e4:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <Chords+0x1>
          uint16_t ChordPress =
              Chords[0] - (chords[0] & Chords[0]);
          if (ChordPress & 0x10) {
    12e8:	a9 01       	movw	r20, r18
    12ea:	48 23       	and	r20, r24
    12ec:	59 23       	and	r21, r25
    12ee:	48 17       	cp	r20, r24
    12f0:	59 07       	cpc	r21, r25
    12f2:	10 f5       	brcc	.+68     	; 0x1338 <__stack+0x839>
    12f4:	20 95       	com	r18
            Chords_Press[Press_Index] = 6;
    12f6:	30 95       	com	r19
    12f8:	80 71       	andi	r24, 0x10	; 16
    12fa:	99 27       	eor	r25, r25
    12fc:	82 23       	and	r24, r18
    12fe:	93 23       	and	r25, r19
    1300:	89 2b       	or	r24, r25
    1302:	d1 f0       	breq	.+52     	; 0x1338 <__stack+0x839>
    1304:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <Press_Index>
    1308:	e8 2f       	mov	r30, r24
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	ee 0f       	add	r30, r30
            Press_Index++;
            Chords_Press[Press_Index] = 5;
    130e:	ff 1f       	adc	r31, r31
    1310:	ec 5d       	subi	r30, 0xDC	; 220
    1312:	fd 4f       	sbci	r31, 0xFD	; 253
    1314:	26 e0       	ldi	r18, 0x06	; 6
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	31 83       	std	Z+1, r19	; 0x01
    131a:	20 83       	st	Z, r18
    131c:	e1 e0       	ldi	r30, 0x01	; 1
    131e:	e8 0f       	add	r30, r24
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	ee 0f       	add	r30, r30
            Press_Index++;
    1324:	ff 1f       	adc	r31, r31
    1326:	ec 5d       	subi	r30, 0xDC	; 220
    1328:	fd 4f       	sbci	r31, 0xFD	; 253
    132a:	25 e0       	ldi	r18, 0x05	; 5
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	31 83       	std	Z+1, r19	; 0x01
    1330:	20 83       	st	Z, r18
    1332:	8e 5f       	subi	r24, 0xFE	; 254
    1334:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <Press_Index>
            }
          }
        }

        if (Macros_Index == 2 && multiplier && Macros_Buffer[0]) {
          if (multiplier == 1) {
    1338:	10 91 28 01 	lds	r17, 0x0128	; 0x800128 <Press_Index>
            Chords_Press[Press_Index] = 5;
            Press_Index++;
          }
        }
        for (uint8_t j = 0; j < 6; j++) {
          if (Chords[j + 1] > (chords[j + 1] & Chords[j + 1])) {
    133c:	be 01       	movw	r22, r28
    133e:	6f 5d       	subi	r22, 0xDF	; 223
    1340:	7f 4f       	sbci	r23, 0xFF	; 255
    1342:	af e2       	ldi	r26, 0x2F	; 47
    1344:	b1 e0       	ldi	r27, 0x01	; 1
    1346:	40 e0       	ldi	r20, 0x00	; 0
    1348:	50 e0       	ldi	r21, 0x00	; 0
    134a:	fb 01       	movw	r30, r22
    134c:	81 91       	ld	r24, Z+
    134e:	91 91       	ld	r25, Z+
    1350:	bf 01       	movw	r22, r30
    1352:	2d 91       	ld	r18, X+
    1354:	3d 91       	ld	r19, X+
    1356:	fc 01       	movw	r30, r24
            Press_Index++;
            Chords_Press[Press_Index] = 5;
            Press_Index++;
          }
        }
        for (uint8_t j = 0; j < 6; j++) {
    1358:	e2 23       	and	r30, r18
    135a:	f3 23       	and	r31, r19
    135c:	e2 17       	cp	r30, r18
    135e:	f3 07       	cpc	r31, r19
    1360:	40 f0       	brcs	.+16     	; 0x1372 <__stack+0x873>
    1362:	4f 5f       	subi	r20, 0xFF	; 255
          if (Chords[j + 1] > (chords[j + 1] & Chords[j + 1])) {
            uint8_t ChordPress =
    1364:	5f 4f       	sbci	r21, 0xFF	; 255
    1366:	46 30       	cpi	r20, 0x06	; 6
    1368:	51 05       	cpc	r21, r1
    136a:	79 f7       	brne	.-34     	; 0x134a <__stack+0x84b>
                Chords[j + 1] - (chords[j + 1] & Chords[j + 1]);
            for (int8_t i = 0; i < 5; i++) {
              if (ChordPress & (1 << i)) {
    136c:	10 93 28 01 	sts	0x0128, r17	; 0x800128 <Press_Index>
    1370:	ab cf       	rjmp	.-170    	; 0x12c8 <__stack+0x7c9>
    1372:	80 95       	com	r24
    1374:	82 23       	and	r24, r18
    1376:	20 e0       	ldi	r18, 0x00	; 0
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	fc 01       	movw	r30, r24
    137e:	02 2e       	mov	r0, r18
                Chords_Press[Press_Index] = j;
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <__stack+0x887>
    1382:	f5 95       	asr	r31
    1384:	e7 95       	ror	r30
    1386:	0a 94       	dec	r0
    1388:	e2 f7       	brpl	.-8      	; 0x1382 <__stack+0x883>
    138a:	e0 ff       	sbrs	r30, 0
    138c:	12 c0       	rjmp	.+36     	; 0x13b2 <__stack+0x8b3>
    138e:	e1 2f       	mov	r30, r17
                Press_Index++;
                Chords_Press[Press_Index] = i;
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	ee 0f       	add	r30, r30
    1394:	ff 1f       	adc	r31, r31
    1396:	ec 5d       	subi	r30, 0xDC	; 220
    1398:	fd 4f       	sbci	r31, 0xFD	; 253
    139a:	51 83       	std	Z+1, r21	; 0x01
    139c:	40 83       	st	Z, r20
    139e:	e1 e0       	ldi	r30, 0x01	; 1
    13a0:	e1 0f       	add	r30, r17
                Press_Index++;
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	ee 0f       	add	r30, r30
    13a6:	ff 1f       	adc	r31, r31
        }
        for (uint8_t j = 0; j < 6; j++) {
          if (Chords[j + 1] > (chords[j + 1] & Chords[j + 1])) {
            uint8_t ChordPress =
                Chords[j + 1] - (chords[j + 1] & Chords[j + 1]);
            for (int8_t i = 0; i < 5; i++) {
    13a8:	ec 5d       	subi	r30, 0xDC	; 220
    13aa:	fd 4f       	sbci	r31, 0xFD	; 253
    13ac:	31 83       	std	Z+1, r19	; 0x01
    13ae:	20 83       	st	Z, r18
      }
    }
    Get_Mods(chords[0]);
  }
  /* Determine which interface must have its report generated */
  if (HIDInterfaceInfo == &Keyboard_HID_Interface) {
    13b0:	1e 5f       	subi	r17, 0xFE	; 254
    13b2:	2f 5f       	subi	r18, 0xFF	; 255
    13b4:	3f 4f       	sbci	r19, 0xFF	; 255
    13b6:	25 30       	cpi	r18, 0x05	; 5
    13b8:	31 05       	cpc	r19, r1
    13ba:	01 f7       	brne	.-64     	; 0x137c <__stack+0x87d>
    13bc:	d2 cf       	rjmp	.-92     	; 0x1362 <__stack+0x863>
    13be:	23 96       	adiw	r28, 0x03	; 3
    USB_KeyboardReport_Data_t *KeyboardReport =
        (USB_KeyboardReport_Data_t *)ReportData;

    if (Macros_Index) {
    13c0:	4e ad       	ldd	r20, Y+62	; 0x3e
    13c2:	5f ad       	ldd	r21, Y+63	; 0x3f
    13c4:	23 97       	sbiw	r28, 0x03	; 3
    13c6:	40 51       	subi	r20, 0x10	; 16
      KeyboardReport->KeyCode[0] =
          (Macros_Buffer[0] == 0xFF ? 0 : Macros_Buffer[0]);
    13c8:	51 40       	sbci	r21, 0x01	; 1
    13ca:	09 f0       	breq	.+2      	; 0x13ce <__stack+0x8cf>
  if (HIDInterfaceInfo == &Keyboard_HID_Interface) {
    USB_KeyboardReport_Data_t *KeyboardReport =
        (USB_KeyboardReport_Data_t *)ReportData;

    if (Macros_Index) {
      KeyboardReport->KeyCode[0] =
    13cc:	50 c0       	rjmp	.+160    	; 0x146e <__stack+0x96f>
    13ce:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <Macros_Index>
    13d2:	88 23       	and	r24, r24
    13d4:	d9 f1       	breq	.+118    	; 0x144c <__stack+0x94d>
    13d6:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <Macros_Buffer>
    13da:	8f 3f       	cpi	r24, 0xFF	; 255
          (Macros_Buffer[0] == 0xFF ? 0 : Macros_Buffer[0]);
      KeyboardReport->Modifier = Macros_Buffer[1];
    13dc:	09 f4       	brne	.+2      	; 0x13e0 <__stack+0x8e1>
    13de:	80 e0       	ldi	r24, 0x00	; 0
    13e0:	ae a9       	ldd	r26, Y+54	; 0x36
      if (Macros_Buffer[0] == Macros_Buffer[2] && Macros_Buffer[2] != 0xFF) {
    13e2:	bf a9       	ldd	r27, Y+55	; 0x37
    13e4:	12 96       	adiw	r26, 0x02	; 2
    13e6:	8c 93       	st	X, r24
    13e8:	12 97       	sbiw	r26, 0x02	; 2
    13ea:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <Macros_Buffer+0x1>
        Macros_Buffer[0] = 0xFF;
      } else {
        for (uint8_t i = 0; i <= (Macros_Index - 2); i += 2) {
    13ee:	8c 93       	st	X, r24
    13f0:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <Macros_Buffer>
    13f4:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <Macros_Buffer+0x2>
    13f8:	89 17       	cp	r24, r25
    13fa:	41 f0       	breq	.+16     	; 0x140c <__stack+0x90d>
    13fc:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <Macros_Index>

    if (Macros_Index) {
      KeyboardReport->KeyCode[0] =
          (Macros_Buffer[0] == 0xFF ? 0 : Macros_Buffer[0]);
      KeyboardReport->Modifier = Macros_Buffer[1];
      if (Macros_Buffer[0] == Macros_Buffer[2] && Macros_Buffer[2] != 0xFF) {
    1400:	28 2f       	mov	r18, r24
        Macros_Buffer[0] = 0xFF;
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	21 50       	subi	r18, 0x01	; 1
    1406:	31 09       	sbc	r19, r1
    1408:	90 e0       	ldi	r25, 0x00	; 0
      } else {
        for (uint8_t i = 0; i <= (Macros_Index - 2); i += 2) {
          Macros_Buffer[i + 0] = Macros_Buffer[i + 2];
    140a:	10 c0       	rjmp	.+32     	; 0x142c <__stack+0x92d>
    140c:	8f 3f       	cpi	r24, 0xFF	; 255
    140e:	b1 f3       	breq	.-20     	; 0x13fc <__stack+0x8fd>
    1410:	8f ef       	ldi	r24, 0xFF	; 255
          Macros_Buffer[i + 1] = Macros_Buffer[i + 3];
    1412:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <Macros_Buffer>
          if (!Macros_Buffer[i + 0] && !Macros_Buffer[i + 1])
    1416:	1f c0       	rjmp	.+62     	; 0x1456 <__stack+0x957>
    1418:	e9 5b       	subi	r30, 0xB9	; 185
    141a:	fe 4f       	sbci	r31, 0xFE	; 254
          (Macros_Buffer[0] == 0xFF ? 0 : Macros_Buffer[0]);
      KeyboardReport->Modifier = Macros_Buffer[1];
      if (Macros_Buffer[0] == Macros_Buffer[2] && Macros_Buffer[2] != 0xFF) {
        Macros_Buffer[0] = 0xFF;
      } else {
        for (uint8_t i = 0; i <= (Macros_Index - 2); i += 2) {
    141c:	42 81       	ldd	r20, Z+2	; 0x02
    141e:	40 83       	st	Z, r20
    1420:	43 81       	ldd	r20, Z+3	; 0x03
    1422:	41 83       	std	Z+1, r20	; 0x01
    1424:	50 81       	ld	r21, Z
    1426:	55 23       	and	r21, r21
    1428:	39 f0       	breq	.+14     	; 0x1438 <__stack+0x939>
          Macros_Buffer[i + 0] = Macros_Buffer[i + 2];
          Macros_Buffer[i + 1] = Macros_Buffer[i + 3];
          if (!Macros_Buffer[i + 0] && !Macros_Buffer[i + 1])
    142a:	9e 5f       	subi	r25, 0xFE	; 254
    142c:	e9 2f       	mov	r30, r25
            break;
        }
        Macros_Buffer[MACROS_BUFFER_SIZE - 1] = 0;
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	e2 17       	cp	r30, r18
        Macros_Buffer[MACROS_BUFFER_SIZE - 2] = 0;
    1432:	f3 07       	cpc	r31, r19
    1434:	8c f3       	brlt	.-30     	; 0x1418 <__stack+0x919>
        Macros_Index -= 2;
    1436:	02 c0       	rjmp	.+4      	; 0x143c <__stack+0x93d>
    1438:	41 11       	cpse	r20, r1
    143a:	f7 cf       	rjmp	.-18     	; 0x142a <__stack+0x92b>
    143c:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <Macros_Buffer+0xc7>
      }
    } else {
      KeyboardReport->Modifier = Q_Mods;
    1440:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <Macros_Buffer+0xc6>
    1444:	82 50       	subi	r24, 0x02	; 2
    1446:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <Macros_Index>
    }
    LED2_Switch(KeyboardReport->Modifier);
    144a:	05 c0       	rjmp	.+10     	; 0x1456 <__stack+0x957>
    144c:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <Q_Mods>
    1450:	ee a9       	ldd	r30, Y+54	; 0x36
    1452:	ff a9       	ldd	r31, Y+55	; 0x37
    1454:	80 83       	st	Z, r24
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	ae a9       	ldd	r26, Y+54	; 0x36

    *ReportSize = sizeof(USB_KeyboardReport_Data_t);
    145a:	bf a9       	ldd	r27, Y+55	; 0x37
    145c:	9c 91       	ld	r25, X
    145e:	91 11       	cpse	r25, r1
    return true;
  } else {
    USB_MouseReport_Data_t *MouseReport = (USB_MouseReport_Data_t *)ReportData;

    int8_t mouseX = Mouse_X > 100 ? 100 : (Mouse_X < -100 ? -100 : Mouse_X);
    1460:	01 c0       	rjmp	.+2      	; 0x1464 <__stack+0x965>
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	0e 94 a4 01 	call	0x348	; 0x348 <LED2_Switch>
    1468:	88 e0       	ldi	r24, 0x08	; 8
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	7e c0       	rjmp	.+252    	; 0x156a <__stack+0xa6b>
    146e:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <Mouse_X>
    1472:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <Mouse_X+0x1>
    1476:	85 36       	cpi	r24, 0x65	; 101
    1478:	91 05       	cpc	r25, r1
    147a:	0c f0       	brlt	.+2      	; 0x147e <__stack+0x97f>
    if (Mouse_X > 100)
      Mouse_X -= 100;
    else if (Mouse_X < -100)
    147c:	9b c0       	rjmp	.+310    	; 0x15b4 <__stack+0xab5>
    147e:	38 2f       	mov	r19, r24
    1480:	8c 39       	cpi	r24, 0x9C	; 156
    1482:	ff ef       	ldi	r31, 0xFF	; 255
      Mouse_X += 100;
    1484:	9f 07       	cpc	r25, r31
    1486:	0c f4       	brge	.+2      	; 0x148a <__stack+0x98b>
    1488:	3c e9       	ldi	r19, 0x9C	; 156
    148a:	8c 39       	cpi	r24, 0x9C	; 156
    148c:	2f ef       	ldi	r18, 0xFF	; 255
    148e:	92 07       	cpc	r25, r18
    1490:	3c f4       	brge	.+14     	; 0x14a0 <__stack+0x9a1>
    else
      Mouse_X = 0;
    1492:	8c 59       	subi	r24, 0x9C	; 156
    1494:	9f 4f       	sbci	r25, 0xFF	; 255
    1496:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <Mouse_X+0x1>

    int8_t mouseY = Mouse_Y > 100 ? 100 : (Mouse_Y < -100 ? -100 : Mouse_Y);
    149a:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <Mouse_X>
    149e:	04 c0       	rjmp	.+8      	; 0x14a8 <__stack+0x9a9>
    14a0:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <Mouse_X+0x1>
    14a4:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <Mouse_X>
    14a8:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <Mouse_Y>
    14ac:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <Mouse_Y+0x1>
    14b0:	85 36       	cpi	r24, 0x65	; 101
    14b2:	91 05       	cpc	r25, r1
    14b4:	0c f0       	brlt	.+2      	; 0x14b8 <__stack+0x9b9>
    if (Mouse_Y > 100)
      Mouse_Y -= 100;
    else if (Mouse_Y < -100)
    14b6:	86 c0       	rjmp	.+268    	; 0x15c4 <__stack+0xac5>
    14b8:	48 2f       	mov	r20, r24
    14ba:	8c 39       	cpi	r24, 0x9C	; 156
    14bc:	5f ef       	ldi	r21, 0xFF	; 255
      Mouse_Y += 100;
    14be:	95 07       	cpc	r25, r21
    14c0:	0c f4       	brge	.+2      	; 0x14c4 <__stack+0x9c5>
    14c2:	4c e9       	ldi	r20, 0x9C	; 156
    14c4:	8c 39       	cpi	r24, 0x9C	; 156
    14c6:	af ef       	ldi	r26, 0xFF	; 255
    14c8:	9a 07       	cpc	r25, r26
    14ca:	3c f4       	brge	.+14     	; 0x14da <__stack+0x9db>
    else
      Mouse_Y = 0;
    14cc:	8c 59       	subi	r24, 0x9C	; 156
    14ce:	9f 4f       	sbci	r25, 0xFF	; 255
    14d0:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <Mouse_Y+0x1>

    int8_t mouseW = Mouse_W > 100 ? 100 : (Mouse_W < -100 ? -100 : Mouse_W);
    14d4:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <Mouse_Y>
    14d8:	04 c0       	rjmp	.+8      	; 0x14e2 <__stack+0x9e3>
    14da:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <Mouse_Y+0x1>
    14de:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <Mouse_Y>
    14e2:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <Mouse_W>
    14e6:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <Mouse_W+0x1>
    14ea:	85 36       	cpi	r24, 0x65	; 101
    14ec:	91 05       	cpc	r25, r1
    14ee:	0c f0       	brlt	.+2      	; 0x14f2 <__stack+0x9f3>
    if (Mouse_W > 100)
      Mouse_W -= 100;
    else if (Mouse_W < -100)
    14f0:	71 c0       	rjmp	.+226    	; 0x15d4 <__stack+0xad5>
    14f2:	28 2f       	mov	r18, r24
    14f4:	8c 39       	cpi	r24, 0x9C	; 156
    14f6:	bf ef       	ldi	r27, 0xFF	; 255
      Mouse_W += 100;
    14f8:	9b 07       	cpc	r25, r27
    14fa:	0c f4       	brge	.+2      	; 0x14fe <__stack+0x9ff>
    14fc:	2c e9       	ldi	r18, 0x9C	; 156
    14fe:	8c 39       	cpi	r24, 0x9C	; 156
    1500:	ef ef       	ldi	r30, 0xFF	; 255
    1502:	9e 07       	cpc	r25, r30
    1504:	3c f4       	brge	.+14     	; 0x1514 <__stack+0xa15>
    else
      Mouse_W = 0;
    1506:	8c 59       	subi	r24, 0x9C	; 156
    1508:	9f 4f       	sbci	r25, 0xFF	; 255
    150a:	90 93 14 02 	sts	0x0214, r25	; 0x800214 <Mouse_W+0x1>

    MouseReport->X = mouseX;
    150e:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <Mouse_W>
    1512:	04 c0       	rjmp	.+8      	; 0x151c <__stack+0xa1d>
    1514:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <Mouse_W+0x1>
    MouseReport->Y = mouseY;
    1518:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <Mouse_W>
    151c:	ae a9       	ldd	r26, Y+54	; 0x36
    MouseReport->W = mouseW;
    151e:	bf a9       	ldd	r27, Y+55	; 0x37
    1520:	11 96       	adiw	r26, 0x01	; 1
    1522:	3c 93       	st	X, r19

    MouseReport->Button = Mouse_Button | Mouse_Button_Click;
    1524:	11 97       	sbiw	r26, 0x01	; 1
    1526:	12 96       	adiw	r26, 0x02	; 2
    1528:	4c 93       	st	X, r20
    152a:	12 97       	sbiw	r26, 0x02	; 2
    152c:	13 96       	adiw	r26, 0x03	; 3
    152e:	2c 93       	st	X, r18
    if (!Mouse_X && !Mouse_Y && !Mouse_W)
    1530:	13 97       	sbiw	r26, 0x03	; 3
    1532:	90 91 b4 02 	lds	r25, 0x02B4	; 0x8002b4 <Mouse_Button>
    1536:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <Mouse_Button_Click>
    153a:	89 2b       	or	r24, r25
    153c:	8c 93       	st	X, r24
    153e:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <Mouse_X>
    1542:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <Mouse_X+0x1>
    1546:	89 2b       	or	r24, r25
    1548:	71 f4       	brne	.+28     	; 0x1566 <__stack+0xa67>
    154a:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <Mouse_Y>
    154e:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <Mouse_Y+0x1>
    1552:	89 2b       	or	r24, r25
      Mouse_Button_Click = 0;
    1554:	41 f4       	brne	.+16     	; 0x1566 <__stack+0xa67>
    1556:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <Mouse_W>

    *ReportSize = sizeof(USB_MouseReport_Data_t);
    155a:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <Mouse_W+0x1>
    155e:	89 2b       	or	r24, r25
    1560:	11 f4       	brne	.+4      	; 0x1566 <__stack+0xa67>
    1562:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <Mouse_Button_Click>
    return true;
  }
}
    1566:	84 e0       	ldi	r24, 0x04	; 4
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	ee ad       	ldd	r30, Y+62	; 0x3e
    156c:	ff ad       	ldd	r31, Y+63	; 0x3f
    156e:	91 83       	std	Z+1, r25	; 0x01
    1570:	80 83       	st	Z, r24
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	cc 5b       	subi	r28, 0xBC	; 188
    1576:	df 4f       	sbci	r29, 0xFF	; 255
    1578:	0f b6       	in	r0, 0x3f	; 63
    157a:	f8 94       	cli
    157c:	de bf       	out	0x3e, r29	; 62
    157e:	0f be       	out	0x3f, r0	; 63
    1580:	cd bf       	out	0x3d, r28	; 61
    1582:	df 91       	pop	r29
    1584:	cf 91       	pop	r28
    1586:	1f 91       	pop	r17
    1588:	0f 91       	pop	r16
    158a:	ff 90       	pop	r15
    158c:	ef 90       	pop	r14
    158e:	df 90       	pop	r13
    1590:	cf 90       	pop	r12
    1592:	bf 90       	pop	r11
    1594:	af 90       	pop	r10
    1596:	9f 90       	pop	r9
    1598:	8f 90       	pop	r8
                  if (keyCode) {
                    if (i < 4) {
                      chords_dbl[i] = true;
                      chords_dbl[i + 1] = true;
                    }
                    if ((i < 4) || ((i >= 4) && !chords_dbl[i - 4])) {
    159a:	7f 90       	pop	r7
    159c:	6f 90       	pop	r6
    159e:	5f 90       	pop	r5
    15a0:	4f 90       	pop	r4
    15a2:	3f 90       	pop	r3
    15a4:	2f 90       	pop	r2
  } else {
    USB_MouseReport_Data_t *MouseReport = (USB_MouseReport_Data_t *)ReportData;

    int8_t mouseX = Mouse_X > 100 ? 100 : (Mouse_X < -100 ? -100 : Mouse_X);
    if (Mouse_X > 100)
      Mouse_X -= 100;
    15a6:	08 95       	ret
    15a8:	f6 01       	movw	r30, r12
    15aa:	34 97       	sbiw	r30, 0x04	; 4
    15ac:	80 81       	ld	r24, Z
    15ae:	81 11       	cpse	r24, r1
    15b0:	1e ce       	rjmp	.-964    	; 0x11ee <__stack+0x6ef>
    *ReportSize = sizeof(USB_KeyboardReport_Data_t);
    return true;
  } else {
    USB_MouseReport_Data_t *MouseReport = (USB_MouseReport_Data_t *)ReportData;

    int8_t mouseX = Mouse_X > 100 ? 100 : (Mouse_X < -100 ? -100 : Mouse_X);
    15b2:	aa cd       	rjmp	.-1196   	; 0x1108 <__stack+0x609>
    15b4:	84 56       	subi	r24, 0x64	; 100
    else
      Mouse_X = 0;

    int8_t mouseY = Mouse_Y > 100 ? 100 : (Mouse_Y < -100 ? -100 : Mouse_Y);
    if (Mouse_Y > 100)
      Mouse_Y -= 100;
    15b6:	91 09       	sbc	r25, r1
    15b8:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <Mouse_X+0x1>
    15bc:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <Mouse_X>
    15c0:	34 e6       	ldi	r19, 0x64	; 100
    else if (Mouse_X < -100)
      Mouse_X += 100;
    else
      Mouse_X = 0;

    int8_t mouseY = Mouse_Y > 100 ? 100 : (Mouse_Y < -100 ? -100 : Mouse_Y);
    15c2:	72 cf       	rjmp	.-284    	; 0x14a8 <__stack+0x9a9>
    15c4:	84 56       	subi	r24, 0x64	; 100
    else
      Mouse_Y = 0;

    int8_t mouseW = Mouse_W > 100 ? 100 : (Mouse_W < -100 ? -100 : Mouse_W);
    if (Mouse_W > 100)
      Mouse_W -= 100;
    15c6:	91 09       	sbc	r25, r1
    15c8:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <Mouse_Y+0x1>
    15cc:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <Mouse_Y>
    15d0:	44 e6       	ldi	r20, 0x64	; 100
    else if (Mouse_Y < -100)
      Mouse_Y += 100;
    else
      Mouse_Y = 0;

    int8_t mouseW = Mouse_W > 100 ? 100 : (Mouse_W < -100 ? -100 : Mouse_W);
    15d2:	87 cf       	rjmp	.-242    	; 0x14e2 <__stack+0x9e3>
    15d4:	84 56       	subi	r24, 0x64	; 100
                mods_dbl[5] = true;
              } else if (i < 6) {
                mods_dbl[i - 1] = true;
                mods_dbl[i] = true;
              }
              if ((i < 6) || ((i >= 6) && !mods_dbl[i - 6])) {
    15d6:	91 09       	sbc	r25, r1
    15d8:	90 93 14 02 	sts	0x0214, r25	; 0x800214 <Mouse_W+0x1>
    15dc:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <Mouse_W>
    15e0:	24 e6       	ldi	r18, 0x64	; 100
    15e2:	9c cf       	rjmp	.-200    	; 0x151c <__stack+0xa1d>
    15e4:	9c 91       	ld	r25, X
    15e6:	91 11       	cpse	r25, r1
    15e8:	d4 cb       	rjmp	.-2136   	; 0xd92 <__stack+0x293>
    15ea:	b3 cb       	rjmp	.-2202   	; 0xd52 <__stack+0x253>

000015ec <CALLBACK_HID_Device_ProcessHIDReport>:
 * the received HID report
 */
void CALLBACK_HID_Device_ProcessHIDReport(
    USB_ClassInfo_HID_Device_t *const HIDInterfaceInfo, const uint8_t ReportID,
    const uint8_t ReportType, const void *ReportData,
    const uint16_t ReportSize) {
    15ec:	08 95       	ret

000015ee <main>:

    LEDs_SetAllLEDs(LEDMask);*/
  }
}

int main(void) {
    15ee:	f2 d9       	rcall	.-3100   	; 0x9d4 <Hardware_Setup>
    15f0:	78 94       	sei
    15f2:	c9 d8       	rcall	.-3694   	; 0x786 <Settings_Read>
    15f4:	80 e1       	ldi	r24, 0x10	; 16
    15f6:	91 e0       	ldi	r25, 0x01	; 1
    15f8:	29 d6       	rcall	.+3154   	; 0x224c <HID_Device_USBTask>
    15fa:	80 e0       	ldi	r24, 0x00	; 0
    15fc:	91 e0       	ldi	r25, 0x01	; 1
    15fe:	26 d6       	rcall	.+3148   	; 0x224c <HID_Device_USBTask>
    1600:	c8 d4       	rcall	.+2448   	; 0x1f92 <USB_USBTask>
    1602:	f8 cf       	rjmp	.-16     	; 0x15f4 <main+0x6>

00001604 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
    1604:	29 2f       	mov	r18, r25
    1606:	33 27       	eor	r19, r19
    1608:	23 30       	cpi	r18, 0x03	; 3
    160a:	31 05       	cpc	r19, r1
    160c:	c1 f0       	breq	.+48     	; 0x163e <CALLBACK_USB_GetDescriptor+0x3a>
    160e:	58 f4       	brcc	.+22     	; 0x1626 <CALLBACK_USB_GetDescriptor+0x22>
    1610:	21 30       	cpi	r18, 0x01	; 1
    1612:	31 05       	cpc	r19, r1
    1614:	79 f0       	breq	.+30     	; 0x1634 <CALLBACK_USB_GetDescriptor+0x30>
    1616:	22 30       	cpi	r18, 0x02	; 2
    1618:	31 05       	cpc	r19, r1
    161a:	91 f5       	brne	.+100    	; 0x1680 <CALLBACK_USB_GetDescriptor+0x7c>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
    161c:	8b e3       	ldi	r24, 0x3B	; 59
    161e:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
    1620:	2c ec       	ldi	r18, 0xCC	; 204
    1622:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
    1624:	39 c0       	rjmp	.+114    	; 0x1698 <CALLBACK_USB_GetDescriptor+0x94>
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
    1626:	21 32       	cpi	r18, 0x21	; 33
    1628:	31 05       	cpc	r19, r1
    162a:	e1 f0       	breq	.+56     	; 0x1664 <CALLBACK_USB_GetDescriptor+0x60>
    162c:	22 32       	cpi	r18, 0x22	; 34
    162e:	31 05       	cpc	r19, r1
    1630:	01 f1       	breq	.+64     	; 0x1672 <CALLBACK_USB_GetDescriptor+0x6e>
    1632:	26 c0       	rjmp	.+76     	; 0x1680 <CALLBACK_USB_GetDescriptor+0x7c>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
    1634:	82 e1       	ldi	r24, 0x12	; 18
    1636:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
    1638:	27 e0       	ldi	r18, 0x07	; 7
    163a:	32 e0       	ldi	r19, 0x02	; 2
    163c:	2d c0       	rjmp	.+90     	; 0x1698 <CALLBACK_USB_GetDescriptor+0x94>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
    163e:	99 27       	eor	r25, r25
    1640:	81 30       	cpi	r24, 0x01	; 1
    1642:	91 05       	cpc	r25, r1
    1644:	49 f0       	breq	.+18     	; 0x1658 <CALLBACK_USB_GetDescriptor+0x54>
    1646:	28 f0       	brcs	.+10     	; 0x1652 <CALLBACK_USB_GetDescriptor+0x4e>
    1648:	02 97       	sbiw	r24, 0x02	; 2
    164a:	d1 f4       	brne	.+52     	; 0x1680 <CALLBACK_USB_GetDescriptor+0x7c>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
    164c:	e4 ea       	ldi	r30, 0xA4	; 164
    164e:	f1 e0       	ldi	r31, 0x01	; 1
    1650:	05 c0       	rjmp	.+10     	; 0x165c <CALLBACK_USB_GetDescriptor+0x58>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
    1652:	e8 ec       	ldi	r30, 0xC8	; 200
    1654:	f1 e0       	ldi	r31, 0x01	; 1
    1656:	02 c0       	rjmp	.+4      	; 0x165c <CALLBACK_USB_GetDescriptor+0x58>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    1658:	e8 eb       	ldi	r30, 0xB8	; 184
    165a:	f1 e0       	ldi	r31, 0x01	; 1
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
    165c:	84 91       	lpm	r24, Z
    165e:	90 e0       	ldi	r25, 0x00	; 0
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
    1660:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
    1662:	1a c0       	rjmp	.+52     	; 0x1698 <CALLBACK_USB_GetDescriptor+0x94>
			break;
		case HID_DTYPE_HID:
			if (!(wIndex))
			{
				Address = &ConfigurationDescriptor.HID1_KeyboardHID;
				Size    = sizeof(USB_HID_Descriptor_HID_t);
    1664:	89 e0       	ldi	r24, 0x09	; 9
    1666:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			if (!(wIndex))
    1668:	66 23       	and	r22, r22
    166a:	79 f0       	breq	.+30     	; 0x168a <CALLBACK_USB_GetDescriptor+0x86>
				Address = &ConfigurationDescriptor.HID1_KeyboardHID;
				Size    = sizeof(USB_HID_Descriptor_HID_t);
			}
			else
			{
				Address = &ConfigurationDescriptor.HID2_MouseHID;
    166c:	27 ef       	ldi	r18, 0xF7	; 247
    166e:	31 e0       	ldi	r19, 0x01	; 1
    1670:	13 c0       	rjmp	.+38     	; 0x1698 <CALLBACK_USB_GetDescriptor+0x94>
				Size    = sizeof(USB_HID_Descriptor_HID_t);
			}

			break;
		case HID_DTYPE_Report:
			if (!(wIndex))
    1672:	66 23       	and	r22, r22
    1674:	69 f0       	breq	.+26     	; 0x1690 <CALLBACK_USB_GetDescriptor+0x8c>
				Size    = sizeof(KeyboardReport);
			}
			else
			{
				Address = &MouseReport;
				Size    = sizeof(MouseReport);
    1676:	8f e4       	ldi	r24, 0x4F	; 79
    1678:	90 e0       	ldi	r25, 0x00	; 0
				Address = &KeyboardReport;
				Size    = sizeof(KeyboardReport);
			}
			else
			{
				Address = &MouseReport;
    167a:	28 e5       	ldi	r18, 0x58	; 88
    167c:	32 e0       	ldi	r19, 0x02	; 2
    167e:	0c c0       	rjmp	.+24     	; 0x1698 <CALLBACK_USB_GetDescriptor+0x94>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
    1684:	20 e0       	ldi	r18, 0x00	; 0
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	07 c0       	rjmp	.+14     	; 0x1698 <CALLBACK_USB_GetDescriptor+0x94>

			break;
		case HID_DTYPE_HID:
			if (!(wIndex))
			{
				Address = &ConfigurationDescriptor.HID1_KeyboardHID;
    168a:	2e ed       	ldi	r18, 0xDE	; 222
    168c:	31 e0       	ldi	r19, 0x01	; 1
    168e:	04 c0       	rjmp	.+8      	; 0x1698 <CALLBACK_USB_GetDescriptor+0x94>
			break;
		case HID_DTYPE_Report:
			if (!(wIndex))
			{
				Address = &KeyboardReport;
				Size    = sizeof(KeyboardReport);
    1690:	8f e3       	ldi	r24, 0x3F	; 63
    1692:	90 e0       	ldi	r25, 0x00	; 0

			break;
		case HID_DTYPE_Report:
			if (!(wIndex))
			{
				Address = &KeyboardReport;
    1694:	29 e1       	ldi	r18, 0x19	; 25
    1696:	32 e0       	ldi	r19, 0x02	; 2
			}

			break;
	}

	*DescriptorAddress = Address;
    1698:	fa 01       	movw	r30, r20
    169a:	31 83       	std	Z+1, r19	; 0x01
    169c:	20 83       	st	Z, r18
	return Size;
}
    169e:	08 95       	ret

000016a0 <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    16a0:	cf 92       	push	r12
    16a2:	df 92       	push	r13
    16a4:	ef 92       	push	r14
    16a6:	ff 92       	push	r15
    16a8:	0f 93       	push	r16
    16aa:	1f 93       	push	r17
    16ac:	cf 93       	push	r28
    16ae:	df 93       	push	r29
    16b0:	ec 01       	movw	r28, r24
    16b2:	8b 01       	movw	r16, r22
    16b4:	7a 01       	movw	r14, r20
    16b6:	c6 d1       	rcall	.+908    	; 0x1a44 <Endpoint_WaitUntilReady>
    16b8:	81 11       	cpse	r24, r1
    16ba:	33 c0       	rjmp	.+102    	; 0x1722 <Endpoint_Write_Stream_LE+0x82>
    16bc:	e1 14       	cp	r14, r1
    16be:	f1 04       	cpc	r15, r1
    16c0:	39 f0       	breq	.+14     	; 0x16d0 <Endpoint_Write_Stream_LE+0x30>
    16c2:	f7 01       	movw	r30, r14
    16c4:	80 81       	ld	r24, Z
    16c6:	91 81       	ldd	r25, Z+1	; 0x01
    16c8:	08 1b       	sub	r16, r24
    16ca:	19 0b       	sbc	r17, r25
    16cc:	c8 0f       	add	r28, r24
    16ce:	d9 1f       	adc	r29, r25
    16d0:	c1 2c       	mov	r12, r1
    16d2:	d1 2c       	mov	r13, r1
    16d4:	01 15       	cp	r16, r1
    16d6:	11 05       	cpc	r17, r1
    16d8:	19 f1       	breq	.+70     	; 0x1720 <Endpoint_Write_Stream_LE+0x80>
    16da:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    16de:	85 fd       	sbrc	r24, 5
    16e0:	16 c0       	rjmp	.+44     	; 0x170e <Endpoint_Write_Stream_LE+0x6e>
    16e2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    16e6:	8e 77       	andi	r24, 0x7E	; 126
    16e8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    16ec:	52 d4       	rcall	.+2212   	; 0x1f92 <USB_USBTask>
    16ee:	e1 14       	cp	r14, r1
    16f0:	f1 04       	cpc	r15, r1
    16f2:	49 f0       	breq	.+18     	; 0x1706 <Endpoint_Write_Stream_LE+0x66>
    16f4:	f7 01       	movw	r30, r14
    16f6:	80 81       	ld	r24, Z
    16f8:	91 81       	ldd	r25, Z+1	; 0x01
    16fa:	c8 0e       	add	r12, r24
    16fc:	d9 1e       	adc	r13, r25
    16fe:	d1 82       	std	Z+1, r13	; 0x01
    1700:	c0 82       	st	Z, r12
    1702:	85 e0       	ldi	r24, 0x05	; 5
    1704:	0e c0       	rjmp	.+28     	; 0x1722 <Endpoint_Write_Stream_LE+0x82>
    1706:	9e d1       	rcall	.+828    	; 0x1a44 <Endpoint_WaitUntilReady>
    1708:	88 23       	and	r24, r24
    170a:	21 f3       	breq	.-56     	; 0x16d4 <Endpoint_Write_Stream_LE+0x34>
    170c:	0a c0       	rjmp	.+20     	; 0x1722 <Endpoint_Write_Stream_LE+0x82>
    170e:	89 91       	ld	r24, Y+
    1710:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1714:	01 50       	subi	r16, 0x01	; 1
    1716:	11 09       	sbc	r17, r1
    1718:	ff ef       	ldi	r31, 0xFF	; 255
    171a:	cf 1a       	sub	r12, r31
    171c:	df 0a       	sbc	r13, r31
    171e:	da cf       	rjmp	.-76     	; 0x16d4 <Endpoint_Write_Stream_LE+0x34>
    1720:	80 e0       	ldi	r24, 0x00	; 0
    1722:	df 91       	pop	r29
    1724:	cf 91       	pop	r28
    1726:	1f 91       	pop	r17
    1728:	0f 91       	pop	r16
    172a:	ff 90       	pop	r15
    172c:	ef 90       	pop	r14
    172e:	df 90       	pop	r13
    1730:	cf 90       	pop	r12
    1732:	08 95       	ret

00001734 <Endpoint_Write_Control_Stream_LE>:
    1734:	20 91 c0 02 	lds	r18, 0x02C0	; 0x8002c0 <USB_ControlRequest+0x6>
    1738:	30 91 c1 02 	lds	r19, 0x02C1	; 0x8002c1 <USB_ControlRequest+0x7>
    173c:	26 17       	cp	r18, r22
    173e:	37 07       	cpc	r19, r23
    1740:	48 f0       	brcs	.+18     	; 0x1754 <Endpoint_Write_Control_Stream_LE+0x20>
    1742:	61 15       	cp	r22, r1
    1744:	71 05       	cpc	r23, r1
    1746:	39 f4       	brne	.+14     	; 0x1756 <Endpoint_Write_Control_Stream_LE+0x22>
    1748:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    174c:	2e 77       	andi	r18, 0x7E	; 126
    174e:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1752:	01 c0       	rjmp	.+2      	; 0x1756 <Endpoint_Write_Control_Stream_LE+0x22>
    1754:	b9 01       	movw	r22, r18
    1756:	fc 01       	movw	r30, r24
    1758:	20 e0       	ldi	r18, 0x00	; 0
    175a:	61 15       	cp	r22, r1
    175c:	71 05       	cpc	r23, r1
    175e:	79 f1       	breq	.+94     	; 0x17be <Endpoint_Write_Control_Stream_LE+0x8a>
    1760:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <USB_DeviceState>
    1764:	88 23       	and	r24, r24
    1766:	e1 f1       	breq	.+120    	; 0x17e0 <Endpoint_Write_Control_Stream_LE+0xac>
    1768:	85 30       	cpi	r24, 0x05	; 5
    176a:	e1 f1       	breq	.+120    	; 0x17e4 <Endpoint_Write_Control_Stream_LE+0xb0>
    176c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1770:	83 fd       	sbrc	r24, 3
    1772:	34 c0       	rjmp	.+104    	; 0x17dc <Endpoint_Write_Control_Stream_LE+0xa8>
    1774:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1778:	82 fd       	sbrc	r24, 2
    177a:	2a c0       	rjmp	.+84     	; 0x17d0 <Endpoint_Write_Control_Stream_LE+0x9c>
    177c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1780:	80 ff       	sbrs	r24, 0
    1782:	eb cf       	rjmp	.-42     	; 0x175a <Endpoint_Write_Control_Stream_LE+0x26>
    1784:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    1788:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	92 2b       	or	r25, r18
    1790:	61 15       	cp	r22, r1
    1792:	71 05       	cpc	r23, r1
    1794:	51 f0       	breq	.+20     	; 0x17aa <Endpoint_Write_Control_Stream_LE+0x76>
    1796:	88 30       	cpi	r24, 0x08	; 8
    1798:	91 05       	cpc	r25, r1
    179a:	38 f4       	brcc	.+14     	; 0x17aa <Endpoint_Write_Control_Stream_LE+0x76>
    179c:	21 91       	ld	r18, Z+
    179e:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    17a2:	61 50       	subi	r22, 0x01	; 1
    17a4:	71 09       	sbc	r23, r1
    17a6:	01 96       	adiw	r24, 0x01	; 1
    17a8:	f3 cf       	rjmp	.-26     	; 0x1790 <Endpoint_Write_Control_Stream_LE+0x5c>
    17aa:	21 e0       	ldi	r18, 0x01	; 1
    17ac:	08 97       	sbiw	r24, 0x08	; 8
    17ae:	09 f0       	breq	.+2      	; 0x17b2 <Endpoint_Write_Control_Stream_LE+0x7e>
    17b0:	20 e0       	ldi	r18, 0x00	; 0
    17b2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    17b6:	8e 77       	andi	r24, 0x7E	; 126
    17b8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    17bc:	ce cf       	rjmp	.-100    	; 0x175a <Endpoint_Write_Control_Stream_LE+0x26>
    17be:	21 11       	cpse	r18, r1
    17c0:	cf cf       	rjmp	.-98     	; 0x1760 <Endpoint_Write_Control_Stream_LE+0x2c>
    17c2:	06 c0       	rjmp	.+12     	; 0x17d0 <Endpoint_Write_Control_Stream_LE+0x9c>
    17c4:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <USB_DeviceState>
    17c8:	88 23       	and	r24, r24
    17ca:	51 f0       	breq	.+20     	; 0x17e0 <Endpoint_Write_Control_Stream_LE+0xac>
    17cc:	85 30       	cpi	r24, 0x05	; 5
    17ce:	51 f0       	breq	.+20     	; 0x17e4 <Endpoint_Write_Control_Stream_LE+0xb0>
    17d0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    17d4:	82 ff       	sbrs	r24, 2
    17d6:	f6 cf       	rjmp	.-20     	; 0x17c4 <Endpoint_Write_Control_Stream_LE+0x90>
    17d8:	80 e0       	ldi	r24, 0x00	; 0
    17da:	08 95       	ret
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	08 95       	ret
    17e0:	82 e0       	ldi	r24, 0x02	; 2
    17e2:	08 95       	ret
    17e4:	83 e0       	ldi	r24, 0x03	; 3
    17e6:	08 95       	ret

000017e8 <Endpoint_Read_Control_Stream_LE>:
    17e8:	61 15       	cp	r22, r1
    17ea:	71 05       	cpc	r23, r1
    17ec:	29 f4       	brne	.+10     	; 0x17f8 <Endpoint_Read_Control_Stream_LE+0x10>
    17ee:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    17f2:	2b 77       	andi	r18, 0x7B	; 123
    17f4:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    17f8:	fc 01       	movw	r30, r24
    17fa:	61 15       	cp	r22, r1
    17fc:	71 05       	cpc	r23, r1
    17fe:	41 f1       	breq	.+80     	; 0x1850 <Endpoint_Read_Control_Stream_LE+0x68>
    1800:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <USB_DeviceState>
    1804:	88 23       	and	r24, r24
    1806:	61 f1       	breq	.+88     	; 0x1860 <Endpoint_Read_Control_Stream_LE+0x78>
    1808:	85 30       	cpi	r24, 0x05	; 5
    180a:	61 f1       	breq	.+88     	; 0x1864 <Endpoint_Read_Control_Stream_LE+0x7c>
    180c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1810:	83 fd       	sbrc	r24, 3
    1812:	24 c0       	rjmp	.+72     	; 0x185c <Endpoint_Read_Control_Stream_LE+0x74>
    1814:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1818:	82 ff       	sbrs	r24, 2
    181a:	ef cf       	rjmp	.-34     	; 0x17fa <Endpoint_Read_Control_Stream_LE+0x12>
    181c:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    1820:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	92 2b       	or	r25, r18
    1828:	89 2b       	or	r24, r25
    182a:	31 f0       	breq	.+12     	; 0x1838 <Endpoint_Read_Control_Stream_LE+0x50>
    182c:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1830:	81 93       	st	Z+, r24
    1832:	61 50       	subi	r22, 0x01	; 1
    1834:	71 09       	sbc	r23, r1
    1836:	91 f7       	brne	.-28     	; 0x181c <Endpoint_Read_Control_Stream_LE+0x34>
    1838:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    183c:	8b 77       	andi	r24, 0x7B	; 123
    183e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1842:	db cf       	rjmp	.-74     	; 0x17fa <Endpoint_Read_Control_Stream_LE+0x12>
    1844:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <USB_DeviceState>
    1848:	88 23       	and	r24, r24
    184a:	51 f0       	breq	.+20     	; 0x1860 <Endpoint_Read_Control_Stream_LE+0x78>
    184c:	85 30       	cpi	r24, 0x05	; 5
    184e:	51 f0       	breq	.+20     	; 0x1864 <Endpoint_Read_Control_Stream_LE+0x7c>
    1850:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1854:	80 ff       	sbrs	r24, 0
    1856:	f6 cf       	rjmp	.-20     	; 0x1844 <Endpoint_Read_Control_Stream_LE+0x5c>
    1858:	80 e0       	ldi	r24, 0x00	; 0
    185a:	08 95       	ret
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	08 95       	ret
    1860:	82 e0       	ldi	r24, 0x02	; 2
    1862:	08 95       	ret
    1864:	83 e0       	ldi	r24, 0x03	; 3
    1866:	08 95       	ret

00001868 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1868:	20 91 c0 02 	lds	r18, 0x02C0	; 0x8002c0 <USB_ControlRequest+0x6>
    186c:	30 91 c1 02 	lds	r19, 0x02C1	; 0x8002c1 <USB_ControlRequest+0x7>
    1870:	26 17       	cp	r18, r22
    1872:	37 07       	cpc	r19, r23
    1874:	48 f0       	brcs	.+18     	; 0x1888 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1876:	61 15       	cp	r22, r1
    1878:	71 05       	cpc	r23, r1
    187a:	39 f4       	brne	.+14     	; 0x188a <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    187c:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1880:	2e 77       	andi	r18, 0x7E	; 126
    1882:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1886:	01 c0       	rjmp	.+2      	; 0x188a <Endpoint_Write_Control_PStream_LE+0x22>
    1888:	b9 01       	movw	r22, r18
    188a:	fc 01       	movw	r30, r24
    188c:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    188e:	61 15       	cp	r22, r1
    1890:	71 05       	cpc	r23, r1
    1892:	91 f1       	breq	.+100    	; 0x18f8 <Endpoint_Write_Control_PStream_LE+0x90>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1894:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1898:	88 23       	and	r24, r24
    189a:	09 f4       	brne	.+2      	; 0x189e <Endpoint_Write_Control_PStream_LE+0x36>
    189c:	3e c0       	rjmp	.+124    	; 0x191a <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    189e:	85 30       	cpi	r24, 0x05	; 5
    18a0:	09 f4       	brne	.+2      	; 0x18a4 <Endpoint_Write_Control_PStream_LE+0x3c>
    18a2:	3d c0       	rjmp	.+122    	; 0x191e <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    18a4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    18a8:	83 fd       	sbrc	r24, 3
    18aa:	35 c0       	rjmp	.+106    	; 0x1916 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    18ac:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    18b0:	82 fd       	sbrc	r24, 2
    18b2:	2b c0       	rjmp	.+86     	; 0x190a <Endpoint_Write_Control_PStream_LE+0xa2>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    18b4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  break;

		if (Endpoint_IsINReady())
    18b8:	80 ff       	sbrs	r24, 0
    18ba:	e9 cf       	rjmp	.-46     	; 0x188e <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    18bc:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    18c0:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    18c8:	61 15       	cp	r22, r1
    18ca:	71 05       	cpc	r23, r1
    18cc:	59 f0       	breq	.+22     	; 0x18e4 <Endpoint_Write_Control_PStream_LE+0x7c>
    18ce:	88 30       	cpi	r24, 0x08	; 8
    18d0:	91 05       	cpc	r25, r1
    18d2:	40 f4       	brcc	.+16     	; 0x18e4 <Endpoint_Write_Control_PStream_LE+0x7c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    18d4:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    18d6:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    18da:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    18dc:	61 50       	subi	r22, 0x01	; 1
    18de:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    18e0:	01 96       	adiw	r24, 0x01	; 1
    18e2:	f2 cf       	rjmp	.-28     	; 0x18c8 <Endpoint_Write_Control_PStream_LE+0x60>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    18e4:	21 e0       	ldi	r18, 0x01	; 1
    18e6:	08 97       	sbiw	r24, 0x08	; 8
    18e8:	09 f0       	breq	.+2      	; 0x18ec <Endpoint_Write_Control_PStream_LE+0x84>
    18ea:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    18ec:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    18f0:	8e 77       	andi	r24, 0x7E	; 126
    18f2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    18f6:	cb cf       	rjmp	.-106    	; 0x188e <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    18f8:	21 11       	cpse	r18, r1
    18fa:	cc cf       	rjmp	.-104    	; 0x1894 <Endpoint_Write_Control_PStream_LE+0x2c>
    18fc:	06 c0       	rjmp	.+12     	; 0x190a <Endpoint_Write_Control_PStream_LE+0xa2>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    18fe:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1902:	88 23       	and	r24, r24
    1904:	51 f0       	breq	.+20     	; 0x191a <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1906:	85 30       	cpi	r24, 0x05	; 5
    1908:	51 f0       	breq	.+20     	; 0x191e <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    190a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    190e:	82 ff       	sbrs	r24, 2
    1910:	f6 cf       	rjmp	.-20     	; 0x18fe <Endpoint_Write_Control_PStream_LE+0x96>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1912:	80 e0       	ldi	r24, 0x00	; 0
    1914:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    191a:	82 e0       	ldi	r24, 0x02	; 2
    191c:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    191e:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1920:	08 95       	ret

00001922 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    1922:	98 2f       	mov	r25, r24
    1924:	97 30       	cpi	r25, 0x07	; 7
    1926:	68 f5       	brcc	.+90     	; 0x1982 <Endpoint_ConfigureEndpoint_Prv+0x60>
    1928:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    192c:	98 17       	cp	r25, r24
    192e:	39 f0       	breq	.+14     	; 0x193e <Endpoint_ConfigureEndpoint_Prv+0x1c>
    1930:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1934:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    1938:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    193c:	03 c0       	rjmp	.+6      	; 0x1944 <Endpoint_ConfigureEndpoint_Prv+0x22>
    193e:	24 2f       	mov	r18, r20
    1940:	76 2f       	mov	r23, r22
    1942:	50 e0       	ldi	r21, 0x00	; 0
    1944:	21 fd       	sbrc	r18, 1
    1946:	02 c0       	rjmp	.+4      	; 0x194c <Endpoint_ConfigureEndpoint_Prv+0x2a>
    1948:	9f 5f       	subi	r25, 0xFF	; 255
    194a:	ec cf       	rjmp	.-40     	; 0x1924 <Endpoint_ConfigureEndpoint_Prv+0x2>
    194c:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1950:	3e 7f       	andi	r19, 0xFE	; 254
    1952:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1956:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    195a:	3d 7f       	andi	r19, 0xFD	; 253
    195c:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    1960:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1964:	31 60       	ori	r19, 0x01	; 1
    1966:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    196a:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    196e:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    1972:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1976:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    197a:	27 fd       	sbrc	r18, 7
    197c:	e5 cf       	rjmp	.-54     	; 0x1948 <Endpoint_ConfigureEndpoint_Prv+0x26>
    197e:	80 e0       	ldi	r24, 0x00	; 0
    1980:	08 95       	ret
    1982:	8f 70       	andi	r24, 0x0F	; 15
    1984:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	08 95       	ret

0000198c <Endpoint_ConfigureEndpointTable>:
    198c:	0f 93       	push	r16
    198e:	1f 93       	push	r17
    1990:	cf 93       	push	r28
    1992:	df 93       	push	r29
    1994:	06 2f       	mov	r16, r22
    1996:	ec 01       	movw	r28, r24
    1998:	10 e0       	ldi	r17, 0x00	; 0
    199a:	10 17       	cp	r17, r16
    199c:	71 f1       	breq	.+92     	; 0x19fa <Endpoint_ConfigureEndpointTable+0x6e>
    199e:	68 81       	ld	r22, Y
    19a0:	61 11       	cpse	r22, r1
    19a2:	03 c0       	rjmp	.+6      	; 0x19aa <Endpoint_ConfigureEndpointTable+0x1e>
    19a4:	1f 5f       	subi	r17, 0xFF	; 255
    19a6:	25 96       	adiw	r28, 0x05	; 5
    19a8:	f8 cf       	rjmp	.-16     	; 0x199a <Endpoint_ConfigureEndpointTable+0xe>
    19aa:	2c 81       	ldd	r18, Y+4	; 0x04
    19ac:	a9 81       	ldd	r26, Y+1	; 0x01
    19ae:	ba 81       	ldd	r27, Y+2	; 0x02
    19b0:	9b 81       	ldd	r25, Y+3	; 0x03
    19b2:	86 2f       	mov	r24, r22
    19b4:	8f 70       	andi	r24, 0x0F	; 15
    19b6:	87 30       	cpi	r24, 0x07	; 7
    19b8:	10 f0       	brcs	.+4      	; 0x19be <Endpoint_ConfigureEndpointTable+0x32>
    19ba:	80 e0       	ldi	r24, 0x00	; 0
    19bc:	1f c0       	rjmp	.+62     	; 0x19fc <Endpoint_ConfigureEndpointTable+0x70>
    19be:	22 30       	cpi	r18, 0x02	; 2
    19c0:	10 f4       	brcc	.+4      	; 0x19c6 <Endpoint_ConfigureEndpointTable+0x3a>
    19c2:	42 e0       	ldi	r20, 0x02	; 2
    19c4:	01 c0       	rjmp	.+2      	; 0x19c8 <Endpoint_ConfigureEndpointTable+0x3c>
    19c6:	46 e0       	ldi	r20, 0x06	; 6
    19c8:	e8 e0       	ldi	r30, 0x08	; 8
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	20 e0       	ldi	r18, 0x00	; 0
    19ce:	ea 17       	cp	r30, r26
    19d0:	fb 07       	cpc	r31, r27
    19d2:	20 f4       	brcc	.+8      	; 0x19dc <Endpoint_ConfigureEndpointTable+0x50>
    19d4:	2f 5f       	subi	r18, 0xFF	; 255
    19d6:	ee 0f       	add	r30, r30
    19d8:	ff 1f       	adc	r31, r31
    19da:	f9 cf       	rjmp	.-14     	; 0x19ce <Endpoint_ConfigureEndpointTable+0x42>
    19dc:	22 95       	swap	r18
    19de:	20 7f       	andi	r18, 0xF0	; 240
    19e0:	42 2b       	or	r20, r18
    19e2:	50 e4       	ldi	r21, 0x40	; 64
    19e4:	95 9f       	mul	r25, r21
    19e6:	90 01       	movw	r18, r0
    19e8:	11 24       	eor	r1, r1
    19ea:	66 1f       	adc	r22, r22
    19ec:	66 27       	eor	r22, r22
    19ee:	66 1f       	adc	r22, r22
    19f0:	62 2b       	or	r22, r18
    19f2:	97 df       	rcall	.-210    	; 0x1922 <Endpoint_ConfigureEndpoint_Prv>
    19f4:	81 11       	cpse	r24, r1
    19f6:	d6 cf       	rjmp	.-84     	; 0x19a4 <Endpoint_ConfigureEndpointTable+0x18>
    19f8:	e0 cf       	rjmp	.-64     	; 0x19ba <Endpoint_ConfigureEndpointTable+0x2e>
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	df 91       	pop	r29
    19fe:	cf 91       	pop	r28
    1a00:	1f 91       	pop	r17
    1a02:	0f 91       	pop	r16
    1a04:	08 95       	ret

00001a06 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1a06:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <USB_ControlRequest>
    1a0a:	87 ff       	sbrs	r24, 7
    1a0c:	11 c0       	rjmp	.+34     	; 0x1a30 <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1a0e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
    1a12:	82 fd       	sbrc	r24, 2
    1a14:	05 c0       	rjmp	.+10     	; 0x1a20 <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1a16:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <USB_DeviceState>
    1a1a:	81 11       	cpse	r24, r1
    1a1c:	f8 cf       	rjmp	.-16     	; 0x1a0e <Endpoint_ClearStatusStage+0x8>
    1a1e:	11 c0       	rjmp	.+34     	; 0x1a42 <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1a20:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1a24:	8b 77       	andi	r24, 0x7B	; 123
    1a26:	0b c0       	rjmp	.+22     	; 0x1a3e <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1a28:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <USB_DeviceState>
    1a2c:	88 23       	and	r24, r24
    1a2e:	49 f0       	breq	.+18     	; 0x1a42 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1a30:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1a34:	80 ff       	sbrs	r24, 0
    1a36:	f8 cf       	rjmp	.-16     	; 0x1a28 <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a38:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1a3c:	8e 77       	andi	r24, 0x7E	; 126
    1a3e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1a42:	08 95       	ret

00001a44 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1a44:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    1a48:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
    1a4c:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1a4e:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1a52:	84 2f       	mov	r24, r20
    1a54:	81 70       	andi	r24, 0x01	; 1
    1a56:	40 ff       	sbrs	r20, 0
    1a58:	23 c0       	rjmp	.+70     	; 0x1aa0 <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1a5a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1a5e:	80 fd       	sbrc	r24, 0
    1a60:	1d c0       	rjmp	.+58     	; 0x1a9c <Endpoint_WaitUntilReady+0x58>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1a62:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1a66:	88 23       	and	r24, r24
    1a68:	99 f0       	breq	.+38     	; 0x1a90 <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1a6a:	85 30       	cpi	r24, 0x05	; 5
    1a6c:	99 f0       	breq	.+38     	; 0x1a94 <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1a6e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1a72:	85 fd       	sbrc	r24, 5
    1a74:	11 c0       	rjmp	.+34     	; 0x1a98 <Endpoint_WaitUntilReady+0x54>
    1a76:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    1a7a:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1a7e:	24 17       	cp	r18, r20
    1a80:	35 07       	cpc	r19, r21
    1a82:	29 f3       	breq	.-54     	; 0x1a4e <Endpoint_WaitUntilReady+0xa>
    1a84:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1a86:	11 f0       	breq	.+4      	; 0x1a8c <Endpoint_WaitUntilReady+0x48>
    1a88:	9a 01       	movw	r18, r20
    1a8a:	e1 cf       	rjmp	.-62     	; 0x1a4e <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    1a8c:	84 e0       	ldi	r24, 0x04	; 4
    1a8e:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1a90:	82 e0       	ldi	r24, 0x02	; 2
    1a92:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1a94:	83 e0       	ldi	r24, 0x03	; 3
    1a96:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1a9c:	80 e0       	ldi	r24, 0x00	; 0
    1a9e:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1aa0:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1aa4:	42 ff       	sbrs	r20, 2
    1aa6:	dd cf       	rjmp	.-70     	; 0x1a62 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    1aa8:	08 95       	ret

00001aaa <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    1aaa:	0f 93       	push	r16
    1aac:	1f 93       	push	r17
    1aae:	cf 93       	push	r28
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
    1ab0:	df 93       	push	r29
    1ab2:	4b d0       	rcall	.+150    	; 0x1b4a <USB_INT_DisableAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1ab4:	52 d0       	rcall	.+164    	; 0x1b5a <USB_INT_ClearAllInterrupts>
    1ab6:	c8 ed       	ldi	r28, 0xD8	; 216
    1ab8:	d0 e0       	ldi	r29, 0x00	; 0
    1aba:	88 81       	ld	r24, Y
    1abc:	8f 77       	andi	r24, 0x7F	; 127
				USBCON |=  (1 << USBE);
    1abe:	88 83       	st	Y, r24
    1ac0:	88 81       	ld	r24, Y
    1ac2:	80 68       	ori	r24, 0x80	; 128
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1ac4:	88 83       	st	Y, r24
    1ac6:	88 81       	ld	r24, Y
    1ac8:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1aca:	88 83       	st	Y, r24
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1acc:	19 bc       	out	0x29, r1	; 41
    1ace:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <USB_DeviceState>
	USB_Device_ConfigurationNumber  = 0;
    1ad2:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <USB_Device_ConfigurationNumber>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1ad6:	10 92 b7 02 	sts	0x02B7, r1	; 0x8002b7 <USB_Device_RemoteWakeupEnabled>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1ada:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <USB_Device_CurrentlySelfPowered>
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1ade:	00 ee       	ldi	r16, 0xE0	; 224
    1ae0:	10 e0       	ldi	r17, 0x00	; 0
    1ae2:	f8 01       	movw	r30, r16
    1ae4:	80 81       	ld	r24, Z
    1ae6:	8b 7f       	andi	r24, 0xFB	; 251
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1ae8:	80 83       	st	Z, r24
    1aea:	88 81       	ld	r24, Y
    1aec:	81 60       	ori	r24, 0x01	; 1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1aee:	88 83       	st	Y, r24
    1af0:	42 e0       	ldi	r20, 0x02	; 2
    1af2:	60 e0       	ldi	r22, 0x00	; 0
    1af4:	80 e0       	ldi	r24, 0x00	; 0
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1af6:	15 df       	rcall	.-470    	; 0x1922 <Endpoint_ConfigureEndpoint_Prv>
    1af8:	e1 ee       	ldi	r30, 0xE1	; 225
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	80 81       	ld	r24, Z
    1afe:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1b00:	80 83       	st	Z, r24
    1b02:	e2 ee       	ldi	r30, 0xE2	; 226
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	80 81       	ld	r24, Z
    1b08:	81 60       	ori	r24, 0x01	; 1
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1b0a:	80 83       	st	Z, r24
    1b0c:	80 81       	ld	r24, Z
    1b0e:	88 60       	ori	r24, 0x08	; 8
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1b10:	80 83       	st	Z, r24
    1b12:	f8 01       	movw	r30, r16
    1b14:	80 81       	ld	r24, Z
    1b16:	8e 7f       	andi	r24, 0xFE	; 254

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1b18:	80 83       	st	Z, r24
    1b1a:	88 81       	ld	r24, Y
    1b1c:	80 61       	ori	r24, 0x10	; 16
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1b1e:	88 83       	st	Y, r24
    1b20:	df 91       	pop	r29
    1b22:	cf 91       	pop	r28
    1b24:	1f 91       	pop	r17
    1b26:	0f 91       	pop	r16
    1b28:	08 95       	ret

00001b2a <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1b2a:	e8 ed       	ldi	r30, 0xD8	; 216
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	80 81       	ld	r24, Z
    1b30:	8f 7e       	andi	r24, 0xEF	; 239
    1b32:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1b34:	e7 ed       	ldi	r30, 0xD7	; 215
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	80 81       	ld	r24, Z
    1b3a:	81 60       	ori	r24, 0x01	; 1
    1b3c:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    1b3e:	84 e0       	ldi	r24, 0x04	; 4
    1b40:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <USB_IsInitialized>
    1b48:	b0 cf       	rjmp	.-160    	; 0x1aaa <USB_ResetInterface>

00001b4a <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    1b4a:	e8 ed       	ldi	r30, 0xD8	; 216
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	80 81       	ld	r24, Z
    1b50:	8e 7f       	andi	r24, 0xFE	; 254
    1b52:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1b54:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1b58:	08 95       	ret

00001b5a <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1b5a:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1b5e:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1b62:	08 95       	ret

00001b64 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1b64:	1f 92       	push	r1
    1b66:	0f 92       	push	r0
    1b68:	0f b6       	in	r0, 0x3f	; 63
    1b6a:	0f 92       	push	r0
    1b6c:	11 24       	eor	r1, r1
    1b6e:	2f 93       	push	r18
    1b70:	3f 93       	push	r19
    1b72:	4f 93       	push	r20
    1b74:	5f 93       	push	r21
    1b76:	6f 93       	push	r22
    1b78:	7f 93       	push	r23
    1b7a:	8f 93       	push	r24
    1b7c:	9f 93       	push	r25
    1b7e:	af 93       	push	r26
    1b80:	bf 93       	push	r27
    1b82:	ef 93       	push	r30
    1b84:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1b86:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1b8a:	82 ff       	sbrs	r24, 2
    1b8c:	0b c0       	rjmp	.+22     	; 0x1ba4 <__vector_10+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1b8e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1b92:	82 ff       	sbrs	r24, 2
    1b94:	07 c0       	rjmp	.+14     	; 0x1ba4 <__vector_10+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1b96:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1b9a:	8b 7f       	andi	r24, 0xFB	; 251
    1b9c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1ba0:	0e 94 1e 05 	call	0xa3c	; 0xa3c <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1ba4:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1ba8:	80 ff       	sbrs	r24, 0
    1baa:	1f c0       	rjmp	.+62     	; 0x1bea <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    1bac:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1bb0:	80 ff       	sbrs	r24, 0
    1bb2:	1b c0       	rjmp	.+54     	; 0x1bea <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1bb4:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
    1bb8:	8e 7f       	andi	r24, 0xFE	; 254
    1bba:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1bbe:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1bc2:	80 ff       	sbrs	r24, 0
    1bc4:	0d c0       	rjmp	.+26     	; 0x1be0 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1bc6:	80 e1       	ldi	r24, 0x10	; 16
    1bc8:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1bca:	82 e1       	ldi	r24, 0x12	; 18
    1bcc:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1bce:	09 b4       	in	r0, 0x29	; 41
    1bd0:	00 fe       	sbrs	r0, 0
    1bd2:	fd cf       	rjmp	.-6      	; 0x1bce <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <USB_DeviceState>
			EVENT_USB_Device_Connect();
    1bda:	0e 94 06 05 	call	0xa0c	; 0xa0c <EVENT_USB_Device_Connect>
    1bde:	05 c0       	rjmp	.+10     	; 0x1bea <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1be0:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1be2:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
    1be6:	0e 94 07 05 	call	0xa0e	; 0xa0e <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1bea:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1bee:	80 ff       	sbrs	r24, 0
    1bf0:	18 c0       	rjmp	.+48     	; 0x1c22 <__vector_10+0xbe>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1bf2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1bf6:	80 ff       	sbrs	r24, 0
    1bf8:	14 c0       	rjmp	.+40     	; 0x1c22 <__vector_10+0xbe>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1bfa:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1bfe:	8e 7f       	andi	r24, 0xFE	; 254
    1c00:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1c04:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1c08:	80 61       	ori	r24, 0x10	; 16
    1c0a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1c0e:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1c12:	80 62       	ori	r24, 0x20	; 32
    1c14:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1c18:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1c1a:	85 e0       	ldi	r24, 0x05	; 5
    1c1c:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <USB_DeviceState>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1c20:	b7 d1       	rcall	.+878    	; 0x1f90 <USB_Event_Stub>
    1c22:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1c26:	84 ff       	sbrs	r24, 4
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1c28:	2d c0       	rjmp	.+90     	; 0x1c84 <__vector_10+0x120>
    1c2a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1c2e:	84 ff       	sbrs	r24, 4

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1c30:	29 c0       	rjmp	.+82     	; 0x1c84 <__vector_10+0x120>
    1c32:	80 e1       	ldi	r24, 0x10	; 16
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1c34:	89 bd       	out	0x29, r24	; 41
    1c36:	82 e1       	ldi	r24, 0x12	; 18
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1c38:	89 bd       	out	0x29, r24	; 41
    1c3a:	09 b4       	in	r0, 0x29	; 41
    1c3c:	00 fe       	sbrs	r0, 0
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1c3e:	fd cf       	rjmp	.-6      	; 0x1c3a <__vector_10+0xd6>
    1c40:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1c44:	8f 7d       	andi	r24, 0xDF	; 223
    1c46:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1c4a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1c4e:	8f 7e       	andi	r24, 0xEF	; 239
    1c50:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1c54:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1c58:	8f 7e       	andi	r24, 0xEF	; 239
    1c5a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1c5e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1c62:	81 60       	ori	r24, 0x01	; 1
    1c64:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1c68:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <USB_Device_ConfigurationNumber>
    1c6c:	81 11       	cpse	r24, r1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1c6e:	06 c0       	rjmp	.+12     	; 0x1c7c <__vector_10+0x118>
    1c70:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1c74:	87 fd       	sbrc	r24, 7
    1c76:	02 c0       	rjmp	.+4      	; 0x1c7c <__vector_10+0x118>
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	01 c0       	rjmp	.+2      	; 0x1c7e <__vector_10+0x11a>
    1c7c:	84 e0       	ldi	r24, 0x04	; 4

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1c7e:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <USB_DeviceState>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1c82:	86 d1       	rcall	.+780    	; 0x1f90 <USB_Event_Stub>
    1c84:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1c88:	83 ff       	sbrs	r24, 3
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1c8a:	22 c0       	rjmp	.+68     	; 0x1cd0 <__vector_10+0x16c>
    1c8c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1c90:	83 ff       	sbrs	r24, 3
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1c92:	1e c0       	rjmp	.+60     	; 0x1cd0 <__vector_10+0x16c>
    1c94:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1c98:	87 7f       	andi	r24, 0xF7	; 247
    1c9a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1c9e:	82 e0       	ldi	r24, 0x02	; 2
    1ca0:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
    1ca4:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1ca8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1cac:	8e 7f       	andi	r24, 0xFE	; 254
    1cae:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1cb2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1cb6:	8e 7f       	andi	r24, 0xFE	; 254
    1cb8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1cbc:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1cc0:	80 61       	ori	r24, 0x10	; 16
    1cc2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1cc6:	42 e0       	ldi	r20, 0x02	; 2
    1cc8:	60 e0       	ldi	r22, 0x00	; 0

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1cca:	80 e0       	ldi	r24, 0x00	; 0
    1ccc:	2a de       	rcall	.-940    	; 0x1922 <Endpoint_ConfigureEndpoint_Prv>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1cce:	60 d1       	rcall	.+704    	; 0x1f90 <USB_Event_Stub>
    1cd0:	ff 91       	pop	r31
    1cd2:	ef 91       	pop	r30
    1cd4:	bf 91       	pop	r27
    1cd6:	af 91       	pop	r26
    1cd8:	9f 91       	pop	r25
    1cda:	8f 91       	pop	r24
    1cdc:	7f 91       	pop	r23
    1cde:	6f 91       	pop	r22
    1ce0:	5f 91       	pop	r21
    1ce2:	4f 91       	pop	r20
    1ce4:	3f 91       	pop	r19
    1ce6:	2f 91       	pop	r18
    1ce8:	0f 90       	pop	r0
    1cea:	0f be       	out	0x3f, r0	; 63
    1cec:	0f 90       	pop	r0
    1cee:	1f 90       	pop	r1
    1cf0:	18 95       	reti

00001cf2 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1cf2:	1f 93       	push	r17
    1cf4:	cf 93       	push	r28
    1cf6:	df 93       	push	r29
    1cf8:	cd b7       	in	r28, 0x3d	; 61
    1cfa:	de b7       	in	r29, 0x3e	; 62
    1cfc:	aa 97       	sbiw	r28, 0x2a	; 42
    1cfe:	0f b6       	in	r0, 0x3f	; 63
    1d00:	f8 94       	cli
    1d02:	de bf       	out	0x3e, r29	; 62
    1d04:	0f be       	out	0x3f, r0	; 63
    1d06:	cd bf       	out	0x3d, r28	; 61
    1d08:	ea eb       	ldi	r30, 0xBA	; 186
    1d0a:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1d0c:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1d10:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1d12:	22 e0       	ldi	r18, 0x02	; 2
    1d14:	e2 3c       	cpi	r30, 0xC2	; 194
    1d16:	f2 07       	cpc	r31, r18
    1d18:	c9 f7       	brne	.-14     	; 0x1d0c <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1d1a:	0e 94 16 05 	call	0xa2c	; 0xa2c <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1d1e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
    1d22:	83 ff       	sbrs	r24, 3
    1d24:	1d c1       	rjmp	.+570    	; 0x1f60 <USB_Device_ProcessControlRequest+0x26e>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1d26:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    1d2a:	90 91 bb 02 	lds	r25, 0x02BB	; 0x8002bb <USB_ControlRequest+0x1>
    1d2e:	49 2f       	mov	r20, r25
    1d30:	50 e0       	ldi	r21, 0x00	; 0
    1d32:	4a 30       	cpi	r20, 0x0A	; 10
    1d34:	51 05       	cpc	r21, r1
    1d36:	08 f0       	brcs	.+2      	; 0x1d3a <USB_Device_ProcessControlRequest+0x48>
    1d38:	13 c1       	rjmp	.+550    	; 0x1f60 <USB_Device_ProcessControlRequest+0x26e>
    1d3a:	fa 01       	movw	r30, r20
    1d3c:	ea 5a       	subi	r30, 0xAA	; 170
    1d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d40:	3f c3       	rjmp	.+1662   	; 0x23c0 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1d42:	80 38       	cpi	r24, 0x80	; 128
    1d44:	81 f0       	breq	.+32     	; 0x1d66 <USB_Device_ProcessControlRequest+0x74>
    1d46:	82 38       	cpi	r24, 0x82	; 130
    1d48:	09 f0       	breq	.+2      	; 0x1d4c <USB_Device_ProcessControlRequest+0x5a>
    1d4a:	0a c1       	rjmp	.+532    	; 0x1f60 <USB_Device_ProcessControlRequest+0x26e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1d4c:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <USB_ControlRequest+0x4>
    1d50:	8f 70       	andi	r24, 0x0F	; 15
    1d52:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1d56:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
    1d5a:	85 fb       	bst	r24, 5
    1d5c:	88 27       	eor	r24, r24
    1d5e:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1d60:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1d64:	06 c0       	rjmp	.+12     	; 0x1d72 <USB_Device_ProcessControlRequest+0x80>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1d66:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1d6a:	90 91 b7 02 	lds	r25, 0x02B7	; 0x8002b7 <USB_Device_RemoteWakeupEnabled>
    1d6e:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1d70:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1d72:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1d76:	97 7f       	andi	r25, 0xF7	; 247
    1d78:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1d7c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
    1d80:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1d84:	c4 c0       	rjmp	.+392    	; 0x1f0e <USB_Device_ProcessControlRequest+0x21c>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1d86:	28 2f       	mov	r18, r24
    1d88:	2d 7f       	andi	r18, 0xFD	; 253
    1d8a:	09 f0       	breq	.+2      	; 0x1d8e <USB_Device_ProcessControlRequest+0x9c>
    1d8c:	e9 c0       	rjmp	.+466    	; 0x1f60 <USB_Device_ProcessControlRequest+0x26e>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1d8e:	88 23       	and	r24, r24
    1d90:	19 f0       	breq	.+6      	; 0x1d98 <USB_Device_ProcessControlRequest+0xa6>
    1d92:	82 30       	cpi	r24, 0x02	; 2
    1d94:	61 f0       	breq	.+24     	; 0x1dae <USB_Device_ProcessControlRequest+0xbc>
    1d96:	e4 c0       	rjmp	.+456    	; 0x1f60 <USB_Device_ProcessControlRequest+0x26e>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1d98:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <USB_ControlRequest+0x2>
    1d9c:	81 30       	cpi	r24, 0x01	; 1
    1d9e:	09 f0       	breq	.+2      	; 0x1da2 <USB_Device_ProcessControlRequest+0xb0>
    1da0:	df c0       	rjmp	.+446    	; 0x1f60 <USB_Device_ProcessControlRequest+0x26e>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1da2:	93 30       	cpi	r25, 0x03	; 3
    1da4:	09 f0       	breq	.+2      	; 0x1da8 <USB_Device_ProcessControlRequest+0xb6>
    1da6:	80 e0       	ldi	r24, 0x00	; 0
    1da8:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <USB_Device_RemoteWakeupEnabled>
    1dac:	2b c0       	rjmp	.+86     	; 0x1e04 <USB_Device_ProcessControlRequest+0x112>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1dae:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <USB_ControlRequest+0x2>
    1db2:	81 11       	cpse	r24, r1
    1db4:	27 c0       	rjmp	.+78     	; 0x1e04 <USB_Device_ProcessControlRequest+0x112>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1db6:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <USB_ControlRequest+0x4>
    1dba:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1dbc:	09 f4       	brne	.+2      	; 0x1dc0 <USB_Device_ProcessControlRequest+0xce>
    1dbe:	d0 c0       	rjmp	.+416    	; 0x1f60 <USB_Device_ProcessControlRequest+0x26e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1dc0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1dc4:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1dc8:	20 ff       	sbrs	r18, 0
    1dca:	1c c0       	rjmp	.+56     	; 0x1e04 <USB_Device_ProcessControlRequest+0x112>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1dcc:	93 30       	cpi	r25, 0x03	; 3
    1dce:	21 f4       	brne	.+8      	; 0x1dd8 <USB_Device_ProcessControlRequest+0xe6>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1dd0:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1dd4:	80 62       	ori	r24, 0x20	; 32
    1dd6:	14 c0       	rjmp	.+40     	; 0x1e00 <USB_Device_ProcessControlRequest+0x10e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1dd8:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1ddc:	90 61       	ori	r25, 0x10	; 16
    1dde:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1de2:	21 e0       	ldi	r18, 0x01	; 1
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	a9 01       	movw	r20, r18
    1de8:	02 c0       	rjmp	.+4      	; 0x1dee <USB_Device_ProcessControlRequest+0xfc>
    1dea:	44 0f       	add	r20, r20
    1dec:	55 1f       	adc	r21, r21
    1dee:	8a 95       	dec	r24
    1df0:	e2 f7       	brpl	.-8      	; 0x1dea <USB_Device_ProcessControlRequest+0xf8>
    1df2:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
    1df6:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1dfa:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1dfe:	88 60       	ori	r24, 0x08	; 8
    1e00:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e04:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1e08:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1e0c:	87 7f       	andi	r24, 0xF7	; 247
    1e0e:	82 c0       	rjmp	.+260    	; 0x1f14 <USB_Device_ProcessControlRequest+0x222>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1e10:	81 11       	cpse	r24, r1
    1e12:	a6 c0       	rjmp	.+332    	; 0x1f60 <USB_Device_ProcessControlRequest+0x26e>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1e14:	10 91 bc 02 	lds	r17, 0x02BC	; 0x8002bc <USB_ControlRequest+0x2>
    1e18:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1e1a:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    1e1e:	80 78       	andi	r24, 0x80	; 128
    1e20:	81 2b       	or	r24, r17
    1e22:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    1e26:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1e2a:	87 7f       	andi	r24, 0xF7	; 247
    1e2c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1e30:	ea dd       	rcall	.-1068   	; 0x1a06 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1e32:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
    1e36:	80 ff       	sbrs	r24, 0
    1e38:	fc cf       	rjmp	.-8      	; 0x1e32 <USB_Device_ProcessControlRequest+0x140>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
    1e3a:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    1e3e:	80 68       	ori	r24, 0x80	; 128
    1e40:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1e44:	11 11       	cpse	r17, r1
    1e46:	02 c0       	rjmp	.+4      	; 0x1e4c <USB_Device_ProcessControlRequest+0x15a>
    1e48:	82 e0       	ldi	r24, 0x02	; 2
    1e4a:	01 c0       	rjmp	.+2      	; 0x1e4e <USB_Device_ProcessControlRequest+0x15c>
    1e4c:	83 e0       	ldi	r24, 0x03	; 3
    1e4e:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <USB_DeviceState>
    1e52:	86 c0       	rjmp	.+268    	; 0x1f60 <USB_Device_ProcessControlRequest+0x26e>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1e54:	80 58       	subi	r24, 0x80	; 128
    1e56:	82 30       	cpi	r24, 0x02	; 2
    1e58:	08 f0       	brcs	.+2      	; 0x1e5c <USB_Device_ProcessControlRequest+0x16a>
    1e5a:	82 c0       	rjmp	.+260    	; 0x1f60 <USB_Device_ProcessControlRequest+0x26e>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1e5c:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <USB_ControlRequest+0x2>
    1e60:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <USB_ControlRequest+0x3>
    1e64:	8c 3d       	cpi	r24, 0xDC	; 220
    1e66:	53 e0       	ldi	r21, 0x03	; 3
    1e68:	95 07       	cpc	r25, r21
    1e6a:	71 f5       	brne	.+92     	; 0x1ec8 <USB_Device_ProcessControlRequest+0x1d6>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1e6c:	83 e0       	ldi	r24, 0x03	; 3
    1e6e:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1e70:	8a e2       	ldi	r24, 0x2A	; 42
    1e72:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1e74:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1e76:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1e78:	de 01       	movw	r26, r28
    1e7a:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1e7c:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1e7e:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1e80:	51 e2       	ldi	r21, 0x21	; 33
    1e82:	e3 2f       	mov	r30, r19
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    1e8a:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    1e8c:	20 ff       	sbrs	r18, 0
    1e8e:	03 c0       	rjmp	.+6      	; 0x1e96 <USB_Device_ProcessControlRequest+0x1a4>
					{
						SerialByte >>= 4;
    1e90:	e2 95       	swap	r30
    1e92:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    1e94:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1e96:	ef 70       	andi	r30, 0x0F	; 15
    1e98:	8e 2f       	mov	r24, r30
    1e9a:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1e9c:	ea 30       	cpi	r30, 0x0A	; 10
    1e9e:	10 f0       	brcs	.+4      	; 0x1ea4 <USB_Device_ProcessControlRequest+0x1b2>
    1ea0:	c7 96       	adiw	r24, 0x37	; 55
    1ea2:	01 c0       	rjmp	.+2      	; 0x1ea6 <USB_Device_ProcessControlRequest+0x1b4>
    1ea4:	c0 96       	adiw	r24, 0x30	; 48
    1ea6:	8d 93       	st	X+, r24
    1ea8:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1eaa:	2f 5f       	subi	r18, 0xFF	; 255
    1eac:	24 31       	cpi	r18, 0x14	; 20
    1eae:	49 f7       	brne	.-46     	; 0x1e82 <USB_Device_ProcessControlRequest+0x190>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1eb0:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1eb2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1eb6:	87 7f       	andi	r24, 0xF7	; 247
    1eb8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1ebc:	6a e2       	ldi	r22, 0x2A	; 42
    1ebe:	70 e0       	ldi	r23, 0x00	; 0
    1ec0:	ce 01       	movw	r24, r28
    1ec2:	01 96       	adiw	r24, 0x01	; 1
    1ec4:	37 dc       	rcall	.-1938   	; 0x1734 <Endpoint_Write_Control_Stream_LE>
    1ec6:	12 c0       	rjmp	.+36     	; 0x1eec <USB_Device_ProcessControlRequest+0x1fa>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1ec8:	ae 01       	movw	r20, r28
    1eca:	4f 5f       	subi	r20, 0xFF	; 255
    1ecc:	5f 4f       	sbci	r21, 0xFF	; 255
    1ece:	60 91 be 02 	lds	r22, 0x02BE	; 0x8002be <USB_ControlRequest+0x4>
    1ed2:	98 db       	rcall	.-2256   	; 0x1604 <CALLBACK_USB_GetDescriptor>
    1ed4:	bc 01       	movw	r22, r24
    1ed6:	89 2b       	or	r24, r25
    1ed8:	09 f4       	brne	.+2      	; 0x1edc <USB_Device_ProcessControlRequest+0x1ea>
    1eda:	42 c0       	rjmp	.+132    	; 0x1f60 <USB_Device_ProcessControlRequest+0x26e>
    1edc:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1ee0:	97 7f       	andi	r25, 0xF7	; 247
    1ee2:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1ee6:	89 81       	ldd	r24, Y+1	; 0x01
    1ee8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eea:	be dc       	rcall	.-1668   	; 0x1868 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1eec:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1ef0:	8b 77       	andi	r24, 0x7B	; 123
    1ef2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1ef6:	34 c0       	rjmp	.+104    	; 0x1f60 <USB_Device_ProcessControlRequest+0x26e>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1ef8:	80 38       	cpi	r24, 0x80	; 128
    1efa:	91 f5       	brne	.+100    	; 0x1f60 <USB_Device_ProcessControlRequest+0x26e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1efc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1f00:	87 7f       	andi	r24, 0xF7	; 247
    1f02:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1f06:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1f0a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1f0e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1f12:	8e 77       	andi	r24, 0x7E	; 126
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    1f14:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1f18:	76 dd       	rcall	.-1300   	; 0x1a06 <Endpoint_ClearStatusStage>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1f1a:	22 c0       	rjmp	.+68     	; 0x1f60 <USB_Device_ProcessControlRequest+0x26e>
    1f1c:	81 11       	cpse	r24, r1
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1f1e:	20 c0       	rjmp	.+64     	; 0x1f60 <USB_Device_ProcessControlRequest+0x26e>
    1f20:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <USB_ControlRequest+0x2>
    1f24:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <USB_ControlRequest+0x3>
    1f28:	99 27       	eor	r25, r25
    1f2a:	02 97       	sbiw	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1f2c:	cc f4       	brge	.+50     	; 0x1f60 <USB_Device_ProcessControlRequest+0x26e>
    1f2e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1f32:	87 7f       	andi	r24, 0xF7	; 247
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1f34:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1f38:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <USB_ControlRequest+0x2>

	Endpoint_ClearStatusStage();
    1f3c:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <USB_Device_ConfigurationNumber>

	if (USB_Device_ConfigurationNumber)
    1f40:	62 dd       	rcall	.-1340   	; 0x1a06 <Endpoint_ClearStatusStage>
    1f42:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <USB_Device_ConfigurationNumber>
    1f46:	81 11       	cpse	r24, r1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1f48:	06 c0       	rjmp	.+12     	; 0x1f56 <USB_Device_ProcessControlRequest+0x264>
    1f4a:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1f4e:	87 fd       	sbrc	r24, 7
    1f50:	02 c0       	rjmp	.+4      	; 0x1f56 <USB_Device_ProcessControlRequest+0x264>
    1f52:	81 e0       	ldi	r24, 0x01	; 1
    1f54:	01 c0       	rjmp	.+2      	; 0x1f58 <USB_Device_ProcessControlRequest+0x266>
    1f56:	84 e0       	ldi	r24, 0x04	; 4
    1f58:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
    1f5c:	0e 94 08 05 	call	0xa10	; 0xa10 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1f60:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1f64:	83 ff       	sbrs	r24, 3
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1f66:	0a c0       	rjmp	.+20     	; 0x1f7c <USB_Device_ProcessControlRequest+0x28a>
    1f68:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1f6c:	87 7f       	andi	r24, 0xF7	; 247
    1f6e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1f72:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1f76:	80 62       	ori	r24, 0x20	; 32
    1f78:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    1f7c:	aa 96       	adiw	r28, 0x2a	; 42
    1f7e:	0f b6       	in	r0, 0x3f	; 63
    1f80:	f8 94       	cli
    1f82:	de bf       	out	0x3e, r29	; 62
    1f84:	0f be       	out	0x3f, r0	; 63
    1f86:	cd bf       	out	0x3d, r28	; 61
    1f88:	df 91       	pop	r29
    1f8a:	cf 91       	pop	r28
    1f8c:	1f 91       	pop	r17
    1f8e:	08 95       	ret

00001f90 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    1f90:	08 95       	ret

00001f92 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1f92:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    1f94:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <USB_DeviceState>
    1f98:	88 23       	and	r24, r24
    1f9a:	99 f0       	breq	.+38     	; 0x1fc2 <USB_USBTask+0x30>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1f9c:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1fa0:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1fa2:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1fa6:	89 2f       	mov	r24, r25
    1fa8:	81 70       	andi	r24, 0x01	; 1
    1faa:	90 fd       	sbrc	r25, 0
    1fac:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1fae:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1fb0:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1fb4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
	  USB_Device_ProcessControlRequest();
    1fb8:	83 fd       	sbrc	r24, 3
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1fba:	9b de       	rcall	.-714    	; 0x1cf2 <USB_Device_ProcessControlRequest>
    1fbc:	cf 70       	andi	r28, 0x0F	; 15
    1fbe:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1fc2:	cf 91       	pop	r28
    1fc4:	08 95       	ret

00001fc6 <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    1fc6:	6f 92       	push	r6
    1fc8:	7f 92       	push	r7
    1fca:	8f 92       	push	r8
    1fcc:	9f 92       	push	r9
    1fce:	af 92       	push	r10
    1fd0:	bf 92       	push	r11
    1fd2:	cf 92       	push	r12
    1fd4:	df 92       	push	r13
    1fd6:	ef 92       	push	r14
    1fd8:	ff 92       	push	r15
    1fda:	0f 93       	push	r16
    1fdc:	1f 93       	push	r17
    1fde:	cf 93       	push	r28
    1fe0:	df 93       	push	r29
    1fe2:	00 d0       	rcall	.+0      	; 0x1fe4 <HID_Device_ProcessControlRequest+0x1e>
    1fe4:	1f 92       	push	r1
    1fe6:	cd b7       	in	r28, 0x3d	; 61
    1fe8:	de b7       	in	r29, 0x3e	; 62
    1fea:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    1fec:	ad b6       	in	r10, 0x3d	; 61
    1fee:	be b6       	in	r11, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1ff0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    1ff4:	83 ff       	sbrs	r24, 3
    1ff6:	00 c1       	rjmp	.+512    	; 0x21f8 <HID_Device_ProcessControlRequest+0x232>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    1ff8:	f7 01       	movw	r30, r14
    1ffa:	80 81       	ld	r24, Z
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	20 91 be 02 	lds	r18, 0x02BE	; 0x8002be <USB_ControlRequest+0x4>
    2002:	30 91 bf 02 	lds	r19, 0x02BF	; 0x8002bf <USB_ControlRequest+0x5>
    2006:	28 17       	cp	r18, r24
    2008:	39 07       	cpc	r19, r25
    200a:	09 f0       	breq	.+2      	; 0x200e <HID_Device_ProcessControlRequest+0x48>
    200c:	f5 c0       	rjmp	.+490    	; 0x21f8 <HID_Device_ProcessControlRequest+0x232>
	  return;

	switch (USB_ControlRequest.bRequest)
    200e:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <USB_ControlRequest+0x1>
    2012:	83 30       	cpi	r24, 0x03	; 3
    2014:	09 f4       	brne	.+2      	; 0x2018 <HID_Device_ProcessControlRequest+0x52>
    2016:	97 c0       	rjmp	.+302    	; 0x2146 <HID_Device_ProcessControlRequest+0x180>
    2018:	30 f4       	brcc	.+12     	; 0x2026 <HID_Device_ProcessControlRequest+0x60>
    201a:	81 30       	cpi	r24, 0x01	; 1
    201c:	71 f0       	breq	.+28     	; 0x203a <HID_Device_ProcessControlRequest+0x74>
    201e:	82 30       	cpi	r24, 0x02	; 2
    2020:	09 f4       	brne	.+2      	; 0x2024 <HID_Device_ProcessControlRequest+0x5e>
    2022:	ce c0       	rjmp	.+412    	; 0x21c0 <HID_Device_ProcessControlRequest+0x1fa>
    2024:	e9 c0       	rjmp	.+466    	; 0x21f8 <HID_Device_ProcessControlRequest+0x232>
    2026:	8a 30       	cpi	r24, 0x0A	; 10
    2028:	09 f4       	brne	.+2      	; 0x202c <HID_Device_ProcessControlRequest+0x66>
    202a:	b2 c0       	rjmp	.+356    	; 0x2190 <HID_Device_ProcessControlRequest+0x1ca>
    202c:	8b 30       	cpi	r24, 0x0B	; 11
    202e:	09 f4       	brne	.+2      	; 0x2032 <HID_Device_ProcessControlRequest+0x6c>
    2030:	9b c0       	rjmp	.+310    	; 0x2168 <HID_Device_ProcessControlRequest+0x1a2>
    2032:	89 30       	cpi	r24, 0x09	; 9
    2034:	09 f0       	breq	.+2      	; 0x2038 <HID_Device_ProcessControlRequest+0x72>
    2036:	e0 c0       	rjmp	.+448    	; 0x21f8 <HID_Device_ProcessControlRequest+0x232>
    2038:	49 c0       	rjmp	.+146    	; 0x20cc <HID_Device_ProcessControlRequest+0x106>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    203a:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <USB_ControlRequest>
    203e:	81 3a       	cpi	r24, 0xA1	; 161
    2040:	09 f0       	breq	.+2      	; 0x2044 <HID_Device_ProcessControlRequest+0x7e>
    2042:	da c0       	rjmp	.+436    	; 0x21f8 <HID_Device_ProcessControlRequest+0x232>
			{
    2044:	8d b6       	in	r8, 0x3d	; 61
    2046:	9e b6       	in	r9, 0x3e	; 62
				uint16_t ReportSize = 0;
    2048:	1a 82       	std	Y+2, r1	; 0x02
    204a:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    204c:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <USB_ControlRequest+0x2>
    2050:	10 91 bd 02 	lds	r17, 0x02BD	; 0x8002bd <USB_ControlRequest+0x3>
    2054:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    2056:	f7 01       	movw	r30, r14
    2058:	80 85       	ldd	r24, Z+8	; 0x08
    205a:	48 2f       	mov	r20, r24
    205c:	50 e0       	ldi	r21, 0x00	; 0
    205e:	8d b7       	in	r24, 0x3d	; 61
    2060:	9e b7       	in	r25, 0x3e	; 62
    2062:	84 1b       	sub	r24, r20
    2064:	95 0b       	sbc	r25, r21
    2066:	0f b6       	in	r0, 0x3f	; 63
    2068:	f8 94       	cli
    206a:	9e bf       	out	0x3e, r25	; 62
    206c:	0f be       	out	0x3f, r0	; 63
    206e:	8d bf       	out	0x3d, r24	; 61
    2070:	ed b7       	in	r30, 0x3d	; 61
    2072:	fe b7       	in	r31, 0x3e	; 62
    2074:	31 96       	adiw	r30, 0x01	; 1
    2076:	6f 01       	movw	r12, r30

				memset(ReportData, 0, sizeof(ReportData));
    2078:	60 e0       	ldi	r22, 0x00	; 0
    207a:	70 e0       	ldi	r23, 0x00	; 0
    207c:	cf 01       	movw	r24, r30
    207e:	bc d1       	rcall	.+888    	; 0x23f8 <memset>

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    2080:	4f ef       	ldi	r20, 0xFF	; 255
    2082:	41 0f       	add	r20, r17
    2084:	8e 01       	movw	r16, r28
    2086:	0f 5f       	subi	r16, 0xFF	; 255
    2088:	1f 4f       	sbci	r17, 0xFF	; 255
    208a:	96 01       	movw	r18, r12
    208c:	be 01       	movw	r22, r28
    208e:	6d 5f       	subi	r22, 0xFD	; 253
    2090:	7f 4f       	sbci	r23, 0xFF	; 255
    2092:	c7 01       	movw	r24, r14
    2094:	0e 94 35 05 	call	0xa6a	; 0xa6a <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    2098:	f7 01       	movw	r30, r14
    209a:	86 81       	ldd	r24, Z+6	; 0x06
    209c:	97 81       	ldd	r25, Z+7	; 0x07
    209e:	00 97       	sbiw	r24, 0x00	; 0
    20a0:	21 f0       	breq	.+8      	; 0x20aa <HID_Device_ProcessControlRequest+0xe4>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    20a2:	40 85       	ldd	r20, Z+8	; 0x08
    20a4:	50 e0       	ldi	r21, 0x00	; 0
    20a6:	b6 01       	movw	r22, r12
    20a8:	9e d1       	rcall	.+828    	; 0x23e6 <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    20aa:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    20ae:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    20b2:	87 7f       	andi	r24, 0xF7	; 247
    20b4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				}

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    20b8:	69 81       	ldd	r22, Y+1	; 0x01
    20ba:	7a 81       	ldd	r23, Y+2	; 0x02
    20bc:	c6 01       	movw	r24, r12
    20be:	3a db       	rcall	.-2444   	; 0x1734 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    20c0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    20c4:	8b 77       	andi	r24, 0x7B	; 123
    20c6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    20ca:	37 c0       	rjmp	.+110    	; 0x213a <HID_Device_ProcessControlRequest+0x174>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    20cc:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <USB_ControlRequest>
    20d0:	81 32       	cpi	r24, 0x21	; 33
    20d2:	09 f0       	breq	.+2      	; 0x20d6 <HID_Device_ProcessControlRequest+0x110>
    20d4:	91 c0       	rjmp	.+290    	; 0x21f8 <HID_Device_ProcessControlRequest+0x232>
			{
    20d6:	8d b6       	in	r8, 0x3d	; 61
    20d8:	9e b6       	in	r9, 0x3e	; 62
				uint16_t ReportSize = USB_ControlRequest.wLength;
    20da:	00 91 c0 02 	lds	r16, 0x02C0	; 0x8002c0 <USB_ControlRequest+0x6>
    20de:	10 91 c1 02 	lds	r17, 0x02C1	; 0x8002c1 <USB_ControlRequest+0x7>
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    20e2:	70 90 bc 02 	lds	r7, 0x02BC	; 0x8002bc <USB_ControlRequest+0x2>
    20e6:	60 90 bd 02 	lds	r6, 0x02BD	; 0x8002bd <USB_ControlRequest+0x3>
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    20ea:	8d b7       	in	r24, 0x3d	; 61
    20ec:	9e b7       	in	r25, 0x3e	; 62
    20ee:	80 1b       	sub	r24, r16
    20f0:	91 0b       	sbc	r25, r17
    20f2:	0f b6       	in	r0, 0x3f	; 63
    20f4:	f8 94       	cli
    20f6:	9e bf       	out	0x3e, r25	; 62
    20f8:	0f be       	out	0x3f, r0	; 63
    20fa:	8d bf       	out	0x3d, r24	; 61
    20fc:	ed b7       	in	r30, 0x3d	; 61
    20fe:	fe b7       	in	r31, 0x3e	; 62
    2100:	31 96       	adiw	r30, 0x01	; 1
    2102:	6f 01       	movw	r12, r30
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2104:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2108:	87 7f       	andi	r24, 0xF7	; 247
    210a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    210e:	b8 01       	movw	r22, r16
    2110:	cf 01       	movw	r24, r30
    2112:	6a db       	rcall	.-2348   	; 0x17e8 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2114:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2118:	8e 77       	andi	r24, 0x7E	; 126
    211a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    211e:	21 e0       	ldi	r18, 0x01	; 1
    2120:	71 10       	cpse	r7, r1
    2122:	01 c0       	rjmp	.+2      	; 0x2126 <HID_Device_ProcessControlRequest+0x160>
    2124:	20 e0       	ldi	r18, 0x00	; 0
    2126:	30 e0       	ldi	r19, 0x00	; 0
    2128:	02 1b       	sub	r16, r18
    212a:	13 0b       	sbc	r17, r19
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
    212c:	2c 0d       	add	r18, r12

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    212e:	3d 1d       	adc	r19, r13
    2130:	4f ef       	ldi	r20, 0xFF	; 255
    2132:	46 0d       	add	r20, r6
    2134:	67 2d       	mov	r22, r7
    2136:	c7 01       	movw	r24, r14
    2138:	59 da       	rcall	.-2894   	; 0x15ec <CALLBACK_HID_Device_ProcessHIDReport>
    213a:	0f b6       	in	r0, 0x3f	; 63
    213c:	f8 94       	cli
    213e:	9e be       	out	0x3e, r9	; 62
    2140:	0f be       	out	0x3f, r0	; 63
    2142:	8d be       	out	0x3d, r8	; 61
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    2144:	59 c0       	rjmp	.+178    	; 0x21f8 <HID_Device_ProcessControlRequest+0x232>
    2146:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <USB_ControlRequest>
    214a:	81 3a       	cpi	r24, 0xA1	; 161
    214c:	09 f0       	breq	.+2      	; 0x2150 <HID_Device_ProcessControlRequest+0x18a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    214e:	54 c0       	rjmp	.+168    	; 0x21f8 <HID_Device_ProcessControlRequest+0x232>
    2150:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2154:	87 7f       	andi	r24, 0xF7	; 247
    2156:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    215a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    215e:	80 ff       	sbrs	r24, 0
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    2160:	fc cf       	rjmp	.-8      	; 0x215a <HID_Device_ProcessControlRequest+0x194>
    2162:	f7 01       	movw	r30, r14
    2164:	81 85       	ldd	r24, Z+9	; 0x09
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    2166:	40 c0       	rjmp	.+128    	; 0x21e8 <HID_Device_ProcessControlRequest+0x222>
    2168:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <USB_ControlRequest>
    216c:	81 32       	cpi	r24, 0x21	; 33
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    216e:	09 f0       	breq	.+2      	; 0x2172 <HID_Device_ProcessControlRequest+0x1ac>
    2170:	43 c0       	rjmp	.+134    	; 0x21f8 <HID_Device_ProcessControlRequest+0x232>
    2172:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    2176:	87 7f       	andi	r24, 0xF7	; 247
    2178:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    217c:	44 dc       	rcall	.-1912   	; 0x1a06 <Endpoint_ClearStatusStage>
    217e:	90 91 bc 02 	lds	r25, 0x02BC	; 0x8002bc <USB_ControlRequest+0x2>
    2182:	81 e0       	ldi	r24, 0x01	; 1
    2184:	91 11       	cpse	r25, r1
    2186:	01 c0       	rjmp	.+2      	; 0x218a <HID_Device_ProcessControlRequest+0x1c4>
    2188:	80 e0       	ldi	r24, 0x00	; 0
    218a:	f7 01       	movw	r30, r14
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    218c:	81 87       	std	Z+9, r24	; 0x09
    218e:	34 c0       	rjmp	.+104    	; 0x21f8 <HID_Device_ProcessControlRequest+0x232>
    2190:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <USB_ControlRequest>
    2194:	81 32       	cpi	r24, 0x21	; 33
    2196:	81 f5       	brne	.+96     	; 0x21f8 <HID_Device_ProcessControlRequest+0x232>
    2198:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    219c:	87 7f       	andi	r24, 0xF7	; 247
    219e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    21a2:	31 dc       	rcall	.-1950   	; 0x1a06 <Endpoint_ClearStatusStage>
    21a4:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <USB_ControlRequest+0x2>
    21a8:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <USB_ControlRequest+0x3>
    21ac:	88 27       	eor	r24, r24
    21ae:	36 e0       	ldi	r19, 0x06	; 6
    21b0:	96 95       	lsr	r25
    21b2:	87 95       	ror	r24
    21b4:	3a 95       	dec	r19
    21b6:	e1 f7       	brne	.-8      	; 0x21b0 <HID_Device_ProcessControlRequest+0x1ea>
    21b8:	f7 01       	movw	r30, r14
    21ba:	95 87       	std	Z+13, r25	; 0x0d
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    21bc:	84 87       	std	Z+12, r24	; 0x0c
    21be:	1c c0       	rjmp	.+56     	; 0x21f8 <HID_Device_ProcessControlRequest+0x232>
    21c0:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <USB_ControlRequest>
    21c4:	81 3a       	cpi	r24, 0xA1	; 161
    21c6:	c1 f4       	brne	.+48     	; 0x21f8 <HID_Device_ProcessControlRequest+0x232>
    21c8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    21cc:	87 7f       	andi	r24, 0xF7	; 247
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    21ce:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    21d2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    21d6:	80 ff       	sbrs	r24, 0
    21d8:	fc cf       	rjmp	.-8      	; 0x21d2 <HID_Device_ProcessControlRequest+0x20c>
    21da:	f7 01       	movw	r30, r14
    21dc:	84 85       	ldd	r24, Z+12	; 0x0c
    21de:	95 85       	ldd	r25, Z+13	; 0x0d
    21e0:	96 95       	lsr	r25
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    21e2:	87 95       	ror	r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    21e4:	96 95       	lsr	r25
    21e6:	87 95       	ror	r24
    21e8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    21ec:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    21f0:	8e 77       	andi	r24, 0x7E	; 126
			}

			break;
	}
}
    21f2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    21f6:	07 dc       	rcall	.-2034   	; 0x1a06 <Endpoint_ClearStatusStage>
    21f8:	0f b6       	in	r0, 0x3f	; 63
    21fa:	f8 94       	cli
    21fc:	be be       	out	0x3e, r11	; 62
    21fe:	0f be       	out	0x3f, r0	; 63
    2200:	ad be       	out	0x3d, r10	; 61
    2202:	0f 90       	pop	r0
    2204:	0f 90       	pop	r0
    2206:	0f 90       	pop	r0
    2208:	df 91       	pop	r29
    220a:	cf 91       	pop	r28
    220c:	1f 91       	pop	r17
    220e:	0f 91       	pop	r16
    2210:	ff 90       	pop	r15
    2212:	ef 90       	pop	r14
    2214:	df 90       	pop	r13
    2216:	cf 90       	pop	r12
    2218:	bf 90       	pop	r11
    221a:	af 90       	pop	r10
    221c:	9f 90       	pop	r9
    221e:	8f 90       	pop	r8
    2220:	7f 90       	pop	r7
    2222:	6f 90       	pop	r6
    2224:	08 95       	ret

00002226 <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    2226:	fc 01       	movw	r30, r24
    2228:	39 96       	adiw	r30, 0x09	; 9
    222a:	27 e0       	ldi	r18, 0x07	; 7
    222c:	df 01       	movw	r26, r30
    222e:	1d 92       	st	X+, r1
    2230:	2a 95       	dec	r18
    2232:	e9 f7       	brne	.-6      	; 0x222e <HID_Device_ConfigureEndpoints+0x8>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    2234:	21 e0       	ldi	r18, 0x01	; 1
    2236:	fc 01       	movw	r30, r24
    2238:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
    223a:	24 ef       	ldi	r18, 0xF4	; 244
    223c:	31 e0       	ldi	r19, 0x01	; 1
    223e:	35 87       	std	Z+13, r19	; 0x0d
    2240:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
    2242:	23 e0       	ldi	r18, 0x03	; 3
    2244:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
    2246:	61 e0       	ldi	r22, 0x01	; 1
    2248:	01 96       	adiw	r24, 0x01	; 1
    224a:	a0 cb       	rjmp	.-2240   	; 0x198c <Endpoint_ConfigureEndpointTable>

0000224c <HID_Device_USBTask>:
	
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    224c:	5f 92       	push	r5
    224e:	6f 92       	push	r6
    2250:	7f 92       	push	r7
    2252:	8f 92       	push	r8
    2254:	9f 92       	push	r9
    2256:	af 92       	push	r10
    2258:	bf 92       	push	r11
    225a:	cf 92       	push	r12
    225c:	df 92       	push	r13
    225e:	ef 92       	push	r14
    2260:	ff 92       	push	r15
    2262:	0f 93       	push	r16
    2264:	1f 93       	push	r17
    2266:	cf 93       	push	r28
    2268:	df 93       	push	r29
    226a:	00 d0       	rcall	.+0      	; 0x226c <HID_Device_USBTask+0x20>
    226c:	1f 92       	push	r1
    226e:	cd b7       	in	r28, 0x3d	; 61
    2270:	de b7       	in	r29, 0x3e	; 62
    2272:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}
		
		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    2274:	ad b6       	in	r10, 0x3d	; 61
    2276:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    2278:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <USB_DeviceState>
    227c:	84 30       	cpi	r24, 0x04	; 4
    227e:	09 f0       	breq	.+2      	; 0x2282 <HID_Device_USBTask+0x36>
    2280:	87 c0       	rjmp	.+270    	; 0x2390 <HID_Device_USBTask+0x144>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    2282:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    2286:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    228a:	f7 01       	movw	r30, r14
    228c:	22 85       	ldd	r18, Z+10	; 0x0a
    228e:	33 85       	ldd	r19, Z+11	; 0x0b
    2290:	28 17       	cp	r18, r24
    2292:	39 07       	cpc	r19, r25
    2294:	09 f4       	brne	.+2      	; 0x2298 <HID_Device_USBTask+0x4c>
    2296:	7c c0       	rjmp	.+248    	; 0x2390 <HID_Device_USBTask+0x144>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2298:	81 81       	ldd	r24, Z+1	; 0x01
    229a:	8f 70       	andi	r24, 0x0F	; 15
    229c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    22a0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	  return;
	  
	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
    22a4:	85 ff       	sbrs	r24, 5
    22a6:	74 c0       	rjmp	.+232    	; 0x2390 <HID_Device_USBTask+0x144>
	{
    22a8:	8d b6       	in	r8, 0x3d	; 61
    22aa:	9e b6       	in	r9, 0x3e	; 62
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    22ac:	40 85       	ldd	r20, Z+8	; 0x08
    22ae:	50 e0       	ldi	r21, 0x00	; 0
    22b0:	8d b7       	in	r24, 0x3d	; 61
    22b2:	9e b7       	in	r25, 0x3e	; 62
    22b4:	84 1b       	sub	r24, r20
    22b6:	95 0b       	sbc	r25, r21
    22b8:	0f b6       	in	r0, 0x3f	; 63
    22ba:	f8 94       	cli
    22bc:	9e bf       	out	0x3e, r25	; 62
    22be:	0f be       	out	0x3f, r0	; 63
    22c0:	8d bf       	out	0x3d, r24	; 61
    22c2:	ed b7       	in	r30, 0x3d	; 61
    22c4:	fe b7       	in	r31, 0x3e	; 62
    22c6:	31 96       	adiw	r30, 0x01	; 1
    22c8:	6f 01       	movw	r12, r30
		uint8_t  ReportID     = 0;
    22ca:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
    22cc:	1a 82       	std	Y+2, r1	; 0x02
    22ce:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
    22d0:	60 e0       	ldi	r22, 0x00	; 0
    22d2:	70 e0       	ldi	r23, 0x00	; 0
    22d4:	cf 01       	movw	r24, r30
    22d6:	90 d0       	rcall	.+288    	; 0x23f8 <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    22d8:	8e 01       	movw	r16, r28
    22da:	0f 5f       	subi	r16, 0xFF	; 255
    22dc:	1f 4f       	sbci	r17, 0xFF	; 255
    22de:	96 01       	movw	r18, r12
    22e0:	40 e0       	ldi	r20, 0x00	; 0
    22e2:	be 01       	movw	r22, r28
    22e4:	6d 5f       	subi	r22, 0xFD	; 253
    22e6:	7f 4f       	sbci	r23, 0xFF	; 255
    22e8:	c7 01       	movw	r24, r14
    22ea:	0e 94 35 05 	call	0xa6a	; 0xa6a <CALLBACK_HID_Device_CreateHIDReport>
    22ee:	58 2e       	mov	r5, r24
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    22f0:	f7 01       	movw	r30, r14
    22f2:	84 85       	ldd	r24, Z+12	; 0x0c
    22f4:	95 85       	ldd	r25, Z+13	; 0x0d
    22f6:	89 2b       	or	r24, r25
    22f8:	29 f0       	breq	.+10     	; 0x2304 <HID_Device_USBTask+0xb8>
    22fa:	11 e0       	ldi	r17, 0x01	; 1
    22fc:	86 85       	ldd	r24, Z+14	; 0x0e
    22fe:	97 85       	ldd	r25, Z+15	; 0x0f
    2300:	89 2b       	or	r24, r25
    2302:	09 f0       	breq	.+2      	; 0x2306 <HID_Device_USBTask+0xba>
    2304:	10 e0       	ldi	r17, 0x00	; 0

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    2306:	f7 01       	movw	r30, r14
    2308:	66 80       	ldd	r6, Z+6	; 0x06
    230a:	77 80       	ldd	r7, Z+7	; 0x07
    230c:	61 14       	cp	r6, r1
    230e:	71 04       	cpc	r7, r1
    2310:	81 f0       	breq	.+32     	; 0x2332 <HID_Device_USBTask+0xe6>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    2312:	49 81       	ldd	r20, Y+1	; 0x01
    2314:	5a 81       	ldd	r21, Y+2	; 0x02
    2316:	b3 01       	movw	r22, r6
    2318:	c6 01       	movw	r24, r12
    231a:	58 d0       	rcall	.+176    	; 0x23cc <memcmp>
    231c:	01 e0       	ldi	r16, 0x01	; 1
    231e:	89 2b       	or	r24, r25
    2320:	09 f4       	brne	.+2      	; 0x2324 <HID_Device_USBTask+0xd8>
    2322:	00 e0       	ldi	r16, 0x00	; 0
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    2324:	f7 01       	movw	r30, r14
    2326:	40 85       	ldd	r20, Z+8	; 0x08
    2328:	50 e0       	ldi	r21, 0x00	; 0
    232a:	b6 01       	movw	r22, r12
    232c:	c3 01       	movw	r24, r6
    232e:	5b d0       	rcall	.+182    	; 0x23e6 <memcpy>
    2330:	01 c0       	rjmp	.+2      	; 0x2334 <HID_Device_USBTask+0xe8>

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    2332:	00 e0       	ldi	r16, 0x00	; 0
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    2334:	89 81       	ldd	r24, Y+1	; 0x01
    2336:	9a 81       	ldd	r25, Y+2	; 0x02
    2338:	89 2b       	or	r24, r25
    233a:	f1 f0       	breq	.+60     	; 0x2378 <HID_Device_USBTask+0x12c>
    233c:	51 10       	cpse	r5, r1
    233e:	04 c0       	rjmp	.+8      	; 0x2348 <HID_Device_USBTask+0xfc>
    2340:	01 11       	cpse	r16, r1
    2342:	02 c0       	rjmp	.+4      	; 0x2348 <HID_Device_USBTask+0xfc>
    2344:	10 ff       	sbrs	r17, 0
    2346:	18 c0       	rjmp	.+48     	; 0x2378 <HID_Device_USBTask+0x12c>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    2348:	f7 01       	movw	r30, r14
    234a:	84 85       	ldd	r24, Z+12	; 0x0c
    234c:	95 85       	ldd	r25, Z+13	; 0x0d
    234e:	97 87       	std	Z+15, r25	; 0x0f
    2350:	86 87       	std	Z+14, r24	; 0x0e
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2352:	81 81       	ldd	r24, Z+1	; 0x01
    2354:	8f 70       	andi	r24, 0x0F	; 15
    2356:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    235a:	8b 81       	ldd	r24, Y+3	; 0x03
    235c:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    235e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    2362:	69 81       	ldd	r22, Y+1	; 0x01
    2364:	7a 81       	ldd	r23, Y+2	; 0x02
    2366:	40 e0       	ldi	r20, 0x00	; 0
    2368:	50 e0       	ldi	r21, 0x00	; 0
    236a:	c6 01       	movw	r24, r12
    236c:	99 d9       	rcall	.-3278   	; 0x16a0 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    236e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2372:	8e 77       	andi	r24, 0x7E	; 126
    2374:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2378:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    237c:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>

			Endpoint_ClearIN();
		}
		
		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    2380:	f7 01       	movw	r30, r14
    2382:	93 87       	std	Z+11, r25	; 0x0b
    2384:	82 87       	std	Z+10, r24	; 0x0a
    2386:	0f b6       	in	r0, 0x3f	; 63
    2388:	f8 94       	cli
    238a:	9e be       	out	0x3e, r9	; 62
    238c:	0f be       	out	0x3f, r0	; 63
    238e:	8d be       	out	0x3d, r8	; 61
	}
}
    2390:	0f b6       	in	r0, 0x3f	; 63
    2392:	f8 94       	cli
    2394:	be be       	out	0x3e, r11	; 62
    2396:	0f be       	out	0x3f, r0	; 63
    2398:	ad be       	out	0x3d, r10	; 61
    239a:	0f 90       	pop	r0
    239c:	0f 90       	pop	r0
    239e:	0f 90       	pop	r0
    23a0:	df 91       	pop	r29
    23a2:	cf 91       	pop	r28
    23a4:	1f 91       	pop	r17
    23a6:	0f 91       	pop	r16
    23a8:	ff 90       	pop	r15
    23aa:	ef 90       	pop	r14
    23ac:	df 90       	pop	r13
    23ae:	cf 90       	pop	r12
    23b0:	bf 90       	pop	r11
    23b2:	af 90       	pop	r10
    23b4:	9f 90       	pop	r9
    23b6:	8f 90       	pop	r8
    23b8:	7f 90       	pop	r7
    23ba:	6f 90       	pop	r6
    23bc:	5f 90       	pop	r5
    23be:	08 95       	ret

000023c0 <__tablejump2__>:
    23c0:	ee 0f       	add	r30, r30
    23c2:	ff 1f       	adc	r31, r31
    23c4:	05 90       	lpm	r0, Z+
    23c6:	f4 91       	lpm	r31, Z
    23c8:	e0 2d       	mov	r30, r0
    23ca:	09 94       	ijmp

000023cc <memcmp>:
    23cc:	fb 01       	movw	r30, r22
    23ce:	dc 01       	movw	r26, r24
    23d0:	04 c0       	rjmp	.+8      	; 0x23da <memcmp+0xe>
    23d2:	8d 91       	ld	r24, X+
    23d4:	01 90       	ld	r0, Z+
    23d6:	80 19       	sub	r24, r0
    23d8:	21 f4       	brne	.+8      	; 0x23e2 <memcmp+0x16>
    23da:	41 50       	subi	r20, 0x01	; 1
    23dc:	50 40       	sbci	r21, 0x00	; 0
    23de:	c8 f7       	brcc	.-14     	; 0x23d2 <memcmp+0x6>
    23e0:	88 1b       	sub	r24, r24
    23e2:	99 0b       	sbc	r25, r25
    23e4:	08 95       	ret

000023e6 <memcpy>:
    23e6:	fb 01       	movw	r30, r22
    23e8:	dc 01       	movw	r26, r24
    23ea:	02 c0       	rjmp	.+4      	; 0x23f0 <memcpy+0xa>
    23ec:	01 90       	ld	r0, Z+
    23ee:	0d 92       	st	X+, r0
    23f0:	41 50       	subi	r20, 0x01	; 1
    23f2:	50 40       	sbci	r21, 0x00	; 0
    23f4:	d8 f7       	brcc	.-10     	; 0x23ec <memcpy+0x6>
    23f6:	08 95       	ret

000023f8 <memset>:
    23f8:	dc 01       	movw	r26, r24
    23fa:	01 c0       	rjmp	.+2      	; 0x23fe <memset+0x6>
    23fc:	6d 93       	st	X+, r22
    23fe:	41 50       	subi	r20, 0x01	; 1
    2400:	50 40       	sbci	r21, 0x00	; 0
    2402:	e0 f7       	brcc	.-8      	; 0x23fc <memset+0x4>
    2404:	08 95       	ret

00002406 <eeprom_read_byte>:
    2406:	f9 99       	sbic	0x1f, 1	; 31
    2408:	fe cf       	rjmp	.-4      	; 0x2406 <eeprom_read_byte>
    240a:	92 bd       	out	0x22, r25	; 34
    240c:	81 bd       	out	0x21, r24	; 33
    240e:	f8 9a       	sbi	0x1f, 0	; 31
    2410:	99 27       	eor	r25, r25
    2412:	80 b5       	in	r24, 0x20	; 32
    2414:	08 95       	ret

00002416 <eeprom_write_byte>:
    2416:	26 2f       	mov	r18, r22

00002418 <eeprom_write_r18>:
    2418:	f9 99       	sbic	0x1f, 1	; 31
    241a:	fe cf       	rjmp	.-4      	; 0x2418 <eeprom_write_r18>
    241c:	1f ba       	out	0x1f, r1	; 31
    241e:	92 bd       	out	0x22, r25	; 34
    2420:	81 bd       	out	0x21, r24	; 33
    2422:	20 bd       	out	0x20, r18	; 32
    2424:	0f b6       	in	r0, 0x3f	; 63
    2426:	f8 94       	cli
    2428:	fa 9a       	sbi	0x1f, 2	; 31
    242a:	f9 9a       	sbi	0x1f, 1	; 31
    242c:	0f be       	out	0x3f, r0	; 63
    242e:	01 96       	adiw	r24, 0x01	; 1
    2430:	08 95       	ret

00002432 <_exit>:
    2432:	f8 94       	cli

00002434 <__stop_program>:
    2434:	ff cf       	rjmp	.-2      	; 0x2434 <__stop_program>
